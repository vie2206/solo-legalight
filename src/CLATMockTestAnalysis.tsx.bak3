import React, { useState, useEffect } from 'react';
import {
  Target, TrendingUp, Clock, Brain, AlertCircle, CheckCircle,
  XCircle, BarChart3, PieChart, Activity, Timer, Award,
  Zap, Users, Trophy, ChevronRight, ChevronLeft, Settings,
  BookOpen, Lightbulb, TrendingDown, RefreshCw,
  FileText, Download, Share2, Calendar, Flag, Bookmark,
  MessageSquare, Heart, ThumbsUp, ThumbsDown, Eye,
  EyeOff, Lock, Unlock, Star, Sparkles, Flame,
  ArrowUpRight, ArrowDownRight, Info, HelpCircle
} from 'lucide-react';

interface User {
  id: string;
  name: string;
  email: string;
  role: string;
}

interface CLATMockTestAnalysisProps {
  user: User | null;
  onBack: () => void;
}

// Mock Test Data Structure
interface MockTest {
  id: string;
  testNumber: number;
  date: string;
  totalQuestions: number;
  totalScore: number;
  percentile: number;
  rank: number;
  timeTaken: number;
  sections: Section[];
  questions: Question[];
  strategy: TestStrategy;
  basicInfo: MockTestBasicInfo;
  preMockPlanning: PreMockPlanning;
}

// Framework-specific interfaces
interface MockTestBasicInfo {
  name: string;
  testSeries: string;
  mode: 'self-timed' | 'proctored' | 'exam-simulation';
  targetScore: number;
  targetPercentile: number;
  targetRank: number;
}

interface PreMockPlanning {
  overallStrategy: OverallStrategy;
  sectionStrategy: SectionStrategyData[];
  omrStrategy: OMRStrategy;
  attemptSequence: AttemptSequence;
}

// Performance Analysis interfaces
interface ActualPerformance {
  performanceBreakdown: PerformanceBreakdown[];
  finalResults: FinalResults;
  actualVsTarget: ActualVsTarget[];
  attemptSequenceAnalysis: AttemptSequenceAnalysis;
}

interface PerformanceBreakdown {
  section: string;
  attempted: number;
  correct: number;
  wrong: number;
  skipped: number;
  accuracyPercent: number;
  timeSpent: number;
  omrTime: number;
}

interface FinalResults {
  finalScore: number;
  rawScore: number;
  percentile: number;
  rank: number;
  timeRemaining: number;
  scoreCalculation: string;
}

interface ActualVsTarget {
  metric: string;
  target: number | string;
  actual: number | string;
  variance: number | string;
  status: 'achieved' | 'missed' | 'exceeded';
}

interface AttemptSequenceAnalysis {
  plannedSequence: string[];
  actualSequence: string[];
  sequenceSatisfaction: 'very-satisfied' | 'satisfied' | 'neutral' | 'dissatisfied';
  wouldUseSameAgain: 'yes' | 'no' | 'with-modifications';
  sequenceImpact: {
    positive: string[];
    negative: string[];
    recommendedChanges: string[];
  };
}

interface QuestionAnalysis {
  questionNumber: number;
  section: string;
  status: 'correct' | 'wrong' | 'skipped' | 'not-sure';
  timeTaken: number;
  difficulty: 'easy' | 'medium' | 'hard' | 'tricky';
  topicType: string;
  errorAnalysis: string;
  omrMethod: 'included' | 'separate';
}

interface OverallStrategy {
  questionsToAttempt: number;
  questionsToMarkConfidently: number;
  maxWrongAnswers: number;
  riskQuestionsAllowed: number;
  skipStrategyThreshold: number;
  riskRewardStrategy: 'conservative' | 'moderate' | 'aggressive';
}

interface SectionStrategyData {
  name: string;
  totalQuestions: number;
  targetTime: number;
  attemptTarget: number;
  correctTarget: number;
  maxWrong: number;
  strategyNotes: string;
  priority: number;
}

interface OMRStrategy {
  method: 'after-each-question' | 'after-each-section' | 'after-entire-paper';
  plannedOMRTime: number;
  timePerQuestionBubbling: number;
  sectionWiseOMRPlan: Record<string, number>;
  riskManagement: {
    doubleCheckingStrategy: string;
    errorPreventionMethod: string;
    timeBuffer: number;
  };
  specialInstructions: {
    questionNumberTracking: string;
    answerSheetOrganization: string;
    backupPlan: string;
  };
}

interface AttemptSequence {
  plannedSequence: {
    section: string;
    time: number;
    reasoning: string;
  }[];
  sequenceReasoning: string[];
  expectedBenefits: {
    energyManagement: string;
    confidenceBuilding: string;
    timeOptimization: string;
  };
}

interface Section {
  name: string;
  questions: number;
  attempted: number;
  correct: number;
  incorrect: number;
  skipped: number;
  score: number;
  maxScore: number;
  timeSpent: number;
  accuracy: number;
}

interface Question {
  id: number;
  section: string;
  topic: string;
  difficulty: 'Easy' | 'Medium' | 'Hard';
  attemptStatus: 'Correct' | 'Incorrect' | 'Skipped';
  timeTaken: number;
  sequence: number;
  markedForReview: boolean;
  confidence: number;
  riskTaken?: boolean;
}

interface TestStrategy {
  sectionSequence: string[];
  targetScore: number;
  riskThreshold: number;
  skipStrategy: string;
  timeAllocation: Record<string, number>;
}

// Time & OMR Analysis interfaces (Page 9 from pages 21-25)
interface TimeOMRAnalysis {
  sectionWiseTimeAnalysis: SectionTimeAnalysis[];
  omrAnalysis: {
    plannedOMRTime: number;
    actualOMRTime: number;
    omrEfficiency: number;
    bubbleSheetAccuracy: number;
  };
  timeManagementInsights: {
    overtimeSeconds: number;
    undertimeSeconds: number;
    criticalTimePoints: string[];
    timeWasteAreas: string[];
    effectiveTimeUsage: string[];
  };
}

interface SectionTimeAnalysis {
  section: string;
  plannedTime: number;
  actualTime: number;
  timeVariance: number;
  timePerQuestion: number;
  efficientQuestions: number;
  timeWastedQuestions: number;
  rushingIndicators: string[];
  timeManagementGrade: 'A' | 'B' | 'C' | 'D' | 'F';
}

// Strategic Decision Log interfaces (Page 10 from pages 21-25)
interface StrategicDecisionLog {
  riskAnalysis: RiskDecisionAnalysis[];
  decisionAccuracy: DecisionAccuracyMetrics;
  learningInsights: StrategicLearning[];
  futureStrategy: StrategyRecommendations;
}

interface RiskDecisionAnalysis {
  questionNumber: number;
  section: string;
  riskType: 'time-risk' | 'knowledge-risk' | 'elimination-risk' | 'guess-risk';
  decisionTaken: 'attempted' | 'skipped' | 'guessed';
  outcome: 'correct' | 'wrong' | 'not-attempted';
  riskJustified: boolean;
  alternativeAction: string;
  lessonLearned: string;
}

interface DecisionAccuracyMetrics {
  totalRiskyDecisions: number;
  goodRiskDecisions: number;
  badRiskDecisions: number;
  riskAccuracyPercent: number;
  riskImpactOnScore: number;
  avgTimePerRiskyQuestion: number;
}

interface StrategicLearning {
  category: 'time-management' | 'risk-assessment' | 'section-strategy' | 'omr-strategy';
  observation: string;
  impact: 'positive' | 'negative' | 'neutral';
  recommendedChange: string;
  confidenceLevel: 'high' | 'medium' | 'low';
}

interface StrategyRecommendations {
  nextMockStrategy: {
    timeAllocation: Record<string, number>;
    riskThreshold: 'conservative' | 'moderate' | 'aggressive';
    sectionSequence: string[];
    omrMethod: string;
  };
  practiceAreas: string[];
  strengthsToMaintain: string[];
  criticalImprovements: string[];
}

// Performance Benchmarking interfaces (Page 26)
interface PerformanceBenchmarking {
  scoreComparison: ScoreComparison;
  topPerformanceBenchmarks: TopBenchmarks;
  sectionalComparison: SectionalComparison[];
  progressVelocity: ProgressVelocity;
}

interface ScoreComparison {
  targetScore: number;
  actualScore: number;
  difference: number;
  yourPercentile: number;
  targetPercentile: number;
  gap: number;
}

interface TopBenchmarks {
  top1Score: number;
  yourGapToTop1: number;
  top10Score: number;
  yourGapToTop10: number;
  benchmarkAnalysis: string;
}

interface SectionalComparison {
  section: string;
  yourScore: string;
  batchAvg: string;
  top1Percent: string;
  yourRank: string;
  improvementNeeded: string;
}

interface ProgressVelocity {
  improvementFromLastMock: number;
  weeklyImprovement: number;
  monthlyImprovement: number;
  projectedScore: number;
  rankMovement: number;
  percentileMovement: number;
  closestCompetitors: number;
  distanceFromTargetRank: number;
}

// Comprehensive Review interfaces (Pages 27-28)
interface ComprehensiveReview {
  performanceSummary: PerformanceSummary;
  keyPerformanceIndicators: KPI[];
  sectionalRating: SectionalRating[];
  criticalSuccessFactors: CriticalFactors;
  learningConsolidation: LearningConsolidation;
}

interface PerformanceSummary {
  mockTestNumber: number;
  finalScore: number;
  percentile: number;
  rank: number;
  overallGrade: string;
  trend: string;
}

interface KPI {
  metric: string;
  target: string | number;
  achieved: string | number;
  status: 'achieved' | 'partial' | 'missed';
}

interface SectionalRating {
  section: string;
  score: string;
  target: string;
  performanceRating: number; // 1-5 stars
  improvementPriority: 'high' | 'medium' | 'low';
}

interface CriticalFactors {
  successFactors: string[];
  failureFactors: string[];
  strategicEffectiveness: Record<string, number>; // metric: score out of 10
  topLessons: string[];
  topSkills: string[];
  topHabits: string[];
  comparativePosition: ComparativePosition;
}

interface LearningConsolidation {
  importantLessons: string[];
  skillsDeveloped: string[];
  habitsFormed: string[];
}

interface ComparativePosition {
  improvementFromFirstMock: number;
  improvementFromLastMock: number;
  distanceFromPersonalBest: string;
  distanceFromTargetScore: number;
  currentTrajectory: 'upward' | 'stable' | 'needs-attention';
}

// Additional type definitions
interface TopicMastery {
  topic: string;
  level: string;
  accuracy: number;
  timeSpent: string;
  topicType?: string;
  questions?: number;
  correct?: number;
  accuracyPercent?: number;
  masteryLevel?: string;
  actionRequired?: string;
}

interface SectionEnergyData {
  section: string;
  energy: number;
  confidence: number;
  performance?: number;
  notes?: string;
}

// Mistake Bank interfaces (Pages 29-30)
interface MistakeBank {
  topMistakePatterns: MistakePattern[];
  mistakeCategories: MistakeCategory;
  errorEliminationProgress: ErrorProgress;
}

interface MistakePattern {
  rank: number;
  mistakeType: string;
  frequency: number;
  section: string;
  personalLesson: string;
  actionPlan: string;
}

interface MistakeCategory {
  conceptualErrors: { count: number; percentage: number; examples: string };
  carelessMistakes: { count: number; percentage: number; examples: string };
  timeManagementErrors: { count: number; percentage: number; examples: string };
  strategyFailures: { count: number; percentage: number; examples: string };
  omrErrors: { count: number; percentage: number; examples: string };
}

interface ErrorProgress {
  mistakesEliminated: string[];
  recurringMistakes: string[];
  newMistakeTypes: string[];
  improvementRate: number;
}

// Pattern Recognition Insights interfaces (Page 31)
interface PatternRecognitionInsights {
  questionTypePatterns: QuestionTypePattern[];
  timeRelatedPatterns: TimeRelatedPattern[];
  psychologicalPatterns: PsychologicalPattern[];
  metaPattern: MetaPattern;
}

interface QuestionTypePattern {
  questionType: string;
  pattern: string;
  timeRange: string;
  recommendation: string;
  patternType: 'time' | 'content' | 'decision';
}

interface TimeRelatedPattern {
  pattern: string;
  description: string;
  timeFrame: string;
  impact: string;
  issueType: 'stamina' | 'pacing' | 'transition';
}

interface PsychologicalPattern {
  pattern: string;
  confidenceMetrics: {
    highConfidenceSection: string;
    highConfidenceAccuracy: number;
    lowConfidenceSection: string;
    lowConfidenceAccuracy: number;
  };
  stressResponse: string;
  mindsetImpact: string;
}

interface MetaPattern {
  overallInsight: string;
  correlationStrength: 'strong' | 'moderate' | 'weak';
  keyFactors: string[];
}

// Weakness Transformation Journal interfaces (Pages 31-32)
interface WeaknessTransformationJournal {
  weaknesses: WeaknessEntry[];
  transformationPhilosophy: string;
  strengthMaintenance: StrengthMaintenance;
}

interface WeaknessEntry {
  weaknessId: number;
  weaknessName: string;
  startingPoint: WeaknessStartingPoint;
  currentStatus: WeaknessCurrentStatus;
  improvementMilestones: ImprovementMilestone[];
  evidenceOfProgress: string;
  transformationStrategy: string;
  weeklyProgress: WeeklyProgress[];
}

interface WeaknessStartingPoint {
  accuracyPercentage: number;
  timePerQuestion: number;
  description: string;
  issueType: string;
  accuracy?: number;
  averageTime?: number;
  attemptsOutOfTotal?: string;
  severityScore?: number;
}

interface WeaknessCurrentStatus {
  accuracyPercentage: number;
  timePerQuestion?: number;
  description: string;
  improvement: string;
  improvementLevel?: string;
  currentAccuracy?: number;
  currentAverageTime?: number;
  currentAttemptsOutOfTotal?: string;
  confidenceLevel?: number;
}

interface ImprovementMilestone {
  week: number;
  target: string;
  status: 'completed' | 'in-progress' | 'pending';
  description: string;
  focusArea: string;
  achieved?: boolean;
  milestoneDescription?: string;
  dateAchieved?: string;
}

interface WeeklyProgress {
  week: number;
  activities: string[];
  achievements: string[];
  challenges: string[];
  nextWeekFocus: string;
  weekNumber?: number;
  practiceHours?: number;
  questionsAttempted?: number;
  accuracyImprovement?: number;
  speedImprovement?: number;
}

interface StrengthMaintenance {
  currentStrengths: CurrentStrength[];
  maintenanceStrategies: MaintenanceStrategy[];
  strengths?: (string | any)[];
  maintenancePhilosophy?: string;
}

interface CurrentStrength {
  subject: string;
  accuracyPercentage: number;
  description: string;
  strengthType: string;
}

interface MaintenanceStrategy {
  strength: string;
  strategy: string;
  frequency: string;
  purpose: string;
}

// Action Plan & Strategy Adjustments interfaces (Pages 33-35)
interface ActionPlan {
  immediate24HourPlan: Immediate24HourPlan;
  weeklySchedule: WeeklySchedule;
  strategyAdjustments: StrategyAdjustments;
}

interface Immediate24HourPlan {
  criticalActions: CriticalAction[];
  focusAreas: FocusArea[];
  timeAllocation: TimeAllocation[];
  psychologicalPreparation: PsychologicalPreparation;
}

interface CriticalAction {
  actionId: number;
  priority: 'high' | 'medium' | 'low';
  action: string;
  timeRequired: string;
  expectedOutcome: string;
  status: 'pending' | 'in_progress' | 'completed';
}

interface FocusArea {
  area: string;
  currentLevel: number;
  targetLevel: number;
  specificActions: string[];
  timeToSpend: string;
}

interface TimeAllocation {
  activity: string;
  timeSlot: string;
  duration: string;
  purpose: string;
}

interface PsychologicalPreparation {
  confidenceBuilders: string[];
  stressManagement: string[];
  motivationalReminders: string[];
}

interface WeeklySchedule {
  weeklyGoals: WeeklyGoal[];
  dailySchedule: DailySchedule[];
  practiceTests: PracticeTest[];
  progressCheckpoints: ProgressCheckpoint[];
}

interface WeeklyGoal {
  goalId: number;
  goal: string;
  targetValue: string;
  measurementMethod: string;
  deadline: string;
}

interface DailySchedule {
  day: string;
  sessions: StudySession[];
  totalStudyHours: number;
  focusSection: string;
}

interface StudySession {
  time: string;
  activity: string;
  duration: string;
  resources: string[];
}

interface PracticeTest {
  testType: string;
  scheduledDate: string;
  sections: string[];
  expectedScore: string;
  focusAreas: string[];
}

interface ProgressCheckpoint {
  checkpointDate: string;
  metricsToCheck: string[];
  expectedProgress: string;
  reviewMethod: string;
}

interface StrategyAdjustments {
  sectionWiseAdjustments: SectionWiseAdjustment[];
  timeManagementAdjustments: TimeManagementAdjustment[];
  psychologicalAdjustments: PsychologicalAdjustment[];
  omrStrategyAdjustments: OMRStrategyAdjustment[];
}

interface SectionWiseAdjustment {
  section: string;
  currentApproach: string;
  proposedAdjustment: string;
  reasonForChange: string;
  expectedImprovement: string;
}

interface TimeManagementAdjustment {
  area: string;
  currentTimeAllocation: string;
  proposedTimeAllocation: string;
  justification: string;
}

interface PsychologicalAdjustment {
  aspect: string;
  currentState: string;
  targetState: string;
  interventionStrategy: string;
}

interface OMRStrategyAdjustment {
  currentStrategy: string;
  proposedStrategy: string;
  sections: string[];
  expectedBenefit: string;
}

// Next Mock Test Planning interfaces (Page 36)
interface NextMockTestPlan {
  scheduledDate: string;
  targetScore: number;
  currentScore: number;
  strategyTheme: string;
  preTestPreparation: PreTestPreparation;
  specialFocus: SpecialFocus[];
  plannedSequence: PlannedSequence;
  omrStrategy: NextOMRStrategy;
  performanceTargets: PerformanceTarget[];
}

interface PreTestPreparation {
  mentalPreparation: string[];
  dayBeforeActivities: string[];
  testDayProtocol: string[];
}

interface SpecialFocus {
  area: string;
  currentLevel: number;
  targetImprovement: string;
  tacticalExecution: string[];
}

interface PlannedSequence {
  sections: PlannedSection[];
  reasoning: string;
  timeAllocation: { [key: string]: number };
}

interface PlannedSection {
  order: number;
  section: string;
  allocatedTime: number;
  strategy: string;
}

interface NextOMRStrategy {
  selectedMethod: string;
  improvements: string[];
  checkpoints: string[];
}

interface PerformanceTarget {
  metric: string;
  currentValue: string | number;
  targetValue: string | number;
  improvement: string;
}

// Accountability & Support System interfaces (Page 37)
interface AccountabilitySystem {
  studyPartner: StudyPartner;
  mentorCoach: MentorCoach;
  checkInSchedule: CheckInSchedule;
  studyGroup: StudyGroup;
  progressSharing: ProgressSharing;
  supportNetwork: SupportNetwork;
}

interface StudyPartner {
  name: string;
  role: string;
  responsibilities: string[];
  contactInfo: string;
  meetingSchedule: string;
}

interface MentorCoach {
  name: string;
  expertise: string;
  responsibilities: string[];
  sessionFrequency: string;
  contactMethod: string;
}

interface CheckInSchedule {
  frequency: string;
  days: string[];
  activities: string[];
  purpose: string;
}

interface StudyGroup {
  groupName: string;
  members: number;
  platform: string;
  activities: string[];
  benefits: string[];
}

interface ProgressSharing {
  platform: string;
  participants: string[];
  sharingFrequency: string;
  metricsShared: string[];
}

interface SupportNetwork {
  layers: string[];
  description: string;
  activationTriggers: string[];
}

// Commitment Statement interfaces (Page 38)
interface CommitmentStatement {
  studentName: string;
  commitmentDate: string;
  witness: string;
  commitments: Commitment[];
  monthlyReview: MonthlyReview;
}

interface Commitment {
  category: string;
  commitment: string;
  specificTarget: string;
  tacticalExecution: string;
}

interface MonthlyReview {
  frequency: string;
  reviewWith: string;
  updateProcess: string;
}

// Emergency Backup Plan interfaces (Pages 38-39)
interface EmergencyBackupPlan {
  performanceDecline: PerformanceDeclineResponse;
  stressBurnoutWarning: StressBurnoutResponse;
  majorLifeDisruption: MajorLifeDisruptionResponse;
  nextTestPlanning: NextTestPlanningBackup;
}

interface PerformanceDeclineResponse {
  trigger: string;
  immediateResponse: EmergencyAction;
  supportActivation: EmergencyAction;
  recoveryStrategy: EmergencyAction;
  timeline: EmergencyAction;
}

interface StressBurnoutResponse {
  earlyWarningSign: string[];
  recoveryProtocol: RecoveryStep[];
  supportSystemActivation: string;
}

interface RecoveryStep {
  step: string;
  duration: string;
  purpose: string;
}

interface MajorLifeDisruptionResponse {
  contingencyStudyPlan: string;
  supportNetwork: string;
  academicSafetyNet: string;
}

interface NextTestPlanningBackup {
  scheduledDate: string;
  testSeries: string;
  targetScore: string;
  targetPercentile: string;
  strategyTheme: string;
  strategicFocusAreas: StrategicFocusArea[];
  preTestProtocol: PreTestProtocolStep[];
}

interface StrategicFocusArea {
  priority: string;
  area: string;
  approach: string;
}

interface PreTestProtocolStep {
  timing: string;
  activity: string;
  purpose: string;
}

interface EmergencyAction {
  action: string;
  timeframe: string;
  purpose: string;
}

// Motivation & Mindset Framework interfaces (Page 40)
interface MotivationMindsetFramework {
  dailyAffirmations: DailyAffirmation[];
  weeklyMotivationRituals: WeeklyMotivationRitual[];
  monthlyInspirationSources: MonthlyInspirationSource[];
}

interface DailyAffirmation {
  affirmation: string;
  purpose: string;
}

interface WeeklyMotivationRitual {
  day: string;
  activity: string;
  purpose: string;
}

interface MonthlyInspirationSource {
  source: string;
  purpose: string;
}

// Final Motivational Reflection interfaces (Pages 41-42)
interface FinalMotivationalReflection {
  progressJourney: ProgressJourney;
  journeyAhead: JourneyAhead;
  legacyVision: LegacyVision;
  finalCommitment: FinalCommitment;
  continuousTracking: ContinuousTracking;
}

interface ProgressJourney {
  startingScore: number;
  currentScore: number;
  improvement: number;
  timeframe: string;
  keyFactors: string[];
}

interface JourneyAhead {
  totalDaysLeft: number;
  phases: JourneyPhase[];
}

interface JourneyPhase {
  phase: string;
  duration: string;
  focus: string;
  expectedOutcome: string;
}

interface LegacyVision {
  careerVision: string;
  personalImpact: string;
  familyPride: string;
  professionalGoals: string;
}

interface FinalCommitment {
  commitmentText: string;
  keyPromises: string[];
}

interface ContinuousTracking {
  nextAnalysisDate: string;
  progressTracking: string;
  visionCheck: string;
  reminderQuote: string;
}

const CLATMockTestAnalysis: React.FC<CLATMockTestAnalysisProps> = ({ user, onBack }) => {
  const [currentView, setCurrentView] = useState('dashboard');
  const [selectedMock, setSelectedMock] = useState<MockTest | null>(null);
  const [activeTab, setActiveTab] = useState('overview');
  const [planningStep, setPlanningStep] = useState(1); // 1: Basic Info, 2: Section Strategy, 3: OMR, 4: Sequence
  
  // Question Analysis State - Complete Q1-120 data
  const [questionAnalysisData, setQuestionAnalysisData] = useState<QuestionAnalysis[]>([
    // English Language (Q1-24) - Sample data based on pages 8-9
    { questionNumber: 1, section: 'English Language', status: 'correct', timeTaken: 45, difficulty: 'easy', topicType: 'Grammar - Tenses', errorAnalysis: 'Straightforward rule application', omrMethod: 'included' },
    { questionNumber: 2, section: 'English Language', status: 'correct', timeTaken: 120, difficulty: 'medium', topicType: 'RC - Inference', errorAnalysis: 'Good comprehension', omrMethod: 'included' },
    { questionNumber: 3, section: 'English Language', status: 'wrong', timeTaken: 90, difficulty: 'medium', topicType: 'Vocabulary - Synonym', errorAnalysis: 'Confused between options B & C', omrMethod: 'included' },
    { questionNumber: 6, section: 'English Language', status: 'wrong', timeTaken: 30, difficulty: 'medium', topicType: 'Para Jumbles', errorAnalysis: 'Too confusing, smart skip', omrMethod: 'included' },
    { questionNumber: 11, section: 'English Language', status: 'wrong', timeTaken: 200, difficulty: 'medium', topicType: 'Para Jumbles', errorAnalysis: 'Wasted too much time', omrMethod: 'included' },
    { questionNumber: 18, section: 'English Language', status: 'wrong', timeTaken: 160, difficulty: 'tricky', topicType: 'Para Jumbles', errorAnalysis: 'Should have skipped', omrMethod: 'included' },
    
    // Current Affairs/GK (Q25-52) - Sample data based on pages 10-11
    { questionNumber: 25, section: 'Current Affairs/GK', status: 'correct', timeTaken: 25, difficulty: 'easy', topicType: 'Current Affairs - Politics', errorAnalysis: 'Recent news knowledge', omrMethod: 'included' },
    { questionNumber: 26, section: 'Current Affairs/GK', status: 'wrong', timeTaken: 40, difficulty: 'medium', topicType: 'Static GK - Geography', errorAnalysis: 'Confused two states', omrMethod: 'included' },
    { questionNumber: 43, section: 'Current Affairs/GK', status: 'correct', timeTaken: 35, difficulty: 'medium', topicType: 'Geography - Physical', errorAnalysis: 'Basic knowledge', omrMethod: 'included' },
    { questionNumber: 44, section: 'Current Affairs/GK', status: 'wrong', timeTaken: 50, difficulty: 'medium', topicType: 'Science - Biology', errorAnalysis: 'Confused terminology', omrMethod: 'included' },
    
    // Legal Reasoning (Q53-84) - Sample data based on pages 12-13
    { questionNumber: 53, section: 'Legal Reasoning', status: 'correct', timeTaken: 90, difficulty: 'medium', topicType: 'Constitutional Law', errorAnalysis: 'Article 14 application', omrMethod: 'included' },
    { questionNumber: 55, section: 'Legal Reasoning', status: 'wrong', timeTaken: 120, difficulty: 'medium', topicType: 'Tort Law - Negligence', errorAnalysis: 'Misapplied standard', omrMethod: 'included' },
    { questionNumber: 63, section: 'Legal Reasoning', status: 'wrong', timeTaken: 140, difficulty: 'medium', topicType: 'Constitutional Law', errorAnalysis: 'Confused amendment', omrMethod: 'included' },
    { questionNumber: 74, section: 'Legal Reasoning', status: 'wrong', timeTaken: 115, difficulty: 'medium', topicType: 'Constitutional Law', errorAnalysis: 'Directive principles', omrMethod: 'included' },
    
    // Logical Reasoning (Q85-108) - Sample data based on pages 14-15
    { questionNumber: 85, section: 'Logical Reasoning', status: 'correct', timeTaken: 120, difficulty: 'medium', topicType: 'Syllogisms', errorAnalysis: 'Careful diagram worked', omrMethod: 'included' },
    { questionNumber: 86, section: 'Logical Reasoning', status: 'wrong', timeTaken: 180, difficulty: 'medium', topicType: 'Blood Relations', errorAnalysis: 'Got confused in middle', omrMethod: 'included' },
    { questionNumber: 89, section: 'Logical Reasoning', status: 'wrong', timeTaken: 150, difficulty: 'medium', topicType: 'Direction Sense', errorAnalysis: 'Lost track of turns', omrMethod: 'included' },
    { questionNumber: 92, section: 'Logical Reasoning', status: 'wrong', timeTaken: 200, difficulty: 'medium', topicType: 'Puzzles', errorAnalysis: 'Wasted too much time', omrMethod: 'included' },
    
    // Quantitative Techniques (Q109-120) - Sample data based on page 15
    { questionNumber: 109, section: 'Quantitative Techniques', status: 'skipped', timeTaken: 0, difficulty: 'hard', topicType: 'Complex Calculations', errorAnalysis: 'Smart skip - no time', omrMethod: 'included' },
    { questionNumber: 110, section: 'Quantitative Techniques', status: 'correct', timeTaken: 40, difficulty: 'easy', topicType: 'Basic Arithmetic', errorAnalysis: 'Simple calculation', omrMethod: 'included' }
  ]);

  // Performance Analysis State
  const [actualPerformance, setActualPerformance] = useState<ActualPerformance>({
    performanceBreakdown: [
      {
        section: 'English Language',
        attempted: 21,
        correct: 16,
        wrong: 5,
        skipped: 3,
        accuracyPercent: 76,
        timeSpent: 24,
        omrTime: 3
      },
      {
        section: 'Current Affairs/GK',
        attempted: 26,
        correct: 15,
        wrong: 11,
        skipped: 2,
        accuracyPercent: 58,
        timeSpent: 16,
        omrTime: 2
      },
      {
        section: 'Legal Reasoning',
        attempted: 29,
        correct: 21,
        wrong: 8,
        skipped: 3,
        accuracyPercent: 72,
        timeSpent: 36,
        omrTime: 4
      },
      {
        section: 'Logical Reasoning',
        attempted: 18,
        correct: 11,
        wrong: 7,
        skipped: 6,
        accuracyPercent: 61,
        timeSpent: 25,
        omrTime: 3
      },
      {
        section: 'Quantitative Tech',
        attempted: 7,
        correct: 4,
        wrong: 3,
        skipped: 5,
        accuracyPercent: 57,
        timeSpent: 10,
        omrTime: 1
      }
    ],
    finalResults: {
      finalScore: 67,
      rawScore: 58.5,
      percentile: 78,
      rank: 6500,
      timeRemaining: 9,
      scoreCalculation: 'Correct answers minus (Wrong answers × 0.25)'
    },
    actualVsTarget: [
      {
        metric: 'Total Score',
        target: 85,
        actual: 67,
        variance: -18,
        status: 'missed'
      },
      {
        metric: 'Percentile',
        target: 92,
        actual: 78,
        variance: -14,
        status: 'missed'
      },
      {
        metric: 'Total Attempts',
        target: 105,
        actual: 101,
        variance: -4,
        status: 'missed'
      },
      {
        metric: 'Total Time',
        target: '120 min',
        actual: '111 min',
        variance: '+9',
        status: 'exceeded'
      }
    ],
    attemptSequenceAnalysis: {
      plannedSequence: ['Legal Reasoning', 'English Language', 'Current Affairs/GK', 'Quantitative Techniques', 'Logical Reasoning'],
      actualSequence: ['Legal Reasoning', 'English Language', 'Current Affairs/GK', 'Logical Reasoning', 'Quantitative Techniques'],
      sequenceSatisfaction: 'satisfied',
      wouldUseSameAgain: 'yes',
      sequenceImpact: {
        positive: ['Started well with Legal, built confidence early'],
        negative: ['Changed sequence mid-test, attempted Logical 4th instead of 5th'],
        recommendedChanges: ['Stick to original plan, don\'t switch during pressure']
      }
    }
  });
  
  // Framework-based Pre-Test Setup State
  const [mockTestBasicInfo, setMockTestBasicInfo] = useState<MockTestBasicInfo>({
    name: '',
    testSeries: '',
    mode: 'self-timed',
    targetScore: 85,
    targetPercentile: 92,
    targetRank: 2500
  });

  const [preMockPlanning, setPreMockPlanning] = useState<PreMockPlanning>({
    overallStrategy: {
      questionsToAttempt: 105,
      questionsToMarkConfidently: 95,
      maxWrongAnswers: 25,
      riskQuestionsAllowed: 10,
      skipStrategyThreshold: 60,
      riskRewardStrategy: 'moderate'
    },
    sectionStrategy: [
      {
        name: 'English Language',
        totalQuestions: 24,
        targetTime: 22,
        attemptTarget: 22,
        correctTarget: 18,
        maxWrong: 4,
        strategyNotes: 'Focus on RC, skip tough vocab',
        priority: 2
      },
      {
        name: 'Current Affairs/GK',
        totalQuestions: 28,
        targetTime: 15,
        attemptTarget: 25,
        correctTarget: 16,
        maxWrong: 9,
        strategyNotes: 'Quick attempts, don\'t overthink',
        priority: 3
      },
      {
        name: 'Legal Reasoning',
        totalQuestions: 32,
        targetTime: 34,
        attemptTarget: 30,
        correctTarget: 22,
        maxWrong: 8,
        strategyNotes: 'Strength section - maximize here',
        priority: 1
      },
      {
        name: 'Logical Reasoning',
        totalQuestions: 24,
        targetTime: 22,
        attemptTarget: 20,
        correctTarget: 15,
        maxWrong: 5,
        strategyNotes: 'Weakest section - be selective',
        priority: 5
      },
      {
        name: 'Quantitative Tech',
        totalQuestions: 12,
        targetTime: 12,
        attemptTarget: 8,
        correctTarget: 6,
        maxWrong: 2,
        strategyNotes: 'Only attempt if time allows',
        priority: 4
      }
    ],
    omrStrategy: {
      method: 'after-each-section',
      plannedOMRTime: 12,
      timePerQuestionBubbling: 6,
      sectionWiseOMRPlan: {
        'English': 2,
        'GK': 2,
        'Legal': 3,
        'Logical': 3,
        'Quantitative': 2
      },
      riskManagement: {
        doubleCheckingStrategy: 'Check question numbers every 10 questions',
        errorPreventionMethod: 'Circle answers in question paper first',
        timeBuffer: 3
      },
      specialInstructions: {
        questionNumberTracking: 'Mark every 5th question clearly',
        answerSheetOrganization: 'Fold along sections for easy access',
        backupPlan: 'Skip OMR check in weakest section'
      }
    },
    attemptSequence: {
      plannedSequence: [
        {
          section: 'Legal Reasoning',
          time: 34,
          reasoning: 'Start with strongest to build confidence'
        },
        {
          section: 'English Language',
          time: 22,
          reasoning: 'Maintain momentum with consistent section'
        },
        {
          section: 'Current Affairs/GK',
          time: 15,
          reasoning: 'Quick scoring in middle'
        },
        {
          section: 'Quantitative Techniques',
          time: 12,
          reasoning: 'Attempt while energy remains'
        },
        {
          section: 'Logical Reasoning',
          time: 22,
          reasoning: 'Weakest section last to avoid early demoralization'
        }
      ],
      sequenceReasoning: [
        'Build early confidence with strongest section',
        'Maintain flow with steady performer',
        'Quick wins in middle to maintain morale'
      ],
      expectedBenefits: {
        energyManagement: 'High energy for strongest sections',
        confidenceBuilding: 'Early success boosts overall performance',
        timeOptimization: 'Less time pressure on weaker sections'
      }
    }
  });

  // Mock Data for demonstration
  const mockTests: MockTest[] = [
    {
      id: '1',
      testNumber: 3,
      date: '2025-01-28',
      totalQuestions: 120,
      totalScore: 67,
      percentile: 78,
      rank: 6500,
      timeTaken: 111,
      sections: [
        {
          name: 'English',
          questions: 24,
          attempted: 20,
          correct: 16,
          incorrect: 4,
          skipped: 4,
          score: 16,
          maxScore: 24,
          timeSpent: 18,
          accuracy: 80
        },
        {
          name: 'Current Affairs/GK',
          questions: 28,
          attempted: 21,
          correct: 15,
          incorrect: 6,
          skipped: 7,
          score: 15,
          maxScore: 28,
          timeSpent: 22,
          accuracy: 71
        },
        {
          name: 'Legal Reasoning',
          questions: 32,
          attempted: 29,
          correct: 21,
          incorrect: 8,
          skipped: 3,
          score: 21,
          maxScore: 32,
          timeSpent: 30,
          accuracy: 72
        },
        {
          name: 'Logical Reasoning',
          questions: 24,
          attempted: 18,
          correct: 11,
          incorrect: 7,
          skipped: 6,
          score: 11,
          maxScore: 24,
          timeSpent: 26,
          accuracy: 61
        },
        {
          name: 'Quantitative',
          questions: 12,
          attempted: 8,
          correct: 4,
          incorrect: 4,
          skipped: 4,
          score: 4,
          maxScore: 12,
          timeSpent: 15,
          accuracy: 50
        }
      ],
      questions: [], // Would be populated with 120 questions
      strategy: {
        sectionSequence: ['Legal', 'English', 'GK', 'Logical', 'Quantitative'],
        targetScore: 85,
        riskThreshold: 0.5,
        skipStrategy: 'time-based',
        timeAllocation: {
          Legal: 35,
          English: 20,
          GK: 25,
          Logical: 25,
          Quantitative: 15
        }
      },
      basicInfo: {
        name: 'Arjun Sharma',
        testSeries: 'Career Launcher All India Mock',
        mode: 'self-timed',
        targetScore: 85,
        targetPercentile: 92,
        targetRank: 2500
      },
      preMockPlanning: {
        overallStrategy: {
          questionsToAttempt: 105,
          questionsToMarkConfidently: 95,
          maxWrongAnswers: 25,
          riskQuestionsAllowed: 10,
          skipStrategyThreshold: 60,
          riskRewardStrategy: 'moderate'
        },
        sectionStrategy: [
          {
            name: 'English Language',
            totalQuestions: 24,
            targetTime: 22,
            attemptTarget: 22,
            correctTarget: 18,
            maxWrong: 4,
            strategyNotes: 'Focus on RC, skip tough vocab',
            priority: 2
          },
          {
            name: 'Current Affairs/GK',
            totalQuestions: 28,
            targetTime: 15,
            attemptTarget: 25,
            correctTarget: 16,
            maxWrong: 9,
            strategyNotes: 'Quick attempts, don\'t overthink',
            priority: 3
          },
          {
            name: 'Legal Reasoning',
            totalQuestions: 32,
            targetTime: 34,
            attemptTarget: 30,
            correctTarget: 22,
            maxWrong: 8,
            strategyNotes: 'Strength section - maximize here',
            priority: 1
          },
          {
            name: 'Logical Reasoning',
            totalQuestions: 24,
            targetTime: 22,
            attemptTarget: 20,
            correctTarget: 15,
            maxWrong: 5,
            strategyNotes: 'Weakest section - be selective',
            priority: 5
          },
          {
            name: 'Quantitative Tech',
            totalQuestions: 12,
            targetTime: 12,
            attemptTarget: 8,
            correctTarget: 6,
            maxWrong: 2,
            strategyNotes: 'Only attempt if time allows',
            priority: 4
          }
        ],
        omrStrategy: {
          method: 'after-each-section',
          plannedOMRTime: 12,
          timePerQuestionBubbling: 6,
          sectionWiseOMRPlan: {
            'English': 2,
            'GK': 2,
            'Legal': 3,
            'Logical': 3,
            'Quantitative': 2
          },
          riskManagement: {
            doubleCheckingStrategy: 'Check question numbers every 10 questions',
            errorPreventionMethod: 'Circle answers in question paper first',
            timeBuffer: 3
          },
          specialInstructions: {
            questionNumberTracking: 'Mark every 5th question clearly',
            answerSheetOrganization: 'Fold along sections for easy access',
            backupPlan: 'Skip OMR check in weakest section'
          }
        },
        attemptSequence: {
          plannedSequence: [
            {
              section: 'Legal Reasoning',
              time: 34,
              reasoning: 'Start with strongest to build confidence'
            },
            {
              section: 'English Language',
              time: 22,
              reasoning: 'Maintain momentum with consistent section'
            },
            {
              section: 'Current Affairs/GK',
              time: 15,
              reasoning: 'Quick scoring in middle'
            },
            {
              section: 'Quantitative Techniques',
              time: 12,
              reasoning: 'Attempt while energy remains'
            },
            {
              section: 'Logical Reasoning',
              time: 22,
              reasoning: 'Weakest section last to avoid early demoralization'
            }
          ],
          sequenceReasoning: [
            'Build early confidence with strongest section',
            'Maintain flow with steady performer',
            'Quick wins in middle to maintain morale'
          ],
          expectedBenefits: {
            energyManagement: 'High energy for strongest sections',
            confidenceBuilding: 'Early success boosts overall performance',
            timeOptimization: 'Less time pressure on weaker sections'
          }
        }
      }
    }
  ];

  // Time & OMR Analysis sample data (Page 9 from pages 21-25)
  const [timeOMRAnalysis, setTimeOMRAnalysis] = useState<TimeOMRAnalysis>({
    sectionWiseTimeAnalysis: [
      {
        section: 'English Language',
        plannedTime: 22,
        actualTime: 18,
        timeVariance: -4,
        timePerQuestion: 45,
        efficientQuestions: 16,
        timeWastedQuestions: 4,
        rushingIndicators: ['Last 3 questions done in <30 seconds'],
        timeManagementGrade: 'B'
      },
      {
        section: 'Current Affairs/GK',
        plannedTime: 15,
        actualTime: 22,
        timeVariance: 7,
        timePerQuestion: 63,
        efficientQuestions: 15,
        timeWastedQuestions: 6,
        rushingIndicators: [],
        timeManagementGrade: 'C'
      },
      {
        section: 'Legal Reasoning',
        plannedTime: 34,
        actualTime: 30,
        timeVariance: -4,
        timePerQuestion: 103,
        efficientQuestions: 21,
        timeWastedQuestions: 8,
        rushingIndicators: ['Skipped revision time'],
        timeManagementGrade: 'B'
      },
      {
        section: 'Logical Reasoning',
        plannedTime: 22,
        actualTime: 25,
        timeVariance: 3,
        timePerQuestion: 125,
        efficientQuestions: 12,
        timeWastedQuestions: 8,
        rushingIndicators: ['Extended time on puzzles'],
        timeManagementGrade: 'C'
      },
      {
        section: 'Quantitative Techniques',
        plannedTime: 12,
        actualTime: 4,
        timeVariance: -8,
        timePerQuestion: 30,
        efficientQuestions: 6,
        timeWastedQuestions: 2,
        rushingIndicators: ['Rushed through remaining questions'],
        timeManagementGrade: 'D'
      }
    ],
    omrAnalysis: {
      plannedOMRTime: 12,
      actualOMRTime: 8,
      omrEfficiency: 85,
      bubbleSheetAccuracy: 98
    },
    timeManagementInsights: {
      overtimeSeconds: 360,
      undertimeSeconds: 480,
      criticalTimePoints: ['15 min mark - behind schedule', '45 min mark - caught up', '90 min mark - final rush'],
      timeWasteAreas: ['Overthinking GK questions', 'Complex puzzle in LR', 'Hesitation on difficult vocab'],
      effectiveTimeUsage: ['Quick Legal Reasoning flow', 'Efficient RC reading', 'Smart skipping strategy']
    }
  });

  // Strategic Decision Log sample data (Page 10 from pages 21-25)
  const [strategicDecisionLog, setStrategicDecisionLog] = useState<StrategicDecisionLog>({
    riskAnalysis: [
      {
        questionNumber: 3,
        section: 'English Language',
        riskType: 'knowledge-risk',
        decisionTaken: 'attempted',
        outcome: 'wrong',
        riskJustified: false,
        alternativeAction: 'Should have skipped - had doubt between B & C',
        lessonLearned: 'Trust first instinct on vocabulary when unsure'
      },
      {
        questionNumber: 18,
        section: 'English Language',
        riskType: 'time-risk',
        decisionTaken: 'attempted',
        outcome: 'wrong',
        riskJustified: false,
        alternativeAction: 'Skip after 90 seconds - para jumbles taking too long',
        lessonLearned: 'Set hard time limits for complex questions'
      },
      {
        questionNumber: 55,
        section: 'Legal Reasoning',
        riskType: 'elimination-risk',
        decisionTaken: 'guessed',
        outcome: 'wrong',
        riskJustified: true,
        alternativeAction: 'Could have spent more time, but section strategy required speed',
        lessonLearned: 'Sometimes strategic guessing is necessary for overall performance'
      },
      {
        questionNumber: 92,
        section: 'Logical Reasoning',
        riskType: 'time-risk',
        decisionTaken: 'attempted',
        outcome: 'wrong',
        riskJustified: false,
        alternativeAction: 'Should have skipped complex puzzle after 90 seconds',
        lessonLearned: 'Puzzle questions need strict time discipline'
      }
    ],
    decisionAccuracy: {
      totalRiskyDecisions: 12,
      goodRiskDecisions: 5,
      badRiskDecisions: 7,
      riskAccuracyPercent: 42,
      riskImpactOnScore: -6,
      avgTimePerRiskyQuestion: 145
    },
    learningInsights: [
      {
        category: 'time-management',
        observation: 'Spent too much time on uncertain questions',
        impact: 'negative',
        recommendedChange: 'Set 90-second hard limit for doubtful questions',
        confidenceLevel: 'high'
      },
      {
        category: 'risk-assessment',
        observation: 'Good at identifying when to skip',
        impact: 'positive',
        recommendedChange: 'Continue selective skipping strategy',
        confidenceLevel: 'medium'
      },
      {
        category: 'section-strategy',
        observation: 'Legal Reasoning time management was effective',
        impact: 'positive',
        recommendedChange: 'Apply similar approach to other sections',
        confidenceLevel: 'high'
      }
    ],
    futureStrategy: {
      nextMockStrategy: {
        timeAllocation: { 'English Language': 20, 'Current Affairs/GK': 18, 'Legal Reasoning': 32, 'Logical Reasoning': 24, 'Quantitative Techniques': 11 },
        riskThreshold: 'conservative',
        sectionSequence: ['Legal Reasoning', 'English Language', 'Current Affairs/GK', 'Types', 'Logical Reasoning'],
        omrMethod: 'after-each-section'
      },
      practiceAreas: ['Para jumbles strategy', 'Complex puzzle time limits', 'GK elimination techniques'],
      strengthsToMaintain: ['Legal Reasoning flow', 'RC comprehension', 'Strategic skipping'],
      criticalImprovements: ['Time discipline', 'Risk assessment accuracy', 'Quant section engagement']
    }
  });

  // Performance Benchmarking sample data (Page 26)
  const [performanceBenchmarking, setPerformanceBenchmarking] = useState<PerformanceBenchmarking>({
    scoreComparison: {
      targetScore: 85,
      actualScore: 67,
      difference: -18,
      yourPercentile: 78,
      targetPercentile: 92,
      gap: 14
    },
    topPerformanceBenchmarks: {
      top1Score: 105,
      yourGapToTop1: 38,
      top10Score: 85,
      yourGapToTop10: 18,
      benchmarkAnalysis: 'Currently in 3rd quartile. Need consistent 15-20 point improvement to reach target law schools'
    },
    sectionalComparison: [
      { section: 'English', yourScore: '16/24', batchAvg: '17/24', top1Percent: '22/24', yourRank: 'Below Avg', improvementNeeded: '4 points' },
      { section: 'Current Affairs/GK', yourScore: '15/28', batchAvg: '16/28', top1Percent: '24/28', yourRank: 'Below Avg', improvementNeeded: '6 points' },
      { section: 'Legal', yourScore: '21/32', batchAvg: '22/32', top1Percent: '29/32', yourRank: 'Below Avg', improvementNeeded: '5 points' },
      { section: 'Logical', yourScore: '11/24', batchAvg: '12/24', top1Percent: '20/24', yourRank: 'Below Avg', improvementNeeded: '7 points' },
      { section: 'Quantitative', yourScore: '4/12', batchAvg: '5/12', top1Percent: '10/12', yourRank: 'Below Avg', improvementNeeded: '4 points' }
    ],
    progressVelocity: {
      improvementFromLastMock: 8,
      weeklyImprovement: 4,
      monthlyImprovement: 16,
      projectedScore: 83,
      rankMovement: 1500,
      percentileMovement: 6,
      closestCompetitors: 3,
      distanceFromTargetRank: 4000
    }
  });

  // Comprehensive Review sample data (Pages 27-28)
  const [comprehensiveReview, setComprehensiveReview] = useState<ComprehensiveReview>({
    performanceSummary: {
      mockTestNumber: 3,
      finalScore: 67,
      percentile: 78,
      rank: 6500,
      overallGrade: 'B+',
      trend: 'Decent performance with clear improvement trend'
    },
    keyPerformanceIndicators: [
      { metric: 'Total Score', target: 85, achieved: 67, status: 'missed' },
      { metric: 'Accuracy Rate', target: '73%', achieved: '66%', status: 'missed' },
      { metric: 'Time Management', target: 'Excellent', achieved: 'Good', status: 'partial' },
      { metric: 'Section Balance', target: 'Even', achieved: 'Uneven', status: 'missed' },
      { metric: 'Confidence Level', target: 'High', achieved: 'Medium', status: 'partial' }
    ],
    sectionalRating: [
      { section: 'English Language', score: '16/24', target: '18/24', performanceRating: 3, improvementPriority: 'medium' },
      { section: 'Current Affairs/GK', score: '15/28', target: '16/28', performanceRating: 3, improvementPriority: 'high' },
      { section: 'Legal Reasoning', score: '21/32', target: '22/32', performanceRating: 4, improvementPriority: 'low' },
      { section: 'Logical Reasoning', score: '11/24', target: '15/24', performanceRating: 2, improvementPriority: 'high' },
      { section: 'Quantitative Tech', score: '4/12', target: '6/12', performanceRating: 2, improvementPriority: 'high' }
    ],
    criticalSuccessFactors: {
      successFactors: [
        'Started with strongest section (Legal) - built early confidence and momentum',
        'Good time management overall - finished with 9 minutes remaining',
        'Effective skip strategy for unknown topics - didn\'t waste time on impossible questions'
      ],
      failureFactors: [
        'Poor accuracy in risk-taking attempts (36% success rate) - too many wrong guesses',
        'Spending excessive time on complex logical questions (200s+ on single questions)',
        'Weak fundamental concepts in Quantitative section - couldn\'t attempt many questions'
      ],
      strategicEffectiveness: {
        'Pre-test Planning Effectiveness': 8,
        'During-test Strategy Execution': 6,
        'Risk Management Success': 4,
        'Time Allocation Accuracy': 7,
        'Mental Resilience': 7,
        'OMR Strategy Effectiveness': 7
      },
      topLessons: [
        'Stick to planned strategy even under pressure - changing sequence mid-test didn\'t help',
        'Time limits per question are crucial - spending 200s on one question affects entire section',
        'Skip strategy is more important than attempt strategy - smart skips prevented worse performance'
      ],
      topSkills: [
        'Better time awareness during test - could gauge section completion pace',
        'Improved confidence in Legal section - answered complex questions correctly',
        'Enhanced decision-making under pressure - mostly made correct skip/attempt choices'
      ],
      topHabits: [
        'Starting with strongest section to build early momentum',
        'Section-wise OMR bubbling with number checking',
        'Pre-test planning with realistic targets and backup strategies'
      ],
      comparativePosition: {
        improvementFromFirstMock: 22,
        improvementFromLastMock: 8,
        distanceFromPersonalBest: 'This is personal best',
        distanceFromTargetScore: -18,
        currentTrajectory: 'upward'
      }
    },
    learningConsolidation: {
      importantLessons: [
        'Strategy discipline matters more than spontaneous decisions',
        'Time boundaries prevent section-wide damage',
        'Smart skipping is as important as smart attempting'
      ],
      skillsDeveloped: [
        'Temporal intelligence - section pacing awareness',
        'Subject mastery - Legal reasoning confidence',
        'Strategic thinking - skip/attempt decision making'
      ],
      habitsFormed: [
        'Confidence management through section sequencing',
        'Error prevention via systematic OMR process',
        'Preparation quality through realistic planning'
      ]
    }
  });

  // Mistake Bank sample data (Pages 29-30)
  const [mistakeBank, setMistakeBank] = useState<MistakeBank>({
    topMistakePatterns: [
      { rank: 1, mistakeType: 'Time wastage on complex questions', frequency: 8, section: 'Logical', personalLesson: 'Don\'t chase difficult problems', actionPlan: '30-second rule implementation' },
      { rank: 2, mistakeType: 'Vocabulary context confusion', frequency: 5, section: 'English', personalLesson: 'Word meanings vary by context', actionPlan: 'Context-based word practice' },
      { rank: 3, mistakeType: 'Wrong formula application', frequency: 4, section: 'Quantitative', personalLesson: 'Concept clarity lacking', actionPlan: 'Formula derivation study' },
      { rank: 4, mistakeType: 'Static GK knowledge gaps', frequency: 4, section: 'GK', personalLesson: 'Factual knowledge insufficient', actionPlan: 'Systematic GK compilation' },
      { rank: 5, mistakeType: 'Constitutional law details mixed up', frequency: 3, section: 'Legal', personalLesson: 'Article numbers confusion', actionPlan: 'Article-wise organized notes' },
      { rank: 6, mistakeType: 'Para jumble technique missing', frequency: 3, section: 'English', personalLesson: 'No systematic approach', actionPlan: 'Connect-the-dots method' },
      { rank: 7, mistakeType: 'Logical arrangement complexity', frequency: 3, section: 'Logical', personalLesson: 'Multi-variable confusion', actionPlan: 'Step-by-step grid method' },
      { rank: 8, mistakeType: 'Risk-taking without basis', frequency: 3, section: 'All', personalLesson: 'Emotional guess decisions', actionPlan: '50% confidence rule' },
      { rank: 9, mistakeType: 'Current affairs outdated info', frequency: 2, section: 'GK', personalLesson: 'Information not recent', actionPlan: 'Daily current affairs' },
      { rank: 10, mistakeType: 'OMR numbering confusion', frequency: 1, section: 'Process', personalLesson: 'Careless number tracking', actionPlan: '5-question checkpoints' }
    ],
    mistakeCategories: {
      conceptualErrors: { count: 15, percentage: 44, examples: 'Lack of understanding in Quant, complex Legal topics' },
      carelessMistakes: { count: 8, percentage: 24, examples: 'Vocabulary context, OMR errors, rushed GK' },
      timeManagementErrors: { count: 6, percentage: 18, examples: 'Excessive time on logical questions' },
      strategyFailures: { count: 4, percentage: 12, examples: 'Poor risk-taking, sequence change' },
      omrErrors: { count: 1, percentage: 3, examples: 'One numbering mistake' }
    },
    errorEliminationProgress: {
      mistakesEliminated: ['Basic grammar errors', 'Obvious legal principles', 'Simple arithmetic'],
      recurringMistakes: ['Complex logical arrangements', 'Vocabulary context', 'Constitutional details'],
      newMistakeTypes: ['Para jumble confusion', 'Formula application errors'],
      improvementRate: 65
    }
  });

  // Pattern Recognition Insights sample data (Page 31)
  const [patternRecognitionInsights, setPatternRecognitionInsights] = useState<PatternRecognitionInsights>({
    questionTypePatterns: [
      {
        questionType: 'RC Questions',
        pattern: 'Consistently take 120-180 seconds',
        timeRange: '120-180 sec',
        recommendation: 'Need speed reading techniques',
        patternType: 'time'
      },
      {
        questionType: 'Constitutional Law Questions',
        pattern: 'Mixing up similar articles',
        timeRange: '90-120 sec',
        recommendation: 'Need comparative tables',
        patternType: 'content'
      },
      {
        questionType: 'Complex Logical Arrangements',
        pattern: 'Attempted despite low success rate',
        timeRange: '180+ sec',
        recommendation: 'Need skip criteria',
        patternType: 'decision'
      }
    ],
    timeRelatedPatterns: [
      {
        pattern: 'Performance degrades after 90 minutes',
        description: 'Accuracy drops significantly in final sections',
        timeFrame: 'After 90 minutes',
        impact: 'Mental fatigue affects decision-making',
        issueType: 'stamina'
      },
      {
        pattern: 'Last 5 questions in each section either skipped or rushed',
        description: 'Consistent time pressure at section endings',
        timeFrame: 'Final 5 questions per section',
        impact: 'Missing potential easy questions',
        issueType: 'pacing'
      },
      {
        pattern: 'First 2-3 questions in each section take extra time',
        description: 'Mental switching delays at section starts',
        timeFrame: 'First 2-3 questions',
        impact: 'Reduces time available for rest of section',
        issueType: 'transition'
      }
    ],
    psychologicalPatterns: [
      {
        pattern: 'Confidence affects accuracy significantly',
        confidenceMetrics: {
          highConfidenceSection: 'Legal Reasoning',
          highConfidenceAccuracy: 72,
          lowConfidenceSection: 'Logical Reasoning',
          lowConfidenceAccuracy: 61
        },
        stressResponse: 'Mid-test strategy changes correlate with panic moments',
        mindsetImpact: 'Energy distribution follows sequence - first sections get more focus'
      }
    ],
    metaPattern: {
      overallInsight: 'There\'s a clear relationship between confidence, time management, and accuracy across all sections',
      correlationStrength: 'strong',
      keyFactors: ['Section confidence level', 'Time allocation efficiency', 'Mental stamina management']
    }
  });

  // Weakness Transformation Journal sample data (Pages 31-32)
  const [weaknessTransformationJournal, setWeaknessTransformationJournal] = useState<WeaknessTransformationJournal>({
    transformationPhilosophy: 'Focus on turning complete weaknesses into partial strengths rather than trying to master everything',
    weaknesses: [
      {
        weaknessId: 1,
        weaknessName: 'Para Jumbles in English',
        startingPoint: {
          accuracyPercentage: 0,
          timePerQuestion: 150,
          description: 'Complete inability to solve',
          issueType: 'major weakness'
        },
        currentStatus: {
          accuracyPercentage: 0,
          timePerQuestion: 150,
          description: 'Still 0% accuracy but now skipping intelligently',
          improvement: 'Better decision-making'
        },
        improvementMilestones: [
          {
            week: 1,
            target: 'Learn connect-the-dots technique, practice 10 questions daily',
            status: 'completed',
            description: 'Technique acquisition',
            focusArea: 'Foundation building'
          },
          {
            week: 2,
            target: 'Achieve 30% accuracy on practice questions',
            status: 'in-progress',
            description: 'Basic competency',
            focusArea: 'Skill application'
          },
          {
            week: 3,
            target: 'Speed improvement to 90 seconds per question',
            status: 'pending',
            description: 'Time optimization',
            focusArea: 'Efficiency building'
          },
          {
            week: 4,
            target: '50% accuracy in mock test conditions',
            status: 'pending',
            description: 'Test application',
            focusArea: 'Performance validation'
          }
        ],
        evidenceOfProgress: 'Now recognizing impossible vs solvable para jumbles',
        transformationStrategy: 'Daily practice with technique focus, not speed initially',
        weeklyProgress: [
          {
            week: 1,
            activities: ['Learned connect-the-dots method', 'Practiced 70 questions', 'Watched tutorial videos'],
            achievements: ['Can identify sentence connectors', 'Understand basic flow patterns'],
            challenges: ['Still too slow', 'Getting confused with complex passages'],
            nextWeekFocus: 'Apply technique to get first correct answers'
          }
        ]
      },
      {
        weaknessId: 2,
        weaknessName: 'Complex Logical Arrangements',
        startingPoint: {
          accuracyPercentage: 0,
          timePerQuestion: 200,
          description: '0% accuracy on complex, time wasting',
          issueType: 'major weakness'
        },
        currentStatus: {
          accuracyPercentage: 0,
          description: '0% accuracy but improved skip decision (stopped attempting impossible ones)',
          improvement: 'Strategic improvement'
        },
        improvementMilestones: [
          {
            week: 1,
            target: 'Master grid method for 2-variable arrangements',
            status: 'completed',
            description: 'Basic technique',
            focusArea: 'Foundation building'
          },
          {
            week: 2,
            target: 'Solve 3-variable arrangements with 60% accuracy',
            status: 'in-progress',
            description: 'Complexity increase',
            focusArea: 'Skill expansion'
          },
          {
            week: 3,
            target: 'Time limit practice - 120 seconds max per question',
            status: 'pending',
            description: 'Time discipline',
            focusArea: 'Speed control'
          },
          {
            week: 4,
            target: 'Attempt only 50% confidence level arrangements in mocks',
            status: 'pending',
            description: 'Selective strategy',
            focusArea: 'Decision making'
          }
        ],
        evidenceOfProgress: 'Can now differentiate between solvable and impossible arrangements within 30 seconds',
        transformationStrategy: 'Focus on 2-variable arrangements first, build confidence before complexity',
        weeklyProgress: [
          {
            week: 1,
            activities: ['Mastered 2-variable grid method', 'Solved 50 basic arrangements', 'Timed practice sessions'],
            achievements: ['100% accuracy on 2-variable problems', 'Quick assessment skill developed'],
            challenges: ['3-variable still confusing', 'Time pressure affecting accuracy'],
            nextWeekFocus: 'Gradually introduce 3-variable complexity'
          }
        ]
      },
      {
        weaknessId: 3,
        weaknessName: 'Quantitative Fundamentals',
        startingPoint: {
          accuracyPercentage: 20,
          timePerQuestion: 120,
          description: '20% accuracy, avoiding most questions',
          issueType: 'knowledge gap'
        },
        currentStatus: {
          accuracyPercentage: 33,
          timePerQuestion: 90,
          description: '33% accuracy, attempting basic questions only',
          improvement: 'Selective improvement'
        },
        improvementMilestones: [
          {
            week: 1,
            target: 'Master percentage, ratio, and basic arithmetic formulas',
            status: 'completed',
            description: 'Foundation concepts',
            focusArea: 'Conceptual clarity'
          },
          {
            week: 2,
            target: '70% accuracy on basic questions, start intermediate topics',
            status: 'completed',
            description: 'Confidence building',
            focusArea: 'Skill consolidation'
          },
          {
            week: 3,
            target: 'Learn time-work-distance systematic approach',
            status: 'in-progress',
            description: 'Key topic mastery',
            focusArea: 'Strategic expansion'
          },
          {
            week: 4,
            target: 'Attempt 60% of Quant section with 50% accuracy',
            status: 'pending',
            description: 'Coverage expansion',
            focusArea: 'Test performance'
          }
        ],
        evidenceOfProgress: 'Can now solve percentage and ratio questions confidently',
        transformationStrategy: 'One topic at a time mastery, not broad coverage',
        weeklyProgress: [
          {
            week: 1,
            activities: ['Formula derivation practice', 'Basic arithmetic drills', 'Concept mapping'],
            achievements: ['Mastered percentage calculations', 'Improved speed on ratios'],
            challenges: ['Complex word problems still difficult', 'Formula application errors'],
            nextWeekFocus: 'Solidify foundation before moving to complex topics'
          },
          {
            week: 2,
            activities: ['Intermediate problem solving', 'Speed practice', 'Mock section tests'],
            achievements: ['70% accuracy on basic questions', 'Faster calculation methods'],
            challenges: ['Time management on mixed difficulty', 'Strategy selection'],
            nextWeekFocus: 'Time-work-distance systematic approach'
          }
        ]
      }
    ],
    strengthMaintenance: {
      currentStrengths: [
        {
          subject: 'Legal Reasoning fundamentals',
          accuracyPercentage: 70,
          description: 'maintaining 70%+ accuracy',
          strengthType: 'Core competency'
        },
        {
          subject: 'Basic English grammar',
          accuracyPercentage: 80,
          description: '80%+ accuracy on standard rules',
          strengthType: 'Reliable scoring'
        },
        {
          subject: 'Legal current affairs',
          accuracyPercentage: 75,
          description: 'good awareness of recent developments',
          strengthType: 'Niche strength'
        }
      ],
      maintenanceStrategies: [
        {
          strength: 'Legal Reasoning',
          strategy: 'Continue daily legal current affairs reading, solve 5 Legal reasoning questions daily',
          frequency: 'Daily',
          purpose: 'Consistent practice'
        },
        {
          strength: 'English Grammar',
          strategy: 'Weekly grammar rule revision, focus on maintaining speed',
          frequency: 'Weekly',
          purpose: 'Efficiency maintenance'
        },
        {
          strength: 'Legal Current Affairs',
          strategy: 'Legal magazine subscription, case law updates',
          frequency: 'Daily',
          purpose: 'Knowledge currency'
        }
      ]
    }
  });

  // Action Plan & Strategy Adjustments Sample Data (Pages 33-35)
  const [actionPlan, setActionPlan] = useState<ActionPlan>({
    immediate24HourPlan: {
      criticalActions: [
        {
          actionId: 1,
          priority: 'high',
          action: 'Revise Para Jumbles elimination techniques',
          timeRequired: '2 hours',
          expectedOutcome: '15% improvement in accuracy',
          status: 'pending'
        },
        {
          actionId: 2,
          priority: 'high',
          action: 'Practice Constitutional Law key articles',
          timeRequired: '1.5 hours',
          expectedOutcome: 'Avoid constitutional confusion',
          status: 'pending'
        },
        {
          actionId: 3,
          priority: 'medium',
          action: 'Time management drill for Quantitative',
          timeRequired: '1 hour',
          expectedOutcome: 'Reduce average time per question',
          status: 'pending'
        }
      ],
      focusAreas: [
        {
          area: 'Para Jumbles',
          currentLevel: 4,
          targetLevel: 7,
          specificActions: [
            'Practice connector word identification',
            'Learn chronological sequencing',
            'Master cause-effect relationships'
          ],
          timeToSpend: '3 hours'
        },
        {
          area: 'Constitutional Law',
          currentLevel: 5,
          targetLevel: 8,
          specificActions: [
            'Memorize key articles 14, 19, 21',
            'Understand fundamental rights hierarchy',
            'Practice case-based applications'
          ],
          timeToSpend: '2.5 hours'
        }
      ],
      timeAllocation: [
        {
          activity: 'Para Jumbles Practice',
          timeSlot: '9:00 AM - 12:00 PM',
          duration: '3 hours',
          purpose: 'Address biggest weakness'
        },
        {
          activity: 'Constitutional Law Review',
          timeSlot: '2:00 PM - 4:30 PM',
          duration: '2.5 hours',
          purpose: 'Strengthen legal reasoning foundation'
        },
        {
          activity: 'Quantitative Speed Practice',
          timeSlot: '5:00 PM - 6:00 PM',
          duration: '1 hour',
          purpose: 'Improve time efficiency'
        }
      ],
      psychologicalPreparation: {
        confidenceBuilders: [
          'Review all correctly solved Legal Reasoning questions',
          'Practice strong areas (Current Affairs) for confidence boost',
          'Remind self of 78% accuracy in attempted questions'
        ],
        stressManagement: [
          'Deep breathing exercises before difficult sections',
          'Progressive muscle relaxation technique',
          'Positive self-talk during challenging questions'
        ],
        motivationalReminders: [
          'Every mistake is a learning opportunity',
          'Focus on progress, not perfection',
          'Strategic skipping saved valuable time'
        ]
      }
    },
    weeklySchedule: {
      weeklyGoals: [
        {
          goalId: 1,
          goal: 'Improve Para Jumbles accuracy to 60%',
          targetValue: '60%',
          measurementMethod: 'Daily practice test tracking',
          deadline: '7 days'
        },
        {
          goalId: 2,
          goal: 'Reduce Quantitative average time to 90 seconds',
          targetValue: '90 seconds',
          measurementMethod: 'Timed practice sessions',
          deadline: '5 days'
        },
        {
          goalId: 3,
          goal: 'Achieve 85% accuracy in Constitutional Law',
          targetValue: '85%',
          measurementMethod: 'Topic-wise tests',
          deadline: '6 days'
        }
      ],
      dailySchedule: [
        {
          day: 'Monday',
          sessions: [
            {
              time: '9:00 AM',
              activity: 'Para Jumbles intensive practice',
              duration: '2 hours',
              resources: ['Practice book', 'Previous year papers']
            },
            {
              time: '2:00 PM',
              activity: 'Constitutional Law revision',
              duration: '1.5 hours',
              resources: ['Bare Act', 'Case studies']
            },
            {
              time: '7:00 PM',
              activity: 'Mock test (English + Legal)',
              duration: '2 hours',
              resources: ['Online platform']
            }
          ],
          totalStudyHours: 5.5,
          focusSection: 'English Language'
        },
        {
          day: 'Tuesday',
          sessions: [
            {
              time: '9:00 AM',
              activity: 'Quantitative speed drills',
              duration: '2 hours',
              resources: ['Formula sheets', 'Calculator']
            },
            {
              time: '2:00 PM',
              activity: 'Current Affairs review',
              duration: '1 hour',
              resources: ['Monthly compilation', 'News analysis']
            },
            {
              time: '5:00 PM',
              activity: 'Sectional test (Quantitative)',
              duration: '1.5 hours',
              resources: ['Online platform']
            }
          ],
          totalStudyHours: 4.5,
          focusSection: 'Quantitative Techniques'
        }
      ],
      practiceTests: [
        {
          testType: 'Full Length Mock',
          scheduledDate: '2024-01-15',
          sections: ['English', 'Current Affairs', 'Legal', 'Logical', 'Quantitative'],
          expectedScore: '105+',
          focusAreas: ['Time management', 'Section transition']
        },
        {
          testType: 'Sectional Test - English',
          scheduledDate: '2024-01-13',
          sections: ['English Language'],
          expectedScore: '18+/25',
          focusAreas: ['Para Jumbles', 'Reading Comprehension']
        }
      ],
      progressCheckpoints: [
        {
          checkpointDate: '2024-01-14',
          metricsToCheck: ['Para Jumbles accuracy', 'Average time per section', 'Confidence level'],
          expectedProgress: '50% improvement in weak areas',
          reviewMethod: 'Performance analytics review'
        }
      ]
    },
    strategyAdjustments: {
      sectionWiseAdjustments: [
        {
          section: 'English Language',
          currentApproach: 'Attempt all questions sequentially',
          proposedAdjustment: 'Skip Para Jumbles initially, return if time permits',
          reasonForChange: 'Para Jumbles consuming too much time with low success rate',
          expectedImprovement: '3-4 additional questions attempted'
        },
        {
          section: 'Legal Reasoning',
          currentApproach: 'Read entire passage for every question',
          proposedAdjustment: 'Skim passage first, read details only for specific questions',
          reasonForChange: 'Improve time efficiency without accuracy loss',
          expectedImprovement: '20% time reduction'
        }
      ],
      timeManagementAdjustments: [
        {
          area: 'English Language',
          currentTimeAllocation: '45 minutes',
          proposedTimeAllocation: '40 minutes',
          justification: 'Redirect 5 minutes to Quantitative section'
        },
        {
          area: 'Quantitative Techniques',
          currentTimeAllocation: '35 minutes',
          proposedTimeAllocation: '40 minutes',
          justification: 'Need more time for calculation-heavy questions'
        }
      ],
      psychologicalAdjustments: [
        {
          aspect: 'Confidence Level',
          currentState: 'Moderate anxiety about Para Jumbles',
          targetState: 'Calm acceptance of strategic skipping',
          interventionStrategy: 'Practice strategic skipping in mock tests'
        },
        {
          aspect: 'Risk-Taking Behavior',
          currentState: 'Too aggressive (36% success rate)',
          targetState: 'Calculated risks (60%+ success rate)',
          interventionStrategy: 'Define clear criteria for attempting doubtful questions'
        }
      ],
      omrStrategyAdjustments: [
        {
          currentStrategy: 'Mark immediately after solving each question',
          proposedStrategy: 'Mark in batches of 5 questions',
          sections: ['English Language', 'Current Affairs'],
          expectedBenefit: 'Reduced context switching, better flow'
        },
        {
          currentStrategy: 'No systematic review of marked answers',
          proposedStrategy: 'Quick review of last 10 answers before moving to next section',
          sections: ['All sections'],
          expectedBenefit: 'Catch marking errors, ensure all questions marked'
        }
      ]
    }
  });

  // Next Mock Test Planning Sample Data (Page 36)
  const [nextMockTestPlan, setNextMockTestPlan] = useState<NextMockTestPlan>({
    scheduledDate: '22-Jan-2025',
    targetScore: 75,
    currentScore: 67,
    strategyTheme: 'Quality over Quantity - Focus on accuracy of attempted questions rather than total attempts',
    preTestPreparation: {
      mentalPreparation: [
        'Light revision day before',
        'Good sleep (8+ hours)',
        'Confidence building activities',
        'Review strong areas for motivation'
      ],
      dayBeforeActivities: [
        'Complete revision of weak concepts',
        'Light practice only',
        'Early dinner and relaxation',
        'Prepare test day materials'
      ],
      testDayProtocol: [
        'Proper breakfast',
        'Reach center 30 minutes early',
        'Positive mindset activation',
        'Brief meditation before entering'
      ]
    },
    specialFocus: [
      {
        area: 'Time Management',
        currentLevel: 6,
        targetImprovement: 'Complete with 10+ minutes remaining (Maintain current efficiency)',
        tacticalExecution: [
          'Implement 30-second decision rule',
          'Stick to sequence plan religiously',
          'Improve skip criteria application'
        ]
      },
      {
        area: 'Para Jumbles',
        currentLevel: 3,
        targetImprovement: 'Achieve 50% accuracy from current 25%',
        tacticalExecution: [
          'Practice connector word identification',
          'Master chronological sequencing',
          'Apply strategic skipping when stuck'
        ]
      }
    ],
    plannedSequence: {
      sections: [
        { order: 1, section: 'Legal Reasoning', allocatedTime: 34, strategy: 'Start with strength, build confidence' },
        { order: 2, section: 'English Language', allocatedTime: 22, strategy: 'Skip Para Jumbles initially, return if time permits' },
        { order: 3, section: 'Current Affairs/GK', allocatedTime: 13, strategy: 'Quick wins for momentum' },
        { order: 4, section: 'Quantitative Techniques', allocatedTime: 15, strategy: 'Adjusted time allocation for better coverage' },
        { order: 5, section: 'Logical Reasoning', allocatedTime: 25, strategy: 'End with systematic approach' }
      ],
      reasoning: 'Adjusted time allocation based on previous performance analysis',
      timeAllocation: {
        'Legal Reasoning': 34,
        'English Language': 22,
        'Current Affairs/GK': 13,
        'Quantitative Techniques': 15,
        'Logical Reasoning': 25
      }
    },
    omrStrategy: {
      selectedMethod: 'Method 2 - Continue section-wise with improved checkpoints',
      improvements: [
        'Mark in batches of 5 questions',
        'Quick review of last 10 answers before moving sections',
        'Double-check difficult questions marked'
      ],
      checkpoints: [
        'After every 25 questions',
        'Before switching sections',
        'Final 5-minute review'
      ]
    },
    performanceTargets: [
      { metric: 'Overall Score', currentValue: 67, targetValue: 75, improvement: '8-point realistic improvement' },
      { metric: 'Time Management', currentValue: 'Complete with 10+ minutes', targetValue: 'Maintain efficiency', improvement: 'Maintain current efficiency' },
      { metric: 'Confidence Level', currentValue: '6/10', targetValue: '8/10', improvement: 'Improve from current 6/10' },
      { metric: 'OMR Efficiency', currentValue: '7/10', targetValue: '9/10', improvement: 'Reduce errors, maintain speed' }
    ]
  });

  // Accountability & Support System Sample Data (Page 37)
  const [accountabilitySystem, setAccountabilitySystem] = useState<AccountabilitySystem>({
    studyPartner: {
      name: 'Priya Sharma',
      role: 'Fellow CLAT aspirant, Lightians Batch 2026',
      responsibilities: [
        'Daily study target verification',
        'Mock test discussion partner',
        'Concept explanation practice',
        'Peer-level support and motivation'
      ],
      contactInfo: 'WhatsApp: +91-9876543210',
      meetingSchedule: 'Daily evening calls + Weekend mock analysis sessions'
    },
    mentorCoach: {
      name: 'Harshit Kumar',
      expertise: 'Legalight Faculty - Legal Reasoning & Strategy',
      responsibilities: [
        'Strategic guidance and planning',
        'Difficult concept clarification',
        'Mock analysis validation',
        'Performance improvement strategies'
      ],
      sessionFrequency: 'Bi-weekly strategy sessions',
      contactMethod: 'Scheduled video calls + WhatsApp doubt resolution'
    },
    checkInSchedule: {
      frequency: 'Twice weekly',
      days: ['Sunday evening', 'Wednesday mid-week'],
      activities: [
        'Comprehensive progress review',
        'Strategy adjustment discussions',
        'Regular monitoring and course correction'
      ],
      purpose: 'Ensure consistent progress and immediate course correction when needed'
    },
    studyGroup: {
      groupName: 'Lightians Batch of 2026 WhatsApp Group',
      members: 15,
      platform: 'WhatsApp + Weekly video calls',
      activities: [
        'Daily target updates and sharing',
        'Motivation during low phases',
        'Resource sharing and collaboration',
        'Competitive environment maintenance'
      ],
      benefits: [
        'Peer accountability',
        'Motivation boost',
        'Resource sharing',
        'Healthy competition'
      ]
    },
    progressSharing: {
      platform: 'Shared Google Sheet with top 5 study group members',
      participants: ['Priya Sharma', 'Arjun Mehta', 'Kavya Patel', 'Rohit Singh', 'Ananya Gupta'],
      sharingFrequency: 'Weekly score tracking',
      metricsShared: [
        'Mock test scores',
        'Section-wise performance',
        'Study hours completed',
        'Weak area improvement progress'
      ]
    },
    supportNetwork: {
      layers: [
        'Self-accountability (Personal responsibility)',
        'Peer support (Study partner + Group)',
        'Expert mentorship (Coach guidance)',
        'Family support (External motivation)'
      ],
      description: 'Multi-layered accountability ensures consistent progress monitoring and immediate course correction when needed',
      activationTriggers: [
        'Performance decline detection',
        'Motivation drop indicators',
        'Study schedule disruption',
        'Stress level increase'
      ]
    }
  });

  // Commitment Statement Sample Data (Page 38)
  const [commitmentStatement, setCommitmentStatement] = useState<CommitmentStatement>({
    studentName: 'Arjun Sharma',
    commitmentDate: '15-Jan-2025',
    witness: 'Priya Sharma (Study Partner)',
    commitments: [
      {
        category: 'Time Discipline',
        commitment: 'Following the 30-second decision rule religiously',
        specificTarget: 'No more time wasting on impossible questions, maximum 120 seconds on any single question',
        tacticalExecution: 'Use stopwatch during practice, implement immediate skip criteria'
      },
      {
        category: 'Skill Development',
        commitment: 'Practicing logical arrangements daily for 1 hour with grid method',
        specificTarget: 'Achieve 70%+ accuracy in medium-level questions',
        tacticalExecution: 'Daily 1-hour focused practice with error analysis and pattern recognition'
      },
      {
        category: 'Strategic Balance',
        commitment: 'Maintaining legal reasoning edge (current strength) while systematically improving weak areas',
        specificTarget: 'Legal Reasoning 85%+ accuracy, Para Jumbles 50%+ accuracy',
        tacticalExecution: 'Daily practice - 30 mins Legal Reasoning maintenance, 1 hour weak area improvement'
      },
      {
        category: 'Consistency',
        commitment: 'Studying minimum 8 hours daily with focused practice',
        specificTarget: 'Attend all Legalight mock tests, maintain detailed analysis records',
        tacticalExecution: 'Fixed study schedule, detailed performance tracking, weekly mentor reviews'
      },
      {
        category: 'Adaptability',
        commitment: 'Weekly strategy reviews with Harshit Kumar sir',
        specificTarget: 'Implement feedback promptly, adjust study plan based on performance data',
        tacticalExecution: 'Data-driven approach, immediate strategy implementation, growth mindset maintenance'
      }
    ],
    monthlyReview: {
      frequency: 'Every month',
      reviewWith: 'Mentor and update progress honestly',
      updateProcess: 'Analyze commitment adherence, update targets based on progress, recommit to adjusted goals'
    }
  });

  // Emergency Backup Plan Sample Data (Pages 38-39)
  const [emergencyBackupPlan, setEmergencyBackupPlan] = useState<EmergencyBackupPlan>({
    performanceDecline: {
      trigger: 'Score drops below 65 in next mock test',
      immediateResponse: {
        action: 'Emergency meeting with Harshit Kumar sir to analyze if it\'s strategy issue, knowledge gap, or external factors',
        timeframe: 'Within 24 hours',
        purpose: 'Quick diagnosis and immediate intervention'
      },
      supportActivation: {
        action: 'Discuss with Lightians study group for peer perspective, increase check-ins to daily for one week',
        timeframe: 'Immediate',
        purpose: 'Community support and intensive monitoring'
      },
      recoveryStrategy: {
        action: 'Return to foundation building, focus on maintaining strengths while identifying 2-3 critical improvement areas only',
        timeframe: 'One week focused recovery',
        purpose: 'Systematic improvement without overwhelming pressure'
      },
      timeline: {
        action: 'Give recovery plan 2 weeks before major strategy changes',
        timeframe: '2 weeks patience period',
        purpose: 'Allow sufficient time for improvement to manifest'
      }
    },
    stressBurnoutWarning: {
      earlyWarningSign: [
        'Declining performance despite adequate study hours',
        'Loss of motivation and enthusiasm',
        'Physical symptoms (headaches, sleep issues)',
        'Irritability with family and study partners',
        'Avoiding mock tests or analysis sessions'
      ],
      recoveryProtocol: [
        {
          step: 'Take 2-day complete break from CLAT studies',
          duration: '48 hours',
          purpose: 'Mental reset and stress relief'
        },
        {
          step: 'Light physical activity (walking, basic exercise)',
          duration: 'Daily 30 minutes',
          purpose: 'Physical wellness and endorphin boost'
        },
        {
          step: 'Motivation realignment session with family support',
          duration: '2-3 hours discussion',
          purpose: 'Emotional grounding and purpose reconnection'
        },
        {
          step: 'Return with reduced intensity for one week',
          duration: '1 week gradual re-engagement',
          purpose: 'Gradual return to full capacity'
        }
      ],
      supportSystemActivation: 'Immediate discussion with parents, consultation with Harshit Kumar sir for study plan adjustment, professional help if symptoms persist'
    },
    majorLifeDisruption: {
      contingencyStudyPlan: 'Minimum 4 hours daily study during disruptions, focus only on daily practice and mock tests',
      supportNetwork: 'Inform all accountability partners immediately, seek extended family support for stability',
      academicSafetyNet: 'Backup plan for additional coaching if needed, access to recorded lectures during absence'
    },
    nextTestPlanning: {
      scheduledDate: '22-Jan-2025',
      testSeries: 'Legalight Mock Test #4',
      targetScore: '75/120',
      targetPercentile: '82',
      strategyTheme: 'Precision over Speed - Focus on accuracy of attempted questions, implement refined skip criteria',
      strategicFocusAreas: [
        {
          priority: 'Primary',
          area: 'Time management with 30-second rule implementation',
          approach: 'Decision-making speed improvement'
        },
        {
          priority: 'Secondary',
          area: 'Logical reasoning grid method application in test conditions',
          approach: 'Skill application under pressure'
        },
        {
          priority: 'Maintenance',
          area: 'Legal reasoning accuracy above 75%',
          approach: 'Strength preservation while improving other areas'
        }
      ],
      preTestProtocol: [
        {
          timing: 'Day -2',
          activity: 'Complete revision of weak concepts, light practice only',
          purpose: 'Knowledge consolidation without overexertion'
        },
        {
          timing: 'Day -1',
          activity: 'No new topics, confidence building activities, early sleep',
          purpose: 'Mental preparation and physical readiness'
        },
        {
          timing: 'Test Day',
          activity: 'Proper breakfast, reach center 30 minutes early, positive mindset activation',
          purpose: 'Optimal test-taking conditions'
        }
      ]
    }
  });

  // Motivation & Mindset Framework Sample Data (Page 40)
  const [motivationMindsetFramework, setMotivationMindsetFramework] = useState<MotivationMindsetFramework>({
    dailyAffirmations: [
      {
        affirmation: "Every question I solve correctly brings me closer to NLSIU",
        purpose: "Goal connection"
      },
      {
        affirmation: "My analytical skills are improving with each practice session",
        purpose: "Growth acknowledgment"
      },
      {
        affirmation: "I am building the foundation for my international trade law career",
        purpose: "Purpose reminder"
      },
      {
        affirmation: "Consistent effort compounds into extraordinary results",
        purpose: "Process faith"
      }
    ],
    weeklyMotivationRituals: [
      {
        day: "Monday",
        activity: "Review long-term vision and career goals",
        purpose: "Purpose alignment"
      },
      {
        day: "Wednesday",
        activity: "Celebrate small wins and progress made",
        purpose: "Achievement recognition"
      },
      {
        day: "Friday",
        activity: "Connect with successful lawyers or senior law students",
        purpose: "Inspiration sourcing"
      },
      {
        day: "Sunday",
        activity: "Reflect on growth and plan upcoming week",
        purpose: "Strategic thinking"
      }
    ],
    monthlyInspirationSources: [
      {
        source: "Read success stories of international trade lawyers",
        purpose: "Career role models"
      },
      {
        source: "Watch interviews of top law firm partners",
        purpose: "Professional aspiration"
      },
      {
        source: "Connect with NLSIU alumni working in target firms",
        purpose: "Network building"
      },
      {
        source: "Visit top law firms' websites to understand work culture",
        purpose: "Environment visualization"
      }
    ]
  });

  // Final Motivational Reflection Sample Data (Pages 41-42)
  const [finalMotivationalReflection, setFinalMotivationalReflection] = useState<FinalMotivationalReflection>({
    progressJourney: {
      startingScore: 45,
      currentScore: 67,
      improvement: 22,
      timeframe: "Few weeks",
      keyFactors: [
        "Consistent analysis and strategic adjustments",
        "Focused practice on identified weak areas",
        "Systematic approach to mock test analysis",
        "Implementation of time management strategies"
      ]
    },
    journeyAhead: {
      totalDaysLeft: 326,
      phases: [
        {
          phase: "Foundation Strengthening",
          duration: "Next 30 days",
          focus: "Weak area elimination and skill building",
          expectedOutcome: "Solid base in all sections"
        },
        {
          phase: "Stability Phase",
          duration: "Days 31-150",
          focus: "Consistent performance above 80 points",
          expectedOutcome: "Reliable high performance"
        },
        {
          phase: "Excellence Phase",
          duration: "Days 151-270",
          focus: "Peak performance training, targeting 95+ consistently",
          expectedOutcome: "Top percentile performance"
        },
        {
          phase: "Mastery Phase",
          duration: "Final 56 days",
          focus: "Fine-tuning, confidence building, test temperament perfection",
          expectedOutcome: "Exam-ready excellence"
        }
      ]
    },
    legacyVision: {
      careerVision: "Senior Associate at top-tier international law firm, handling multi-billion dollar cross-border transactions, recognized expert in India-specific trade regulations",
      personalImpact: "Help Indian companies navigate complex international trade laws, contribute to India's global business growth",
      familyPride: "First lawyer in family, creating generational wealth and establishing legal expertise legacy that will inspire future generations",
      professionalGoals: "Build precision and attention to detail that will define my legal practice, develop systematic approach for complex problem-solving"
    },
    finalCommitment: {
      commitmentText: "This analysis is not just a document - it's a contract with my future self. Every recommendation will be implemented, every weakness will be addressed, and every strength will be leveraged. The journey to NLSIU and beyond starts with this level of commitment to excellence.",
      keyPromises: [
        "Implement every recommendation systematically",
        "Address every identified weakness with focused practice",
        "Leverage every strength for maximum advantage",
        "Maintain this level of analytical rigor throughout preparation",
        "Honor the commitment to excellence in every practice session"
      ]
    },
    continuousTracking: {
      nextAnalysisDate: "22-Jan-2025 (Post Mock Test #4)",
      progressTracking: "Weekly review with accountability partners",
      visionCheck: "Monthly alignment with long-term career goals",
      reminderQuote: "Excellence is not a destination, it's a way of traveling. This analysis exemplifies that journey."
    }
  });

  // Framework-based Pre-Test Setup Form
  const PreTestSetupForm = () => {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-6">
        <div className="max-w-6xl mx-auto">
          {/* Header */}
          <div className="mb-8">
            <button
              onClick={onBack}
              className="flex items-center text-gray-600 hover:text-gray-900 mb-4"
            >
              <ChevronLeft className="w-5 h-5 mr-1" />
              Back
            </button>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">LEVEL UP: Mock Test Analysis Framework</h1>
            <p className="text-gray-600 text-lg">DECODE → TRACK → REFLECT → ADAPT</p>
            <p className="text-gray-500 mt-1">Smart work begins after the test ends!</p>
          </div>

          {/* Mock Test Basic Information */}
          <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
            <h2 className="text-xl font-semibold mb-4 flex items-center">
              <FileText className="w-5 h-5 mr-2 text-indigo-600" />
              Mock Test Basic Information
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Name *
                </label>
                <input
                  type="text"
                  value={mockTestBasicInfo.name}
                  onChange={(e) => setMockTestBasicInfo({ ...mockTestBasicInfo, name: e.target.value })}
                  placeholder="Always fill your full name for tracking"
                  className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Test Series *
                </label>
                <input
                  type="text"
                  value={mockTestBasicInfo.testSeries}
                  onChange={(e) => setMockTestBasicInfo({ ...mockTestBasicInfo, testSeries: e.target.value })}
                  placeholder="e.g., Career Launcher All India Mock"
                  className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Mode *
                </label>
                <div className="flex space-x-4">
                  {(['self-timed', 'proctored', 'exam-simulation'] as const).map((mode) => (
                    <label key={mode} className="flex items-center">
                      <input
                        type="radio"
                        name="mode"
                        value={mode}
                        checked={mockTestBasicInfo.mode === mode}
                        onChange={(e) => setMockTestBasicInfo({ ...mockTestBasicInfo, mode: e.target.value as any })}
                        className="mr-2"
                      />
                      <span className="text-sm capitalize">{mode.replace('-', ' ')}</span>
                    </label>
                  ))}
                </div>
                <p className="text-xs text-gray-500 mt-1">Be honest about test conditions</p>
              </div>
            </div>
          </div>

          {/* Expected Results */}
          <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
            <h2 className="text-xl font-semibold mb-4 flex items-center">
              <Target className="w-5 h-5 mr-2 text-indigo-600" />
              Expected Results
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Target Score
                </label>
                <div className="flex items-center space-x-2">
                  <input
                    type="range"
                    min="50"
                    max="120"
                    value={mockTestBasicInfo.targetScore}
                    onChange={(e) => setMockTestBasicInfo({ ...mockTestBasicInfo, targetScore: parseInt(e.target.value) })}
                    className="flex-1"
                  />
                  <span className="text-2xl font-bold text-green-600 w-16 text-right">
                    {mockTestBasicInfo.targetScore}
                  </span>
                </div>
                <p className="text-xs text-gray-500 mt-1">Set realistic but challenging targets</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Target Percentile
                </label>
                <div className="flex items-center space-x-2">
                  <input
                    type="range"
                    min="50"
                    max="100"
                    value={mockTestBasicInfo.targetPercentile}
                    onChange={(e) => setMockTestBasicInfo({ ...mockTestBasicInfo, targetPercentile: parseInt(e.target.value) })}
                    className="flex-1"
                  />
                  <span className="text-2xl font-bold text-indigo-600 w-16 text-right">
                    {mockTestBasicInfo.targetPercentile}
                  </span>
                </div>
                <p className="text-xs text-gray-500 mt-1">Based on your current preparation level</p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Target Rank
                </label>
                <input
                  type="number"
                  value={mockTestBasicInfo.targetRank}
                  onChange={(e) => setMockTestBasicInfo({ ...mockTestBasicInfo, targetRank: parseInt(e.target.value) })}
                  className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                  placeholder="2500"
                />
                <p className="text-xs text-gray-500 mt-1">Align with your law school goals</p>
              </div>
            </div>
          </div>

          {/* Pre-Mock Strategic Planning */}
          <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
            <h2 className="text-xl font-semibold mb-4 flex items-center">
              <Brain className="w-5 h-5 mr-2 text-indigo-600" />
              Pre-Mock Strategic Planning
            </h2>
            
            {/* Overall Strategy */}
            <div className="mb-6">
              <h3 className="text-lg font-medium mb-3">Overall Strategy</h3>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Questions to ATTEMPT
                  </label>
                  <input
                    type="number"
                    value={preMockPlanning.overallStrategy.questionsToAttempt}
                    onChange={(e) => setPreMockPlanning({
                      ...preMockPlanning,
                      overallStrategy: {
                        ...preMockPlanning.overallStrategy,
                        questionsToAttempt: parseInt(e.target.value)
                      }
                    })}
                    className="w-full border rounded px-3 py-2 text-center font-semibold"
                    max="120"
                  />
                  <p className="text-xs text-gray-500 mt-1">Leave buffer for difficult questions</p>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Questions to MARK confidently
                  </label>
                  <input
                    type="number"
                    value={preMockPlanning.overallStrategy.questionsToMarkConfidently}
                    onChange={(e) => setPreMockPlanning({
                      ...preMockPlanning,
                      overallStrategy: {
                        ...preMockPlanning.overallStrategy,
                        questionsToMarkConfidently: parseInt(e.target.value)
                      }
                    })}
                    className="w-full border rounded px-3 py-2 text-center font-semibold"
                  />
                  <p className="text-xs text-gray-500 mt-1">Conservative estimate for accuracy</p>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Maximum WRONG answers affordable
                  </label>
                  <input
                    type="number"
                    value={preMockPlanning.overallStrategy.maxWrongAnswers}
                    onChange={(e) => setPreMockPlanning({
                      ...preMockPlanning,
                      overallStrategy: {
                        ...preMockPlanning.overallStrategy,
                        maxWrongAnswers: parseInt(e.target.value)
                      }
                    })}
                    className="w-full border rounded px-3 py-2 text-center font-semibold"
                  />
                  <p className="text-xs text-gray-500 mt-1">Calculate based on negative marking</p>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    RISK questions allowed
                  </label>
                  <input
                    type="number"
                    value={preMockPlanning.overallStrategy.riskQuestionsAllowed}
                    onChange={(e) => setPreMockPlanning({
                      ...preMockPlanning,
                      overallStrategy: {
                        ...preMockPlanning.overallStrategy,
                        riskQuestionsAllowed: parseInt(e.target.value)
                      }
                    })}
                    className="w-full border rounded px-3 py-2 text-center font-semibold"
                  />
                  <p className="text-xs text-gray-500 mt-1">Limit risky attempts</p>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    SKIP strategy threshold
                  </label>
                  <div className="flex items-center space-x-2">
                    <input
                      type="range"
                      min="40"
                      max="80"
                      value={preMockPlanning.overallStrategy.skipStrategyThreshold}
                      onChange={(e) => setPreMockPlanning({
                        ...preMockPlanning,
                        overallStrategy: {
                          ...preMockPlanning.overallStrategy,
                          skipStrategyThreshold: parseInt(e.target.value)
                        }
                      })}
                      className="flex-1"
                    />
                    <span className="font-semibold w-12">{preMockPlanning.overallStrategy.skipStrategyThreshold}%</span>
                  </div>
                  <p className="text-xs text-gray-500 mt-1">Skip if confidence below this level</p>
                </div>
              </div>
            </div>
            
            {/* Risk-Reward Strategy */}
            <div>
              <h3 className="text-lg font-medium mb-3">Risk-Reward Strategy Selection</h3>
              <div className="flex space-x-6">
                {(['conservative', 'moderate', 'aggressive'] as const).map((strategy) => (
                  <label key={strategy} className="flex items-center">
                    <input
                      type="radio"
                      name="riskStrategy"
                      value={strategy}
                      checked={preMockPlanning.overallStrategy.riskRewardStrategy === strategy}
                      onChange={(e) => setPreMockPlanning({
                        ...preMockPlanning,
                        overallStrategy: {
                          ...preMockPlanning.overallStrategy,
                          riskRewardStrategy: e.target.value as any
                        }
                      })}
                      className="mr-2"
                    />
                    <span className="capitalize font-medium">{strategy}</span>
                    <span className="ml-2 text-sm text-gray-600">
                      {strategy === 'conservative' && '(High confidence threshold - 80%+ sure)'}
                      {strategy === 'moderate' && '(Balanced approach - 60%+ sure)'}
                      {strategy === 'aggressive' && '(Maximum attempts - 40%+ sure)'}
                    </span>
                  </label>
                ))}
              </div>
              <div className="mt-2 p-3 bg-yellow-50 rounded-lg">
                <p className="text-sm text-yellow-800">
                  💡 <strong>Planning Tip:</strong> Choose strategy based on your current mock performance trends, not your ideal performance
                </p>
              </div>
            </div>
          </div>

          {/* Section-wise Strategy & Goals - Page 4 */}
          {planningStep >= 2 && (
            <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
              <h2 className="text-xl font-semibold mb-4 flex items-center">
                <BarChart3 className="w-5 h-5 mr-2 text-indigo-600" />
                Section-wise Strategic Breakdown
              </h2>
              
              <div className="overflow-x-auto mb-6">
                <table className="w-full border-collapse">
                  <thead>
                    <tr className="bg-gray-50">
                      <th className="border p-3 text-left font-medium">Section</th>
                      <th className="border p-3 text-center font-medium">Total Q</th>
                      <th className="border p-3 text-center font-medium">Target Time</th>
                      <th className="border p-3 text-center font-medium">Attempt Target</th>
                      <th className="border p-3 text-center font-medium">Correct Target</th>
                      <th className="border p-3 text-center font-medium">Max Wrong</th>
                      <th className="border p-3 text-left font-medium">Strategy Notes</th>
                    </tr>
                  </thead>
                  <tbody>
                    {preMockPlanning.sectionStrategy.map((section, index) => (
                      <tr key={index} className="hover:bg-gray-50">
                        <td className="border p-3 font-medium">{section.name}</td>
                        <td className="border p-3 text-center">{section.totalQuestions}</td>
                        <td className="border p-3 text-center">
                          <input
                            type="number"
                            value={section.targetTime}
                            onChange={(e) => {
                              const updated = [...preMockPlanning.sectionStrategy];
                              updated[index].targetTime = parseInt(e.target.value);
                              setPreMockPlanning({...preMockPlanning, sectionStrategy: updated});
                            }}
                            className="w-16 text-center border rounded px-2 py-1"
                            min="10"
                            max="50"
                          />
                          <span className="text-xs text-gray-500 ml-1">min</span>
                        </td>
                        <td className="border p-3 text-center">
                          <input
                            type="number"
                            value={section.attemptTarget}
                            onChange={(e) => {
                              const updated = [...preMockPlanning.sectionStrategy];
                              updated[index].attemptTarget = parseInt(e.target.value);
                              setPreMockPlanning({...preMockPlanning, sectionStrategy: updated});
                            }}
                            className="w-16 text-center border rounded px-2 py-1"
                            min="0"
                            max={section.totalQuestions}
                          />
                        </td>
                        <td className="border p-3 text-center">
                          <input
                            type="number"
                            value={section.correctTarget}
                            onChange={(e) => {
                              const updated = [...preMockPlanning.sectionStrategy];
                              updated[index].correctTarget = parseInt(e.target.value);
                              setPreMockPlanning({...preMockPlanning, sectionStrategy: updated});
                            }}
                            className="w-16 text-center border rounded px-2 py-1"
                            min="0"
                            max={section.attemptTarget}
                          />
                        </td>
                        <td className="border p-3 text-center">
                          <input
                            type="number"
                            value={section.maxWrong}
                            onChange={(e) => {
                              const updated = [...preMockPlanning.sectionStrategy];
                              updated[index].maxWrong = parseInt(e.target.value);
                              setPreMockPlanning({...preMockPlanning, sectionStrategy: updated});
                            }}
                            className="w-16 text-center border rounded px-2 py-1"
                            min="0"
                          />
                        </td>
                        <td className="border p-3">
                          <input
                            type="text"
                            value={section.strategyNotes}
                            onChange={(e) => {
                              const updated = [...preMockPlanning.sectionStrategy];
                              updated[index].strategyNotes = e.target.value;
                              setPreMockPlanning({...preMockPlanning, sectionStrategy: updated});
                            }}
                            className="w-full border rounded px-2 py-1 text-sm"
                            placeholder="Strategy notes..."
                          />
                        </td>
                      </tr>
                    ))}
                    <tr className="bg-indigo-50 font-semibold">
                      <td className="border p-3">TOTAL</td>
                      <td className="border p-3 text-center">120</td>
                      <td className="border p-3 text-center">
                        {preMockPlanning.sectionStrategy.reduce((sum, s) => sum + s.targetTime, 0)} min
                      </td>
                      <td className="border p-3 text-center">
                        {preMockPlanning.sectionStrategy.reduce((sum, s) => sum + s.attemptTarget, 0)}
                      </td>
                      <td className="border p-3 text-center">
                        {preMockPlanning.sectionStrategy.reduce((sum, s) => sum + s.correctTarget, 0)}
                      </td>
                      <td className="border p-3 text-center">
                        {preMockPlanning.sectionStrategy.reduce((sum, s) => sum + s.maxWrong, 0)}
                      </td>
                      <td className="border p-3"></td>
                    </tr>
                  </tbody>
                </table>
              </div>
              
              <div className="p-3 bg-yellow-50 rounded-lg mb-4">
                <p className="text-sm text-yellow-800">
                  💡 <strong>Strategy Tip:</strong> Set section-wise goals based on your historical performance, not wishful thinking
                </p>
              </div>
              
              {/* Section Priority Ranking */}
              <div>
                <h3 className="text-lg font-semibold mb-3 flex items-center">
                  <Target className="w-5 h-5 mr-2 text-red-600" />
                  Section Priority Ranking
                </h3>
                <div className="space-y-3">
                  {preMockPlanning.sectionStrategy
                    .sort((a, b) => a.priority - b.priority)
                    .map((section, index) => (
                    <div key={section.name} className="flex items-center space-x-4 p-3 bg-gray-50 rounded-lg">
                      <div className="flex items-center space-x-2">
                        <span className="bg-indigo-600 text-white w-8 h-8 rounded-full flex items-center justify-center font-semibold text-sm">
                          {section.priority}
                        </span>
                        <span className="font-medium">{section.name}</span>
                      </div>
                      <div className="flex-1 text-sm text-gray-600">
                        {section.priority === 1 && '(Strongest) - Always start planning with your strongest section'}
                        {section.priority === 2 && '(Consistent performer)'}
                        {section.priority === 3 && '(Quick scoring opportunities)'}
                        {section.priority === 4 && '(Time permitting)'}
                        {section.priority === 5 && '(Weakest) - Known weak area - need focused practice'}
                      </div>
                    </div>
                  ))}
                </div>
                <div className="mt-3 p-3 bg-blue-50 rounded-lg">
                  <p className="text-sm text-blue-800">
                    🎯 <strong>Ranking Logic:</strong> Base priority on accuracy rates, not time spent studying
                  </p>
                </div>
              </div>
            </div>
          )}

          {/* OMR Strategy Planning - Page 4-5 */}
          {planningStep >= 3 && (
            <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
              <h2 className="text-xl font-semibold mb-4 flex items-center">
                <FileText className="w-5 h-5 mr-2 text-orange-600" />
                OMR Strategy Planning
              </h2>
              
              {/* OMR Bubbling Method */}
              <div className="mb-6">
                <h3 className="text-lg font-medium mb-3 flex items-center">
                  📋 OMR Bubbling Strategy
                </h3>
                <div className="space-y-3">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Method Selection:</label>
                    <div className="space-y-2">
                      {[
                        { value: 'after-each-question', label: 'Method 1: After each question completion' },
                        { value: 'after-each-section', label: 'Method 2: After each section completion (Chosen for better time management)' },
                        { value: 'after-entire-paper', label: 'Method 3: After entire paper completion' }
                      ].map(method => (
                        <label key={method.value} className="flex items-center">
                          <input
                            type="radio"
                            name="omrMethod"
                            value={method.value}
                            checked={preMockPlanning.omrStrategy.method === method.value}
                            onChange={(e) => setPreMockPlanning({
                              ...preMockPlanning,
                              omrStrategy: { ...preMockPlanning.omrStrategy, method: e.target.value as any }
                            })}
                            className="mr-2"
                          />
                          <span className="text-sm">{method.label}</span>
                        </label>
                      ))}
                    </div>
                    <div className="mt-2 p-3 bg-green-50 rounded-lg">
                      <p className="text-sm text-green-800">
                        💡 <strong>Method Choice:</strong> Method 2 balances accuracy with time efficiency for most students
                      </p>
                    </div>
                  </div>
                  
                  {/* Strategy Details */}
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Planned OMR Time</label>
                      <div className="flex items-center space-x-2">
                        <input
                          type="number"
                          value={preMockPlanning.omrStrategy.plannedOMRTime}
                          onChange={(e) => setPreMockPlanning({
                            ...preMockPlanning,
                            omrStrategy: { ...preMockPlanning.omrStrategy, plannedOMRTime: parseInt(e.target.value) }
                          })}
                          className="flex-1 border rounded px-3 py-2"
                          min="5"
                          max="20"
                        />
                        <span className="text-sm font-medium">minutes</span>
                      </div>
                      <p className="text-xs text-gray-500 mt-1">2-3 minutes per section</p>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Time per question bubbling</label>
                      <div className="flex items-center space-x-2">
                        <input
                          type="number"
                          value={preMockPlanning.omrStrategy.timePerQuestionBubbling}
                          onChange={(e) => setPreMockPlanning({
                            ...preMockPlanning,
                            omrStrategy: { ...preMockPlanning.omrStrategy, timePerQuestionBubbling: parseInt(e.target.value) }
                          })}
                          className="flex-1 border rounded px-3 py-2"
                          min="3"
                          max="10"
                        />
                        <span className="text-sm font-medium">seconds</span>
                      </div>
                      <p className="text-xs text-gray-500 mt-1">Total OMR time ÷ Total questions</p>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Section-wise OMR plan</label>
                      <div className="space-y-1 text-sm">
                        {Object.entries(preMockPlanning.omrStrategy.sectionWiseOMRPlan).map(([section, time]) => (
                          <div key={section} className="flex justify-between">
                            <span>{section}:</span>
                            <span className="font-medium">{time} min</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* OMR Risk Management */}
              <div className="mb-6">
                <h3 className="text-lg font-medium mb-3">OMR Risk Management</h3>
                <div className="space-y-4">
                  <div className="bg-red-50 rounded-lg p-4">
                    <h4 className="font-medium text-red-900 mb-2">Double-checking strategy:</h4>
                    <p className="text-sm text-red-800">{preMockPlanning.omrStrategy.riskManagement.doubleCheckingStrategy}</p>
                  </div>
                  <div className="bg-yellow-50 rounded-lg p-4">
                    <h4 className="font-medium text-yellow-900 mb-2">Error prevention method:</h4>
                    <p className="text-sm text-yellow-800">{preMockPlanning.omrStrategy.riskManagement.errorPreventionMethod}</p>
                  </div>
                  <div className="bg-blue-50 rounded-lg p-4">
                    <h4 className="font-medium text-blue-900 mb-2">Time buffer for OMR:</h4>
                    <p className="text-sm text-blue-800">{preMockPlanning.omrStrategy.riskManagement.timeBuffer} minutes extra (Safety margin for unexpected delays)</p>
                  </div>
                </div>
              </div>
              
              {/* Special Instructions */}
              <div>
                <h3 className="text-lg font-medium mb-3">Special Instructions</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="bg-purple-50 rounded-lg p-4">
                    <h4 className="font-medium text-purple-900 mb-2">Question number tracking:</h4>
                    <p className="text-sm text-purple-800">{preMockPlanning.omrStrategy.specialInstructions.questionNumberTracking}</p>
                  </div>
                  <div className="bg-green-50 rounded-lg p-4">
                    <h4 className="font-medium text-green-900 mb-2">Answer sheet organization:</h4>
                    <p className="text-sm text-green-800">{preMockPlanning.omrStrategy.specialInstructions.answerSheetOrganization}</p>
                  </div>
                  <div className="bg-orange-50 rounded-lg p-4">
                    <h4 className="font-medium text-orange-900 mb-2">Backup plan if behind schedule:</h4>
                    <p className="text-sm text-orange-800">{preMockPlanning.omrStrategy.specialInstructions.backupPlan}</p>
                  </div>
                </div>
                <div className="mt-4 p-3 bg-yellow-50 rounded-lg">
                  <p className="text-sm text-yellow-800">
                    📝 <strong>OMR Planning:</strong> Having a clear OMR strategy prevents last-minute panic and errors
                  </p>
                </div>
              </div>
            </div>
          )}

          {/* Attempt Sequence Planning - Page 5 */}
          {planningStep >= 4 && (
            <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
              <h2 className="text-xl font-semibold mb-4 flex items-center">
                <Settings className="w-5 h-5 mr-2 text-purple-600" />
                Attempt Sequence Planning
              </h2>
              
              {/* Section Attempt Sequence */}
              <div className="mb-6">
                <h3 className="text-lg font-medium mb-3 flex items-center">
                  🎯 Section Attempt Sequence
                </h3>
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-3">Planned Sequence:</label>
                  <div className="space-y-3">
                    {preMockPlanning.attemptSequence.plannedSequence.map((step, index) => (
                      <div key={index} className="bg-gradient-to-r from-indigo-50 to-purple-50 rounded-lg p-4 border border-indigo-200">
                        <div className="flex items-start space-x-4">
                          <div className="bg-indigo-600 text-white w-8 h-8 rounded-full flex items-center justify-center font-bold text-sm">
                            {index + 1}
                          </div>
                          <div className="flex-1">
                            <div className="flex items-center justify-between mb-2">
                              <h4 className="font-semibold text-indigo-900">{step.section}</h4>
                              <span className="text-sm font-medium text-indigo-700">Time: {step.time} min</span>
                            </div>
                            <p className="text-sm text-indigo-800">{step.reasoning}</p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
                
                {/* Reasoning for This Sequence */}
                <div className="mb-6">
                  <h4 className="font-medium text-gray-900 mb-3">Reasoning for This Sequence:</h4>
                  <div className="space-y-2">
                    {preMockPlanning.attemptSequence.sequenceReasoning.map((reason, index) => (
                      <div key={index} className="flex items-start space-x-2">
                        <span className="text-green-600 font-bold">{index + 1}.</span>
                        <span className="text-sm text-gray-700">{reason}</span>
                      </div>
                    ))}
                  </div>
                  <div className="mt-3 p-3 bg-green-50 rounded-lg">
                    <p className="text-sm text-green-800">
                      🎥 <strong>Sequence Strategy:</strong> Always start with your strongest section to build early confidence and momentum
                    </p>
                  </div>
                </div>
                
                {/* Expected Benefits */}
                <div>
                  <h4 className="font-medium text-gray-900 mb-3">Expected Benefits:</h4>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="bg-blue-50 rounded-lg p-4">
                      <h5 className="font-medium text-blue-900 mb-2">Energy management:</h5>
                      <p className="text-sm text-blue-800">{preMockPlanning.attemptSequence.expectedBenefits.energyManagement}</p>
                    </div>
                    <div className="bg-green-50 rounded-lg p-4">
                      <h5 className="font-medium text-green-900 mb-2">Confidence building:</h5>
                      <p className="text-sm text-green-800">{preMockPlanning.attemptSequence.expectedBenefits.confidenceBuilding}</p>
                    </div>
                    <div className="bg-purple-50 rounded-lg p-4">
                      <h5 className="font-medium text-purple-900 mb-2">Time optimization:</h5>
                      <p className="text-sm text-purple-800">{preMockPlanning.attemptSequence.expectedBenefits.timeOptimization}</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}



          {/* Navigation Buttons */}
          <div className="flex justify-between">
            <button
              onClick={() => setCurrentView('dashboard')}
              className="bg-gray-200 text-gray-700 px-6 py-3 rounded-lg font-semibold hover:bg-gray-300 transition-colors flex items-center space-x-2"
            >
              <ChevronLeft className="w-5 h-5" />
              <span>Back to Dashboard</span>
            </button>
            
            <div className="flex items-center justify-between">
              {planningStep > 1 && (
                <button
                  onClick={() => setPlanningStep(planningStep - 1)}
                  className="bg-gray-200 text-gray-700 px-6 py-3 rounded-lg font-semibold hover:bg-gray-300 transition-colors flex items-center space-x-2"
                >
                  <ChevronLeft className="w-5 h-5" />
                  <span>Previous Step</span>
                </button>
              )}
              
              <div className="flex items-center space-x-3">
                {/* Step Indicator */}
                <div className="flex items-center space-x-2">
                  {[1, 2, 3, 4].map((step) => (
                    <div key={step} className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-semibold ${
                      step <= planningStep ? 'bg-indigo-600 text-white' : 'bg-gray-200 text-gray-600'
                    }`}>
                      {step}
                    </div>
                  ))}
                </div>
                
                <button
                  onClick={() => {
                    if (planningStep < 4) {
                      setPlanningStep(planningStep + 1);
                    } else {
                      setCurrentView('dashboard');
                    }
                  }}
                  className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white px-8 py-3 rounded-lg font-semibold hover:from-indigo-700 hover:to-purple-700 transition-all transform hover:scale-105 flex items-center space-x-2"
                >
                  <span>
                    {planningStep === 1 ? 'Continue to Section Strategy' :
                     planningStep === 2 ? 'Continue to OMR Strategy' :
                     planningStep === 3 ? 'Continue to Sequence Planning' :
                     'Save & Start Test'}
                  </span>
                  <ChevronRight className="w-5 h-5" />
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Main Dashboard
  const MockTestDashboard = () => {
    return (
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-7xl mx-auto">
          {/* Header */}
          <div className="mb-8">
            <button
              onClick={onBack}
              className="flex items-center text-gray-600 hover:text-gray-900 mb-4"
            >
              <ChevronLeft className="w-5 h-5 mr-1" />
              Back
            </button>
            <div className="flex justify-between items-center">
              <div>
                <h1 className="text-3xl font-bold text-gray-900">CLAT Mock Test Analysis</h1>
                <p className="text-gray-600 mt-1">Track your progress and improve performance</p>
              </div>
              <div className="flex space-x-3">
                <button
                  onClick={() => setCurrentView('pretest')}
                  className="bg-indigo-600 text-white px-6 py-2 rounded-lg hover:bg-indigo-700 transition-colors flex items-center space-x-2"
                >
                  <Target className="w-5 h-5" />
                  <span>New Mock Test</span>
                </button>
                <button
                  onClick={() => setCurrentView('performance-analysis')}
                  className="bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 transition-colors flex items-center space-x-2"
                >
                  <BarChart3 className="w-5 h-5" />
                  <span>Performance Analysis</span>
                </button>
              </div>
            </div>
          </div>

          {/* Performance Overview Cards */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div className="bg-white rounded-xl shadow-lg p-6">
              <div className="flex items-center justify-between mb-4">
                <Trophy className="w-8 h-8 text-yellow-500" />
                <span className="text-sm text-gray-500">Latest</span>
              </div>
              <div className="text-2xl font-bold text-gray-900">67/120</div>
              <div className="text-sm text-gray-600 mt-1">Latest Score</div>
              <div className="flex items-center mt-2 text-green-600">
                <TrendingUp className="w-4 h-4 mr-1" />
                <span className="text-sm">+8 from last</span>
              </div>
            </div>

            <div className="bg-white rounded-xl shadow-lg p-6">
              <div className="flex items-center justify-between mb-4">
                <Award className="w-8 h-8 text-purple-500" />
                <span className="text-sm text-gray-500">Percentile</span>
              </div>
              <div className="text-2xl font-bold text-gray-900">78th</div>
              <div className="text-sm text-gray-600 mt-1">Current Percentile</div>
              <div className="flex items-center mt-2 text-green-600">
                <TrendingUp className="w-4 h-4 mr-1" />
                <span className="text-sm">+6 points</span>
              </div>
            </div>

            <div className="bg-white rounded-xl shadow-lg p-6">
              <div className="flex items-center justify-between mb-4">
                <Users className="w-8 h-8 text-blue-500" />
                <span className="text-sm text-gray-500">Rank</span>
              </div>
              <div className="text-2xl font-bold text-gray-900">#6,500</div>
              <div className="text-sm text-gray-600 mt-1">All India Rank</div>
              <div className="flex items-center mt-2 text-green-600">
                <ArrowUpRight className="w-4 h-4 mr-1" />
                <span className="text-sm">↑1,500 ranks</span>
              </div>
            </div>

            <div className="bg-white rounded-xl shadow-lg p-6">
              <div className="flex items-center justify-between mb-4">
                <Target className="w-8 h-8 text-green-500" />
                <span className="text-sm text-gray-500">Target</span>
              </div>
              <div className="text-2xl font-bold text-gray-900">85/120</div>
              <div className="text-sm text-gray-600 mt-1">Target Score</div>
              <div className="flex items-center mt-2 text-orange-600">
                <Activity className="w-4 h-4 mr-1" />
                <span className="text-sm">18 points gap</span>
              </div>
            </div>
          </div>

          {/* Mock Test History */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">Mock Test History</h2>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b">
                    <th className="text-left py-3 px-4">Test #</th>
                    <th className="text-left py-3 px-4">Date</th>
                    <th className="text-center py-3 px-4">Score</th>
                    <th className="text-center py-3 px-4">Percentile</th>
                    <th className="text-center py-3 px-4">Rank</th>
                    <th className="text-center py-3 px-4">Time</th>
                    <th className="text-center py-3 px-4">Action</th>
                  </tr>
                </thead>
                <tbody>
                  {mockTests.map((test) => (
                    <tr key={test.id} className="border-b hover:bg-gray-50">
                      <td className="py-3 px-4 font-medium">Mock {test.testNumber}</td>
                      <td className="py-3 px-4">{test.date}</td>
                      <td className="text-center py-3 px-4">
                        <span className="font-semibold">{test.totalScore}</span>/120
                      </td>
                      <td className="text-center py-3 px-4">
                        <span className="bg-purple-100 text-purple-700 px-2 py-1 rounded-full text-sm">
                          {test.percentile}th
                        </span>
                      </td>
                      <td className="text-center py-3 px-4">#{test.rank}</td>
                      <td className="text-center py-3 px-4">{test.timeTaken} min</td>
                      <td className="text-center py-3 px-4">
                        <button
                          onClick={() => {
                            setSelectedMock(test);
                            setCurrentView('analysis');
                          }}
                          className="text-indigo-600 hover:text-indigo-800 font-medium"
                        >
                          View Analysis
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Detailed Analysis View
  const DetailedAnalysisView = () => {
    if (!selectedMock) return null;

    return (
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-7xl mx-auto">
          {/* Header */}
          <div className="mb-8">
            <button
              onClick={() => setCurrentView('dashboard')}
              className="flex items-center text-gray-600 hover:text-gray-900 mb-4"
            >
              <ChevronLeft className="w-5 h-5 mr-1" />
              Back to Dashboard
            </button>
            <div className="flex justify-between items-center">
              <div>
                <h1 className="text-3xl font-bold text-gray-900">Mock Test #{selectedMock.testNumber} Analysis</h1>
                <p className="text-gray-600 mt-1">{selectedMock.date} • Score: {selectedMock.totalScore}/120</p>
              </div>
              <div className="flex space-x-3">
                <button className="bg-white border border-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center space-x-2">
                  <Download className="w-4 h-4" />
                  <span>Export</span>
                </button>
                <button className="bg-white border border-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center space-x-2">
                  <Share2 className="w-4 h-4" />
                  <span>Share</span>
                </button>
              </div>
            </div>
          </div>

          {/* Analysis Tabs */}
          <div className="bg-white rounded-xl shadow-lg">
            <div className="border-b">
              <div className="flex space-x-8 px-6">
                {['overview', 'sections', 'questions', 'strategy', 'mistakes', 'improvements'].map((tab) => (
                  <button
                    key={tab}
                    onClick={() => setActiveTab(tab)}
                    className={`py-4 border-b-2 font-medium capitalize transition-colors ${
                      activeTab === tab
                        ? 'border-indigo-600 text-indigo-600'
                        : 'border-transparent text-gray-600 hover:text-gray-900'
                    }`}
                  >
                    {tab}
                  </button>
                ))}
              </div>
            </div>

            <div className="p-6">
              {activeTab === 'overview' && <OverviewTab mock={selectedMock} />}
              {activeTab === 'sections' && <SectionsTab mock={selectedMock} />}
              {activeTab === 'questions' && <QuestionsTab mock={selectedMock} />}
              {activeTab === 'strategy' && <StrategyTab mock={selectedMock} />}
              {activeTab === 'mistakes' && <MistakesTab mock={selectedMock} />}
              {activeTab === 'improvements' && <ImprovementsTab mock={selectedMock} />}
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Framework-based Performance Analysis Component
  const ActualPerformanceOverview = () => {
    return (
      <div className="space-y-6">
        {/* Actual Performance Breakdown */}
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h2 className="text-xl font-semibold mb-4 flex items-center">
            <BarChart3 className="w-5 h-5 mr-2 text-indigo-600" />
            Actual Performance Breakdown
          </h2>
          <div className="overflow-x-auto">
            <table className="w-full border-collapse">
              <thead>
                <tr className="bg-gray-50">
                  <th className="border p-3 text-left font-medium">Section</th>
                  <th className="border p-3 text-center font-medium">Attempted</th>
                  <th className="border p-3 text-center font-medium">Correct</th>
                  <th className="border p-3 text-center font-medium">Wrong</th>
                  <th className="border p-3 text-center font-medium">Skipped</th>
                  <th className="border p-3 text-center font-medium">Accuracy %</th>
                  <th className="border p-3 text-center font-medium">Time Spent</th>
                  <th className="border p-3 text-center font-medium">OMR Time</th>
                </tr>
              </thead>
              <tbody>
                {actualPerformance.performanceBreakdown.map((section, index) => (
                  <tr key={index} className="hover:bg-gray-50">
                    <td className="border p-3 font-medium">{section.section}</td>
                    <td className="border p-3 text-center">{section.attempted}</td>
                    <td className="border p-3 text-center text-green-600 font-semibold">{section.correct}</td>
                    <td className="border p-3 text-center text-red-600 font-semibold">{section.wrong}</td>
                    <td className="border p-3 text-center text-yellow-600 font-semibold">{section.skipped}</td>
                    <td className="border p-3 text-center font-semibold">{section.accuracyPercent}%</td>
                    <td className="border p-3 text-center">{section.timeSpent} min</td>
                    <td className="border p-3 text-center">{section.omrTime} min</td>
                  </tr>
                ))}
                <tr className="bg-indigo-50 font-semibold">
                  <td className="border p-3">TOTAL</td>
                  <td className="border p-3 text-center">
                    {actualPerformance.performanceBreakdown.reduce((sum, s) => sum + s.attempted, 0)}
                  </td>
                  <td className="border p-3 text-center text-green-600">
                    {actualPerformance.performanceBreakdown.reduce((sum, s) => sum + s.correct, 0)}
                  </td>
                  <td className="border p-3 text-center text-red-600">
                    {actualPerformance.performanceBreakdown.reduce((sum, s) => sum + s.wrong, 0)}
                  </td>
                  <td className="border p-3 text-center text-yellow-600">
                    {120 - actualPerformance.performanceBreakdown.reduce((sum, s) => sum + s.attempted, 0)}
                  </td>
                  <td className="border p-3 text-center">66%</td>
                  <td className="border p-3 text-center">
                    {actualPerformance.performanceBreakdown.reduce((sum, s) => sum + s.timeSpent, 0)} min
                  </td>
                  <td className="border p-3 text-center">
                    {actualPerformance.performanceBreakdown.reduce((sum, s) => sum + s.omrTime, 0)} min
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
          <div className="mt-4 p-3 bg-yellow-50 rounded-lg">
            <p className="text-sm text-yellow-800">
              📊 <strong>Performance Analysis:</strong> Notice the gap between planned attempts (105) and actual attempts (101) - this is normal
            </p>
          </div>
        </div>

        {/* Final Results */}
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h2 className="text-xl font-semibold mb-4 flex items-center">
            <Award className="w-5 h-5 mr-2 text-purple-600" />
            Final Results
          </h2>
          <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
            <div className="bg-gradient-to-r from-green-50 to-emerald-50 rounded-lg p-4 text-center">
              <div className="text-sm text-gray-600 mb-1">Final Score</div>
              <div className="text-2xl font-bold text-green-600">{actualPerformance.finalResults.finalScore}/120</div>
              <div className="text-xs text-gray-500 mt-1">Raw score: {actualPerformance.finalResults.rawScore}</div>
            </div>
            <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg p-4 text-center">
              <div className="text-sm text-gray-600 mb-1">Percentile</div>
              <div className="text-2xl font-bold text-purple-600">{actualPerformance.finalResults.percentile}</div>
              <div className="text-xs text-gray-500 mt-1">Below target of 92</div>
            </div>
            <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-4 text-center">
              <div className="text-sm text-gray-600 mb-1">Rank</div>
              <div className="text-2xl font-bold text-blue-600">{actualPerformance.finalResults.rank}</div>
              <div className="text-xs text-gray-500 mt-1">Higher than target</div>
            </div>
            <div className="bg-gradient-to-r from-green-50 to-teal-50 rounded-lg p-4 text-center">
              <div className="text-sm text-gray-600 mb-1">Time Remaining</div>
              <div className="text-2xl font-bold text-teal-600">{actualPerformance.finalResults.timeRemaining} min</div>
              <div className="text-xs text-gray-500 mt-1">Good time management</div>
            </div>
            <div className="bg-gradient-to-r from-yellow-50 to-orange-50 rounded-lg p-4">
              <div className="text-sm text-gray-600 mb-1">Score Calculation</div>
              <div className="text-xs text-gray-700 font-medium">{actualPerformance.finalResults.scoreCalculation}</div>
              <div className="text-xs text-gray-500 mt-1">Always verify calculation</div>
            </div>
          </div>
        </div>

        {/* Actual vs Target Comparison */}
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h2 className="text-xl font-semibold mb-4 flex items-center">
            <Target className="w-5 h-5 mr-2 text-red-600" />
            Actual vs Target Comparison
          </h2>
          <div className="overflow-x-auto">
            <table className="w-full border-collapse">
              <thead>
                <tr className="bg-gray-50">
                  <th className="border p-3 text-left font-medium">Metric</th>
                  <th className="border p-3 text-center font-medium">Target</th>
                  <th className="border p-3 text-center font-medium">Actual</th>
                  <th className="border p-3 text-center font-medium">Variance</th>
                  <th className="border p-3 text-center font-medium">Status</th>
                </tr>
              </thead>
              <tbody>
                {actualPerformance.actualVsTarget.map((item, index) => (
                  <tr key={index} className="hover:bg-gray-50">
                    <td className="border p-3 font-medium">{item.metric}</td>
                    <td className="border p-3 text-center">{item.target}</td>
                    <td className="border p-3 text-center font-semibold">{item.actual}</td>
                    <td className="border p-3 text-center font-semibold
                      ${typeof item.variance === 'number' && item.variance < 0 ? 'text-red-600' : 'text-green-600'}">
                      {item.variance}
                    </td>
                    <td className="border p-3 text-center">
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                        item.status === 'achieved' ? 'bg-green-100 text-green-800' :
                        item.status === 'exceeded' ? 'bg-blue-100 text-blue-800' :
                        'bg-red-100 text-red-800'
                      }`}>
                        {item.status === 'achieved' ? '✓' : item.status === 'exceeded' ? '↗' : '✗'}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          <div className="mt-4 p-3 bg-red-50 rounded-lg">
            <p className="text-sm text-red-800">
              📈 <strong>Gap Analysis:</strong> The 18-point gap shows need for both accuracy improvement and strategic changes
            </p>
          </div>
        </div>
      </div>
    );
  };

  // Overview Tab Component (Updated)
  const OverviewTab = ({ mock }: { mock: MockTest }) => {
    return <ActualPerformanceOverview />;
  };

  // Sections Tab Component
  const SectionsTab = ({ mock }: { mock: MockTest }) => {
    return (
      <div className="space-y-6">
        {mock.sections.map((section) => (
          <div key={section.name} className="bg-gray-50 rounded-lg p-6">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold text-gray-900">{section.name}</h3>
              <span className="text-2xl font-bold text-indigo-600">
                {section.score}/{section.maxScore}
              </span>
            </div>
            
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
              <div className="bg-white rounded-lg p-3">
                <div className="text-sm text-gray-600">Attempted</div>
                <div className="text-xl font-semibold">{section.attempted}/{section.questions}</div>
              </div>
              <div className="bg-green-50 rounded-lg p-3">
                <div className="text-sm text-gray-600">Correct</div>
                <div className="text-xl font-semibold text-green-600">{section.correct}</div>
              </div>
              <div className="bg-red-50 rounded-lg p-3">
                <div className="text-sm text-gray-600">Incorrect</div>
                <div className="text-xl font-semibold text-red-600">{section.incorrect}</div>
              </div>
              <div className="bg-yellow-50 rounded-lg p-3">
                <div className="text-sm text-gray-600">Skipped</div>
                <div className="text-xl font-semibold text-yellow-600">{section.skipped}</div>
              </div>
            </div>

            <div className="flex items-center justify-between text-sm">
              <div className="flex items-center space-x-4">
                <span className="text-gray-600">Accuracy: <span className="font-semibold">{section.accuracy}%</span></span>
                <span className="text-gray-600">Time Spent: <span className="font-semibold">{section.timeSpent} min</span></span>
              </div>
              <button className="text-indigo-600 hover:text-indigo-800 font-medium">
                View Questions →
              </button>
            </div>
          </div>
        ))}
      </div>
    );
  };

  // Questions Tab Component (placeholder)
  const QuestionsTab = ({ mock }: { mock: MockTest }) => {
    return (
      <div className="text-center py-12">
        <Brain className="w-16 h-16 text-gray-400 mx-auto mb-4" />
        <h3 className="text-xl font-semibold text-gray-900 mb-2">Question-by-Question Analysis</h3>
        <p className="text-gray-600">Detailed analysis of all 120 questions coming soon...</p>
      </div>
    );
  };

  // Strategy Tab Component
  const StrategyTab = ({ mock }: { mock: MockTest }) => {
    return (
      <div className="space-y-6">
        <div className="bg-blue-50 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Test-Taking Strategy Analysis</h3>
          
          <div className="space-y-4">
            <div>
              <h4 className="font-medium text-gray-900 mb-2">Section Attempt Sequence</h4>
              <div className="flex flex-wrap gap-2">
                {mock.strategy.sectionSequence.map((section, index) => (
                  <div key={section} className="bg-white px-3 py-1 rounded-full text-sm">
                    {index + 1}. {section}
                  </div>
                ))}
              </div>
            </div>

            <div>
              <h4 className="font-medium text-gray-900 mb-2">Risk-Taking Analysis</h4>
              <div className="grid grid-cols-2 gap-4">
                <div className="bg-white rounded-lg p-3">
                  <div className="text-sm text-gray-600">Successful Risks</div>
                  <div className="text-xl font-semibold text-green-600">4/11 (36%)</div>
                </div>
                <div className="bg-white rounded-lg p-3">
                  <div className="text-sm text-gray-600">Risk Strategy</div>
                  <div className="text-xl font-semibold text-orange-600">Too Aggressive</div>
                </div>
              </div>
            </div>

            <div>
              <h4 className="font-medium text-gray-900 mb-2">Time Management</h4>
              <div className="space-y-2">
                {Object.entries(mock.strategy.timeAllocation).map(([section, time]) => (
                  <div key={section} className="flex justify-between">
                    <span className="text-gray-600">{section}</span>
                    <span className="font-semibold">{time} minutes</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Mistakes Tab Component
  const MistakesTab = ({ mock }: { mock: MockTest }) => {
    return (
      <div className="space-y-6">
        <div className="bg-red-50 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Mistake Patterns & Analysis</h3>
          
          <div className="space-y-4">
            <div className="bg-white rounded-lg p-4">
              <h4 className="font-medium text-gray-900 mb-3">Top Mistake Patterns</h4>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-red-100 rounded-full flex items-center justify-center text-sm font-semibold text-red-600">1</div>
                    <div>
                      <div className="font-medium">Time wastage on complex questions</div>
                      <div className="text-sm text-gray-600">8 occurrences in Logical section</div>
                    </div>
                  </div>
                  <span className="text-red-600 font-semibold">High Impact</span>
                </div>
                
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center text-sm font-semibold text-orange-600">2</div>
                    <div>
                      <div className="font-medium">Vocabulary context confusion</div>
                      <div className="text-sm text-gray-600">5 occurrences in English section</div>
                    </div>
                  </div>
                  <span className="text-orange-600 font-semibold">Medium Impact</span>
                </div>
                
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-yellow-100 rounded-full flex items-center justify-center text-sm font-semibold text-yellow-600">3</div>
                    <div>
                      <div className="font-medium">Wrong formula application</div>
                      <div className="text-sm text-gray-600">4 occurrences in Quantitative section</div>
                    </div>
                  </div>
                  <span className="text-yellow-600 font-semibold">Medium Impact</span>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg p-4">
              <h4 className="font-medium text-gray-900 mb-3">Error Distribution</h4>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-gray-900">44%</div>
                  <div className="text-sm text-gray-600">Conceptual Errors</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-gray-900">24%</div>
                  <div className="text-sm text-gray-600">Careless Mistakes</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-gray-900">18%</div>
                  <div className="text-sm text-gray-600">Time Management</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-gray-900">14%</div>
                  <div className="text-sm text-gray-600">Strategy Failures</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Improvements Tab Component
  const ImprovementsTab = ({ mock }: { mock: MockTest }) => {
    return (
      <div className="space-y-6">
        <div className="bg-green-50 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Improvement Recommendations</h3>
          
          <div className="space-y-4">
            <div className="bg-white rounded-lg p-4">
              <div className="flex items-start space-x-3">
                <Lightbulb className="w-6 h-6 text-yellow-500 mt-1" />
                <div className="flex-1">
                  <h4 className="font-medium text-gray-900">Para Jumbles Practice</h4>
                  <p className="text-sm text-gray-600 mt-1">
                    Your accuracy in para jumbles is 0%. Focus on connect-the-dots technique and practice 10 questions daily.
                  </p>
                  <div className="mt-2">
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                      High Priority
                    </span>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg p-4">
              <div className="flex items-start space-x-3">
                <Clock className="w-6 h-6 text-blue-500 mt-1" />
                <div className="flex-1">
                  <h4 className="font-medium text-gray-900">Time Management in Logical</h4>
                  <p className="text-sm text-gray-600 mt-1">
                    Implement 30-second rule for complex questions. Move on if you can't identify approach quickly.
                  </p>
                  <div className="mt-2">
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
                      Medium Priority
                    </span>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg p-4">
              <div className="flex items-start space-x-3">
                <Brain className="w-6 h-6 text-purple-500 mt-1" />
                <div className="flex-1">
                  <h4 className="font-medium text-gray-900">Quantitative Fundamentals</h4>
                  <p className="text-sm text-gray-600 mt-1">
                    Strengthen basic concepts in arithmetic and algebra. Focus on formula derivation rather than memorization.
                  </p>
                  <div className="mt-2">
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
                      Medium Priority
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div className="bg-blue-50 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Performance Velocity</h3>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="bg-white rounded-lg p-3 text-center">
              <div className="text-sm text-gray-600">Current Rate</div>
              <div className="text-xl font-semibold text-green-600">+4 pts/week</div>
            </div>
            <div className="bg-white rounded-lg p-3 text-center">
              <div className="text-sm text-gray-600">Projected Score</div>
              <div className="text-xl font-semibold text-blue-600">83 in 4 weeks</div>
            </div>
            <div className="bg-white rounded-lg p-3 text-center">
              <div className="text-sm text-gray-600">Target Gap</div>
              <div className="text-xl font-semibold text-orange-600">18 points</div>
            </div>
            <div className="bg-white rounded-lg p-3 text-center">
              <div className="text-sm text-gray-600">Time to Target</div>
              <div className="text-xl font-semibold text-purple-600">4.5 weeks</div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Performance Analysis View
  const PerformanceAnalysisView = () => {
    return (
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-7xl mx-auto">
          {/* Header */}
          <div className="mb-8">
            <button
              onClick={() => setCurrentView('dashboard')}
              className="flex items-center text-gray-600 hover:text-gray-900 mb-4"
            >
              <ChevronLeft className="w-5 h-5 mr-1" />
              Back to Dashboard
            </button>
            <div className="flex justify-between items-center">
              <div>
                <h1 className="text-3xl font-bold text-gray-900">PART II: Mock Performance Analysis</h1>
                <p className="text-gray-600 mt-1">Actual Performance Overview • Data-driven insights</p>
              </div>
              <div className="flex space-x-3">
                <button className="bg-white border border-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center space-x-2">
                  <Download className="w-4 h-4" />
                  <span>Export Analysis</span>
                </button>
              </div>
            </div>
          </div>

          {/* Performance Analysis Content */}
          <ActualPerformanceOverview />
          
          {/* Quick Navigation */}
          <div className="mt-8 bg-white rounded-xl shadow-lg p-6">
            <h3 className="text-lg font-semibold mb-4">Next Steps</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
              <button 
                onClick={() => setCurrentView('question-analysis')}
                className="bg-blue-50 hover:bg-blue-100 border border-blue-200 rounded-lg p-4 text-left transition-colors"
              >
                <h4 className="font-medium text-blue-900 mb-2">Detailed Question Analysis</h4>
                <p className="text-sm text-blue-700">Analyze all 120 questions individually</p>
              </button>
              <button 
                onClick={() => setCurrentView('sequence-analysis')}
                className="bg-green-50 hover:bg-green-100 border border-green-200 rounded-lg p-4 text-left transition-colors"
              >
                <h4 className="font-medium text-green-900 mb-2">Attempt Sequence Analysis</h4>
                <p className="text-sm text-green-700">Review your section attempt strategy</p>
              </button>
              <button 
                onClick={() => setCurrentView('time-omr-analysis')}
                className="bg-red-50 hover:bg-red-100 border border-red-200 rounded-lg p-4 text-left transition-colors"
              >
                <h4 className="font-medium text-red-900 mb-2">Time & OMR Analysis</h4>
                <p className="text-sm text-red-700">Section-wise time management insights</p>
              </button>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <button 
                onClick={() => alert('Psychological Analysis coming next!')}
                className="bg-purple-50 hover:bg-purple-100 border border-purple-200 rounded-lg p-4 text-left transition-colors"
              >
                <h4 className="font-medium text-purple-900 mb-2">Psychological Performance</h4>
                <p className="text-sm text-purple-700">Confidence, stress, and mindset analysis</p>
              </button>
              <button 
                onClick={() => setCurrentView('sectional-mastery')}
                className="bg-orange-50 hover:bg-orange-100 border border-orange-200 rounded-lg p-4 text-left transition-colors"
              >
                <h4 className="font-medium text-orange-900 mb-2">Sectional Mastery</h4>
                <p className="text-sm text-orange-700">Topic-wise mastery analysis</p>
              </button>
              <button 
                onClick={() => setCurrentView('strategic-decision-log')}
                className="bg-indigo-50 hover:bg-indigo-100 border border-indigo-200 rounded-lg p-4 text-left transition-colors"
              >
                <h4 className="font-medium text-indigo-900 mb-2">Strategic Decision Log</h4>
                <p className="text-sm text-indigo-700">Risk-taking performance analysis</p>
              </button>
            </div>
            
            {/* New navigation row for pages 26-30 components */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
              <button 
                onClick={() => setCurrentView('performance-benchmarking')}
                className="bg-cyan-50 hover:bg-cyan-100 border border-cyan-200 rounded-lg p-4 text-left transition-colors"
              >
                <h4 className="font-medium text-cyan-900 mb-2">Performance Benchmarking</h4>
                <p className="text-sm text-cyan-700">Score comparison & progress velocity</p>
              </button>
              <button 
                onClick={() => setCurrentView('comprehensive-review')}
                className="bg-teal-50 hover:bg-teal-100 border border-teal-200 rounded-lg p-4 text-left transition-colors"
              >
                <h4 className="font-medium text-teal-900 mb-2">Comprehensive Review</h4>
                <p className="text-sm text-teal-700">KPIs & critical success factors</p>
              </button>
              <button 
                onClick={() => setCurrentView('mistake-bank')}
                className="bg-rose-50 hover:bg-rose-100 border border-rose-200 rounded-lg p-4 text-left transition-colors"
              >
                <h4 className="font-medium text-rose-900 mb-2">Mistake Bank</h4>
                <p className="text-sm text-rose-700">Pattern recognition & error analysis</p>
              </button>
            </div>
            
            {/* Advanced Analysis - Pages 31+ */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
              <button 
                onClick={() => setCurrentView('pattern-recognition')}
                className="bg-violet-50 hover:bg-violet-100 border border-violet-200 rounded-lg p-4 text-left transition-colors"
              >
                <h4 className="font-medium text-violet-900 mb-2">Pattern Recognition Insights</h4>
                <p className="text-sm text-violet-700">Behavioral patterns & meta-analysis</p>
              </button>
              <button 
                onClick={() => setCurrentView('weakness-transformation')}
                className="bg-emerald-50 hover:bg-emerald-100 border border-emerald-200 rounded-lg p-4 text-left transition-colors"
              >
                <h4 className="font-medium text-emerald-900 mb-2">Weakness Transformation Journal</h4>
                <p className="text-sm text-emerald-700">Structured weakness-to-strength tracking</p>
              </button>
              <button
                onClick={() => setCurrentView('action-plan')}
                className="bg-violet-50 hover:bg-violet-100 border border-violet-200 rounded-lg p-4 text-left transition-colors"
              >
                <h4 className="font-medium text-violet-900 mb-2">Action Plan & Strategy Adjustments</h4>
                <p className="text-sm text-violet-700">24hr plan, weekly schedule, strategy tweaks</p>
              </button>
            </div>
          </div>

          {/* Future Planning & Support Section */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h3 className="text-xl font-semibold mb-6 flex items-center">
              <Calendar className="w-6 h-6 mr-2 text-indigo-600" />
              Future Planning & Support System
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <button
                onClick={() => setCurrentView('next-mock-planning')}
                className="bg-indigo-50 hover:bg-indigo-100 border border-indigo-200 rounded-lg p-4 text-left transition-colors"
              >
                <h4 className="font-medium text-indigo-900 mb-2">Next Mock Test Planning</h4>
                <p className="text-sm text-indigo-700">Strategic planning for upcoming tests</p>
              </button>
              <button
                onClick={() => setCurrentView('accountability-system')}
                className="bg-teal-50 hover:bg-teal-100 border border-teal-200 rounded-lg p-4 text-left transition-colors"
              >
                <h4 className="font-medium text-teal-900 mb-2">Accountability & Support System</h4>
                <p className="text-sm text-teal-700">Study partners, mentors, progress tracking</p>
              </button>
              <button
                onClick={() => setCurrentView('commitment-statement')}
                className="bg-amber-50 hover:bg-amber-100 border border-amber-200 rounded-lg p-4 text-left transition-colors"
              >
                <h4 className="font-medium text-amber-900 mb-2">Commitment Statement</h4>
                <p className="text-sm text-amber-700">Personal commitment with tactical goals</p>
              </button>
              <button
                onClick={() => setCurrentView('emergency-backup')}
                className="bg-red-50 hover:bg-red-100 border border-red-200 rounded-lg p-4 text-left transition-colors"
              >
                <h4 className="font-medium text-red-900 mb-2">Emergency Backup Plan</h4>
                <p className="text-sm text-red-700">Performance decline & stress management</p>
              </button>
              <button
                onClick={() => setCurrentView('motivation-mindset')}
                className="bg-yellow-50 hover:bg-yellow-100 border border-yellow-200 rounded-lg p-4 text-left transition-colors"
              >
                <h4 className="font-medium text-yellow-900 mb-2">Motivation & Mindset</h4>
                <p className="text-sm text-yellow-700">Daily affirmations & weekly rituals</p>
              </button>
              <button
                onClick={() => setCurrentView('final-reflection')}
                className="bg-gradient-to-r from-purple-50 to-pink-50 hover:from-purple-100 hover:to-pink-100 border border-purple-200 rounded-lg p-4 text-left transition-colors"
              >
                <h4 className="font-medium text-purple-900 mb-2">Final Motivational Reflection</h4>
                <p className="text-sm text-purple-700">Journey tracking & legacy vision</p>
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Detailed Question Analysis View (Pages 7-15)
  const QuestionAnalysisView = () => {
    const [selectedSection, setSelectedSection] = useState<string>('all');
    const [selectedStatus, setSelectedStatus] = useState<string>('all');
    
    const filteredQuestions = questionAnalysisData.filter(q => 
      (selectedSection === 'all' || q.section === selectedSection) &&
      (selectedStatus === 'all' || q.status === selectedStatus)
    );

    const sections = ['English Language', 'Current Affairs/GK', 'Legal Reasoning', 'Logical Reasoning', 'Quantitative Techniques'];
    const statusOptions = ['correct', 'wrong', 'skipped', 'not-sure'];

    return (
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-7xl mx-auto">
          {/* Header */}
          <div className="mb-8">
            <button
              onClick={() => setCurrentView('performance-analysis')}
              className="flex items-center text-gray-600 hover:text-gray-900 mb-4"
            >
              <ChevronLeft className="w-5 h-5 mr-1" />
              Back to Performance Analysis
            </button>
            <div className="flex justify-between items-center">
              <div>
                <h1 className="text-3xl font-bold text-gray-900">Page 6: Detailed Question Analysis (Q1-120)</h1>
                <p className="text-gray-600 mt-1">Question-by-Question Breakdown • Fill immediately after test while memory is fresh</p>
              </div>
            </div>
          </div>

          {/* Filters */}
          <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
            <h2 className="text-lg font-semibold mb-4">Filters & Legend</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Filter by Section:</label>
                <select
                  value={selectedSection}
                  onChange={(e) => setSelectedSection(e.target.value)}
                  className="w-full border border-gray-300 rounded-lg px-3 py-2"
                >
                  <option value="all">All Sections</option>
                  {sections.map(section => (
                    <option key={section} value={section}>{section}</option>
                  ))}
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Filter by Status:</label>
                <select
                  value={selectedStatus}
                  onChange={(e) => setSelectedStatus(e.target.value)}
                  className="w-full border border-gray-300 rounded-lg px-3 py-2"
                >
                  <option value="all">All Status</option>
                  {statusOptions.map(status => (
                    <option key={status} value={status}>{status.charAt(0).toUpperCase() + status.slice(1)}</option>
                  ))}
                </select>
              </div>
            </div>
            
            {/* Legend */}
            <div className="mt-4 p-4 bg-gray-50 rounded-lg">
              <h3 className="font-medium mb-2">Legend:</h3>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                <div><strong>Status:</strong> C=Correct, W=Wrong, S=Skipped, NS=Not Sure</div>
                <div><strong>Difficulty:</strong> E=Easy, M=Medium, H=Hard, T=Tricky</div>
                <div><strong>Time:</strong> Seconds taken per question</div>
                <div><strong>OMR:</strong> Time included in section time or separate</div>
              </div>
              <div className="mt-2 p-2 bg-yellow-100 rounded text-sm text-yellow-800">
                💡 <strong>Analysis Tip:</strong> Fill this immediately after the test while memory is fresh
              </div>
            </div>
          </div>

          {/* Question Analysis Table */}
          <div className="bg-white rounded-xl shadow-lg overflow-hidden">
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-4 py-3 text-left font-medium text-gray-900">Q#</th>
                    <th className="px-4 py-3 text-center font-medium text-gray-900">Status</th>
                    <th className="px-4 py-3 text-center font-medium text-gray-900">Time</th>
                    <th className="px-4 py-3 text-center font-medium text-gray-900">Difficulty</th>
                    <th className="px-4 py-3 text-left font-medium text-gray-900">Topic/Type</th>
                    <th className="px-4 py-3 text-left font-medium text-gray-900">Error Analysis</th>
                    <th className="px-4 py-3 text-center font-medium text-gray-900">OMR Method</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200">
                  {filteredQuestions.map((question, index) => (
                    <tr key={index} className="hover:bg-gray-50">
                      <td className="px-4 py-3 font-medium">{question.questionNumber}</td>
                      <td className="px-4 py-3 text-center">
                        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                          question.status === 'correct' ? 'bg-green-100 text-green-800' :
                          question.status === 'wrong' ? 'bg-red-100 text-red-800' :
                          question.status === 'skipped' ? 'bg-yellow-100 text-yellow-800' :
                          'bg-gray-100 text-gray-800'
                        }`}>
                          {question.status === 'correct' ? '✓ C' :
                           question.status === 'wrong' ? '✗ W' :
                           question.status === 'skipped' ? '‒ S' :
                           '? NS'}
                        </span>
                      </td>
                      <td className="px-4 py-3 text-center font-mono text-sm">
                        {question.timeTaken > 0 ? `${question.timeTaken}s` : '-'}
                      </td>
                      <td className="px-4 py-3 text-center">
                        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                          question.difficulty === 'easy' ? 'bg-green-100 text-green-800' :
                          question.difficulty === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                          question.difficulty === 'hard' ? 'bg-red-100 text-red-800' :
                          'bg-purple-100 text-purple-800'
                        }`}>
                          {question.difficulty === 'easy' ? 'E' :
                           question.difficulty === 'medium' ? 'M' :
                           question.difficulty === 'hard' ? 'H' : 'T'}
                        </span>
                      </td>
                      <td className="px-4 py-3 text-sm">{question.topicType}</td>
                      <td className="px-4 py-3 text-sm text-gray-600">{question.errorAnalysis}</td>
                      <td className="px-4 py-3 text-center">
                        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                          question.omrMethod === 'included' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'
                        }`}>
                          {question.omrMethod === 'included' ? '✓ Inc' : '→ Sep'}
                        </span>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            
            {filteredQuestions.length === 0 && (
              <div className="text-center py-8 text-gray-500">
                No questions match the selected filters.
              </div>
            )}
          </div>

          {/* Section Analysis Summary */}
          <div className="mt-6 grid grid-cols-1 md:grid-cols-5 gap-4">
            {sections.map(section => {
              const sectionQuestions = questionAnalysisData.filter(q => q.section === section);
              const sectionStats = {
                total: sectionQuestions.length,
                correct: sectionQuestions.filter(q => q.status === 'correct').length,
                wrong: sectionQuestions.filter(q => q.status === 'wrong').length,
                skipped: sectionQuestions.filter(q => q.status === 'skipped').length
              };
              
              return (
                <div key={section} className="bg-white rounded-lg p-4 shadow">
                  <h3 className="font-medium text-sm mb-2">{section.replace(' Techniques', ' Tech')}</h3>
                  <div className="space-y-1 text-xs">
                    <div className="flex justify-between">
                      <span>Correct:</span>
                      <span className="text-green-600 font-medium">{sectionStats.correct}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Wrong:</span>
                      <span className="text-red-600 font-medium">{sectionStats.wrong}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Skipped:</span>
                      <span className="text-yellow-600 font-medium">{sectionStats.skipped}</span>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>
    );
  };

  // Attempt Sequence Analysis View (Page 7)
  const SequenceAnalysisView = () => {
    return (
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-7xl mx-auto">
          {/* Header */}
          <div className="mb-8">
            <button
              onClick={() => setCurrentView('performance-analysis')}
              className="flex items-center text-gray-600 hover:text-gray-900 mb-4"
            >
              <ChevronLeft className="w-5 h-5 mr-1" />
              Back to Performance Analysis
            </button>
            <div className="flex justify-between items-center">
              <div>
                <h1 className="text-3xl font-bold text-gray-900">Attempt Sequence Analysis</h1>
                <p className="text-gray-600 mt-1">Review your actual vs planned section sequence</p>
              </div>
            </div>
          </div>

          {/* Sequence Comparison */}
          <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
            <h2 className="text-xl font-semibold mb-4 flex items-center">
              <Settings className="w-5 h-5 mr-2 text-purple-600" />
              Attempt Sequence Analysis
            </h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
              <div>
                <h3 className="font-medium mb-3">Planned Sequence:</h3>
                <div className="space-y-2">
                  {actualPerformance.attemptSequenceAnalysis.plannedSequence.map((section, index) => (
                    <div key={index} className="flex items-center space-x-3 p-3 bg-blue-50 rounded-lg">
                      <div className="bg-blue-600 text-white w-6 h-6 rounded-full flex items-center justify-center text-sm font-bold">
                        {index + 1}
                      </div>
                      <span className="font-medium">{section}</span>
                    </div>
                  ))}
                </div>
              </div>
              
              <div>
                <h3 className="font-medium mb-3">Actual Sequence Followed:</h3>
                <div className="space-y-2">
                  {actualPerformance.attemptSequenceAnalysis.actualSequence.map((section, index) => (
                    <div key={index} className={`flex items-center space-x-3 p-3 rounded-lg ${
                      actualPerformance.attemptSequenceAnalysis.plannedSequence[index] === section 
                        ? 'bg-green-50' : 'bg-red-50'
                    }`}>
                      <div className={`w-6 h-6 rounded-full flex items-center justify-center text-sm font-bold text-white ${
                        actualPerformance.attemptSequenceAnalysis.plannedSequence[index] === section 
                          ? 'bg-green-600' : 'bg-red-600'
                      }`}>
                        {index + 1}
                      </div>
                      <span className="font-medium">{section}</span>
                      {actualPerformance.attemptSequenceAnalysis.plannedSequence[index] !== section && (
                        <span className="text-xs text-red-600">(Changed from planned sequence)</span>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            </div>
            
            {/* Sequence Satisfaction */}
            <div className="bg-gray-50 rounded-lg p-4 mb-6">
              <h3 className="font-medium mb-3">Sequence Satisfaction & Future Plans:</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Sequence Satisfaction:</label>
                  <div className="flex space-x-4">
                    {(['very-satisfied', 'satisfied', 'neutral', 'dissatisfied'] as const).map((level) => (
                      <label key={level} className="flex items-center">
                        <input
                          type="radio"
                          name="satisfaction"
                          value={level}
                          checked={actualPerformance.attemptSequenceAnalysis.sequenceSatisfaction === level}
                          className="mr-2"
                          readOnly
                        />
                        <span className="text-sm capitalize">{level.replace('-', ' ')}</span>
                      </label>
                    ))}
                  </div>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Would use same sequence again:</label>
                  <div className="flex space-x-4">
                    {(['yes', 'no', 'with-modifications'] as const).map((option) => (
                      <label key={option} className="flex items-center">
                        <input
                          type="radio"
                          name="reuse"
                          value={option}
                          checked={actualPerformance.attemptSequenceAnalysis.wouldUseSameAgain === option}
                          className="mr-2"
                          readOnly
                        />
                        <span className="text-sm capitalize">{option.replace('-', ' ')}</span>
                      </label>
                    ))}
                  </div>
                </div>
              </div>
            </div>
            
            {/* Sequence Impact Analysis */}
            <div>
              <h3 className="font-medium mb-3">Sequence Impact Analysis:</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="bg-green-50 rounded-lg p-4">
                  <h4 className="font-medium text-green-900 mb-2 flex items-center">
                    <CheckCircle className="w-4 h-4 mr-1" />
                    Positive Impact
                  </h4>
                  <ul className="text-sm text-green-800 space-y-1">
                    {actualPerformance.attemptSequenceAnalysis.sequenceImpact.positive.map((impact, index) => (
                      <li key={index}>• {impact}</li>
                    ))}
                  </ul>
                </div>
                
                <div className="bg-red-50 rounded-lg p-4">
                  <h4 className="font-medium text-red-900 mb-2 flex items-center">
                    <XCircle className="w-4 h-4 mr-1" />
                    Negative Impact
                  </h4>
                  <ul className="text-sm text-red-800 space-y-1">
                    {actualPerformance.attemptSequenceAnalysis.sequenceImpact.negative.map((impact, index) => (
                      <li key={index}>• {impact}</li>
                    ))}
                  </ul>
                </div>
                
                <div className="bg-blue-50 rounded-lg p-4">
                  <h4 className="font-medium text-blue-900 mb-2 flex items-center">
                    <Lightbulb className="w-4 h-4 mr-1" />
                    Recommended Changes
                  </h4>
                  <ul className="text-sm text-blue-800 space-y-1">
                    {actualPerformance.attemptSequenceAnalysis.sequenceImpact.recommendedChanges.map((change, index) => (
                      <li key={index}>• {change}</li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>
            
            <div className="mt-4 p-3 bg-yellow-50 rounded-lg">
              <p className="text-sm text-yellow-800">
                🎯 <strong>Sequence Learning:</strong> Even small deviations from planned sequence can impact performance
              </p>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Simple Confidence & Anxiety Tracking (Simplified from Pages 16-17)
  const PsychologicalAnalysisView = () => {
    // Simple psychological tracking data
    const simpleTracker = {
      preTest: { confidence: 7, anxiety: 4 },
      duringTest: { confidence: 6, anxiety: 5 }, 
      postTest: { confidence: 8, anxiety: 3 },
      keyInsights: [
        'Confidence decreased during test due to time pressure',
        'Anxiety peaked in Logical Reasoning section', 
        'Post-test confidence improved with completion relief'
      ],
      recommendations: [
        'Practice time management to maintain confidence',
        'Use breathing techniques during high-anxiety sections',
        'Build confidence through regular mock tests'
      ]
    };

    return (
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-4xl mx-auto">
          {/* Header */}
          <div className="mb-8">
            <button
              onClick={() => setCurrentView('dashboard')}
              className="mb-4 flex items-center text-blue-600 hover:text-blue-800"
            >
              <ChevronLeft className="w-4 h-4 mr-1" />
              Back to Dashboard
            </button>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">Confidence & Anxiety Tracking</h1>
            <p className="text-gray-600">Simple psychological state monitoring</p>
          </div>

          {/* Confidence & Anxiety Levels */}
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-2xl font-semibold text-gray-900 mb-6 flex items-center">
              <Brain className="w-6 h-6 mr-2 text-blue-600" />
              Test Performance Mindset
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="text-center">
                <h3 className="font-medium text-gray-800 mb-4">Pre-Test</h3>
                <div className="space-y-4">
                  <div className="bg-green-50 p-4 rounded-lg">
                    <div className="text-sm text-green-700 mb-1">Confidence</div>
                    <div className="text-2xl font-bold text-green-600">{simpleTracker.preTest.confidence}/10</div>
                  </div>
                  <div className="bg-orange-50 p-4 rounded-lg">
                    <div className="text-sm text-orange-700 mb-1">Anxiety</div>
                    <div className="text-2xl font-bold text-orange-600">{simpleTracker.preTest.anxiety}/10</div>
                  </div>
                </div>
              </div>
              <div className="text-center">
                <h3 className="font-medium text-gray-800 mb-4">During Test</h3>
                <div className="space-y-4">
                  <div className="bg-green-50 p-4 rounded-lg">
                    <div className="text-sm text-green-700 mb-1">Confidence</div>
                    <div className="text-2xl font-bold text-green-600">{simpleTracker.duringTest.confidence}/10</div>
                  </div>
                  <div className="bg-orange-50 p-4 rounded-lg">
                    <div className="text-sm text-orange-700 mb-1">Anxiety</div>
                    <div className="text-2xl font-bold text-orange-600">{simpleTracker.duringTest.anxiety}/10</div>
                  </div>
                </div>
              </div>
              <div className="text-center">
                <h3 className="font-medium text-gray-800 mb-4">Post-Test</h3>
                <div className="space-y-4">
                  <div className="bg-green-50 p-4 rounded-lg">
                    <div className="text-sm text-green-700 mb-1">Confidence</div>
                    <div className="text-2xl font-bold text-green-600">{simpleTracker.postTest.confidence}/10</div>
                  </div>
                  <div className="bg-orange-50 p-4 rounded-lg">
                    <div className="text-sm text-orange-700 mb-1">Anxiety</div>
                    <div className="text-2xl font-bold text-orange-600">{simpleTracker.postTest.anxiety}/10</div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Key Insights */}
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
              <Lightbulb className="w-5 h-5 mr-2 text-yellow-600" />
              Key Insights
            </h2>
            <div className="space-y-3">
              {simpleTracker.keyInsights.map((insight, index) => (
                <div key={index} className="flex items-start">
                  <CheckCircle className="w-5 h-5 text-green-500 mr-3 mt-0.5 flex-shrink-0" />
                  <span className="text-gray-700">{insight}</span>
                </div>
              ))}
            </div>
          </div>

          {/* Recommendations */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
              <Target className="w-5 h-5 mr-2 text-blue-600" />
              Recommendations
            </h2>
            <div className="space-y-3">
              {simpleTracker.recommendations.map((rec, index) => (
                <div key={index} className="flex items-start">
                  <ArrowUpRight className="w-5 h-5 text-blue-500 mr-3 mt-0.5 flex-shrink-0" />
                  <span className="text-gray-700">{rec}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Time & OMR Analysis View (Page 9 from pages 21-25)
  const TimeOMRAnalysisView = () => {
    const timeData = timeOMRAnalysis;
    
    const getGradeColor = (grade: string) => {
      switch (grade) {
        case 'A': return 'bg-green-100 text-green-800';
        case 'B': return 'bg-blue-100 text-blue-800';
        case 'C': return 'bg-yellow-100 text-yellow-800';
        case 'D': return 'bg-orange-100 text-orange-800';
        case 'F': return 'bg-red-100 text-red-800';
        default: return 'bg-gray-100 text-gray-800';
      }
    };

    return (
      <div className="min-h-screen bg-gradient-to-br from-red-50 to-pink-100 p-6">
        <div className="max-w-7xl mx-auto">
          {/* Header */}
          <div className="mb-8">
            <button
              onClick={() => setCurrentView('performance-analysis')}
              className="flex items-center text-gray-600 hover:text-gray-900 mb-4"
            >
              <ChevronLeft className="w-5 h-5 mr-1" />
              Back to Performance Analysis
            </button>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">Time & OMR Analysis</h1>
            <p className="text-gray-600">Section-wise time management and OMR efficiency insights</p>
          </div>

          {/* Section-wise Time Analysis */}
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-xl font-semibold mb-6 flex items-center">
              <Clock className="w-6 h-6 mr-2 text-red-600" />
              Section-wise Time Management Analysis
            </h2>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b-2 border-gray-200">
                    <th className="text-left py-3 px-4 font-semibold">Section</th>
                    <th className="text-center py-3 px-4 font-semibold">Planned Time</th>
                    <th className="text-center py-3 px-4 font-semibold">Actual Time</th>
                    <th className="text-center py-3 px-4 font-semibold">Time Variance</th>
                    <th className="text-center py-3 px-4 font-semibold">Time/Question</th>
                    <th className="text-center py-3 px-4 font-semibold">Grade</th>
                  </tr>
                </thead>
                <tbody>
                  {timeData.sectionWiseTimeAnalysis.map((section, index) => (
                    <tr key={index} className="border-b border-gray-100 hover:bg-gray-50">
                      <td className="py-3 px-4 font-medium">{section.section}</td>
                      <td className="text-center py-3 px-4">{section.plannedTime} min</td>
                      <td className="text-center py-3 px-4">{section.actualTime} min</td>
                      <td className={`text-center py-3 px-4 font-medium ${
                        section.timeVariance > 0 ? 'text-red-600' : 'text-green-600'
                      }`}>
                        {section.timeVariance > 0 ? '+' : ''}{section.timeVariance} min
                      </td>
                      <td className="text-center py-3 px-4">{section.timePerQuestion}s</td>
                      <td className="text-center py-3 px-4">
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getGradeColor(section.timeManagementGrade)}`}>
                          {section.timeManagementGrade}
                        </span>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          {/* OMR Analysis */}
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-xl font-semibold mb-6 flex items-center">
              <FileText className="w-6 h-6 mr-2 text-red-600" />
              OMR Analysis
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              <div className="text-center p-4 bg-blue-50 rounded-lg">
                <div className="text-2xl font-bold text-blue-600">{timeData.omrAnalysis.plannedOMRTime} min</div>
                <div className="text-sm text-blue-700">Planned OMR Time</div>
              </div>
              <div className="text-center p-4 bg-green-50 rounded-lg">
                <div className="text-2xl font-bold text-green-600">{timeData.omrAnalysis.actualOMRTime} min</div>
                <div className="text-sm text-green-700">Actual OMR Time</div>
              </div>
              <div className="text-center p-4 bg-purple-50 rounded-lg">
                <div className="text-2xl font-bold text-purple-600">{timeData.omrAnalysis.omrEfficiency}%</div>
                <div className="text-sm text-purple-700">OMR Efficiency</div>
              </div>
              <div className="text-center p-4 bg-orange-50 rounded-lg">
                <div className="text-2xl font-bold text-orange-600">{timeData.omrAnalysis.bubbleSheetAccuracy}%</div>
                <div className="text-sm text-orange-700">Bubble Sheet Accuracy</div>
              </div>
            </div>
          </div>

          {/* Time Management Insights */}
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-xl font-semibold mb-6 flex items-center">
              <TrendingUp className="w-6 h-6 mr-2 text-red-600" />
              Time Management Insights
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div>
                <h3 className="font-semibold text-gray-900 mb-3 flex items-center">
                  <AlertCircle className="w-5 h-5 mr-2 text-red-500" />
                  Critical Time Points
                </h3>
                <ul className="space-y-2">
                  {timeData.timeManagementInsights.criticalTimePoints.map((point, index) => (
                    <li key={index} className="text-sm text-gray-600 bg-red-50 p-2 rounded">
                      {point}
                    </li>
                  ))}
                </ul>
              </div>
              <div>
                <h3 className="font-semibold text-gray-900 mb-3 flex items-center">
                  <XCircle className="w-5 h-5 mr-2 text-orange-500" />
                  Time Waste Areas
                </h3>
                <ul className="space-y-2">
                  {timeData.timeManagementInsights.timeWasteAreas.map((area, index) => (
                    <li key={index} className="text-sm text-gray-600 bg-orange-50 p-2 rounded">
                      {area}
                    </li>
                  ))}
                </ul>
              </div>
              <div>
                <h3 className="font-semibold text-gray-900 mb-3 flex items-center">
                  <CheckCircle className="w-5 h-5 mr-2 text-green-500" />
                  Effective Time Usage
                </h3>
                <ul className="space-y-2">
                  {timeData.timeManagementInsights.effectiveTimeUsage.map((usage, index) => (
                    <li key={index} className="text-sm text-gray-600 bg-green-50 p-2 rounded">
                      {usage}
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </div>

          {/* Section-wise Performance Details */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-6 flex items-center">
              <BarChart3 className="w-6 h-6 mr-2 text-red-600" />
              Section-wise Time Performance Details
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {timeData.sectionWiseTimeAnalysis.map((section, index) => (
                <div key={index} className="border border-gray-200 rounded-lg p-4">
                  <h3 className="font-semibold text-gray-900 mb-3">{section.section}</h3>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span className="text-gray-600">Efficient Questions:</span>
                      <span className="font-medium text-green-600">{section.efficientQuestions}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Time Wasted Questions:</span>
                      <span className="font-medium text-red-600">{section.timeWastedQuestions}</span>
                    </div>
                    <div className="mt-3">
                      <span className="text-gray-600 text-xs">Rushing Indicators:</span>
                      {section.rushingIndicators.length > 0 ? (
                        <ul className="mt-1 space-y-1">
                          {section.rushingIndicators.map((indicator, idx) => (
                            <li key={idx} className="text-xs text-orange-600 bg-orange-50 p-1 rounded">
                              {indicator}
                            </li>
                          ))}
                        </ul>
                      ) : (
                        <p className="text-xs text-green-600 mt-1">No rushing indicators</p>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Simplified Topic-wise Performance (Simplified from Pages 18-20)
  const SectionalMasteryView = () => {
    // Simplified topic performance data
    const topicPerformance = {
      english: [
        { topic: 'Reading Comprehension', accuracy: 85, status: 'good' },
        { topic: 'Grammar', accuracy: 92, status: 'excellent' },
        { topic: 'Vocabulary', accuracy: 75, status: 'needs-work' }
      ],
      legal: [
        { topic: 'Constitutional Law', accuracy: 90, status: 'excellent' },
        { topic: 'Criminal Law', accuracy: 82, status: 'good' },
        { topic: 'Contract Law', accuracy: 70, status: 'needs-work' }
      ],
      logical: [
        { topic: 'Syllogisms', accuracy: 65, status: 'needs-work' },
        { topic: 'Critical Reasoning', accuracy: 80, status: 'good' },
        { topic: 'Puzzles', accuracy: 60, status: 'needs-work' }
      ],
      gk: [
        { topic: 'Current Affairs', accuracy: 70, status: 'needs-work' },
        { topic: 'History', accuracy: 85, status: 'good' },
        { topic: 'Geography', accuracy: 78, status: 'good' }
      ],
      quant: [
        { topic: 'Arithmetic', accuracy: 55, status: 'needs-work' },
        { topic: 'Data Interpretation', accuracy: 70, status: 'needs-work' }
      ]
    };

    const getStatusColor = (status: string) => {
      switch (status) {
        case 'excellent': return 'bg-green-100 text-green-800';
        case 'good': return 'bg-blue-100 text-blue-800';
        case 'needs-work': return 'bg-red-100 text-red-800';
        default: return 'bg-gray-100 text-gray-800';
      }
    };

    return (
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-6xl mx-auto">
          {/* Header */}
          <div className="mb-8">
            <button
              onClick={() => setCurrentView('dashboard')}
              className="mb-4 flex items-center text-blue-600 hover:text-blue-800"
            >
              <ChevronLeft className="w-4 h-4 mr-1" />
              Back to Dashboard
            </button>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">Topic-wise Performance</h1>
            <p className="text-gray-600">Simplified section and topic analysis</p>
          </div>

          {/* Performance by Section */}
          <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
            {/* English Section */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                <BookOpen className="w-5 h-5 mr-2 text-blue-600" />
                English Language
              </h2>
              <div className="space-y-3">
                {topicPerformance.english.map((topic, index) => (
                  <div key={index} className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                    <div>
                      <div className="font-medium text-gray-800">{topic.topic}</div>
                      <div className="text-sm text-gray-600">{topic.accuracy}% accuracy</div>
                    </div>
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(topic.status)}`}>
                      {topic.status === 'needs-work' ? 'Needs Work' : topic.status.charAt(0).toUpperCase() + topic.status.slice(1)}
                    </span>
                  </div>
                ))}
              </div>
            </div>

            {/* Legal Section */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                <Award className="w-5 h-5 mr-2 text-purple-600" />
                Legal Reasoning
              </h2>
              <div className="space-y-3">
                {topicPerformance.legal.map((topic, index) => (
                  <div key={index} className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                    <div>
                      <div className="font-medium text-gray-800">{topic.topic}</div>
                      <div className="text-sm text-gray-600">{topic.accuracy}% accuracy</div>
                    </div>
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(topic.status)}`}>
                      {topic.status === 'needs-work' ? 'Needs Work' : topic.status.charAt(0).toUpperCase() + topic.status.slice(1)}
                    </span>
                  </div>
                ))}
              </div>
            </div>

            {/* Logical Section */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                <Brain className="w-5 h-5 mr-2 text-orange-600" />
                Logical Reasoning
              </h2>
              <div className="space-y-3">
                {topicPerformance.logical.map((topic, index) => (
                  <div key={index} className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                    <div>
                      <div className="font-medium text-gray-800">{topic.topic}</div>
                      <div className="text-sm text-gray-600">{topic.accuracy}% accuracy</div>
                    </div>
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(topic.status)}`}>
                      {topic.status === 'needs-work' ? 'Needs Work' : topic.status.charAt(0).toUpperCase() + topic.status.slice(1)}
                    </span>
                  </div>
                ))}
              </div>
            </div>

            {/* GK Section */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                <Lightbulb className="w-5 h-5 mr-2 text-green-600" />
                General Knowledge
              </h2>
              <div className="space-y-3">
                {topicPerformance.gk.map((topic, index) => (
                  <div key={index} className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                    <div>
                      <div className="font-medium text-gray-800">{topic.topic}</div>
                      <div className="text-sm text-gray-600">{topic.accuracy}% accuracy</div>
                    </div>
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(topic.status)}`}>
                      {topic.status === 'needs-work' ? 'Needs Work' : topic.status.charAt(0).toUpperCase() + topic.status.slice(1)}
                    </span>
                  </div>
                ))}
              </div>
            </div>

            {/* Quantitative Section */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                <BarChart3 className="w-5 h-5 mr-2 text-red-600" />
                Quantitative Techniques
              </h2>
              <div className="space-y-3">
                {topicPerformance.quant.map((topic, index) => (
                  <div key={index} className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                    <div>
                      <div className="font-medium text-gray-800">{topic.topic}</div>
                      <div className="text-sm text-gray-600">{topic.accuracy}% accuracy</div>
                    </div>
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(topic.status)}`}>
                      {topic.status === 'needs-work' ? 'Needs Work' : topic.status.charAt(0).toUpperCase() + topic.status.slice(1)}
                    </span>
                  </div>
                ))}
              </div>
            </div>

            {/* Overall Summary */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                <Target className="w-5 h-5 mr-2 text-indigo-600" />
                Quick Summary
              </h2>
              <div className="space-y-4">
                <div className="p-3 bg-green-50 rounded-lg">
                  <div className="font-medium text-green-800">Strong Areas</div>
                  <div className="text-sm text-green-700">Grammar, Constitutional Law</div>
                </div>
                <div className="p-3 bg-red-50 rounded-lg">
                  <div className="font-medium text-red-800">Focus Areas</div>
                  <div className="text-sm text-red-700">Quantitative, Logical Puzzles</div>
                </div>
                <div className="p-3 bg-blue-50 rounded-lg">
                  <div className="font-medium text-blue-800">Next Priority</div>
                  <div className="text-sm text-blue-700">Practice arithmetic and syllogisms</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Strategic Decision Log View (Page 25)
  const StrategicDecisionLogView = () => {
    const decisionData = strategicDecisionLog;
    
    const getRiskTypeColor = (riskType: string) => {
      switch (riskType) {
        case 'time-risk': return 'bg-red-100 text-red-800';
        case 'knowledge-risk': return 'bg-orange-100 text-orange-800';
        case 'elimination-risk': return 'bg-yellow-100 text-yellow-800';
        case 'guess-risk': return 'bg-purple-100 text-purple-800';
        default: return 'bg-gray-100 text-gray-800';
      }
    };

    const getOutcomeColor = (outcome: string) => {
      switch (outcome) {
        case 'correct': return 'bg-green-100 text-green-800';
        case 'wrong': return 'bg-red-100 text-red-800';
        case 'not-attempted': return 'bg-gray-100 text-gray-800';
        default: return 'bg-gray-100 text-gray-800';
      }
    };

    const getImpactColor = (impact: string) => {
      switch (impact) {
        case 'positive': return 'bg-green-100 text-green-800 border-green-200';
        case 'negative': return 'bg-red-100 text-red-800 border-red-200';
        case 'neutral': return 'bg-gray-100 text-gray-800 border-gray-200';
        default: return 'bg-gray-100 text-gray-800 border-gray-200';
      }
    };

    return (
      <div className="min-h-screen bg-gradient-to-br from-indigo-50 to-purple-100 p-6">
        <div className="max-w-7xl mx-auto">
          {/* Header */}
          <div className="mb-8">
            <button
              onClick={() => setCurrentView('performance-analysis')}
              className="flex items-center text-gray-600 hover:text-gray-900 mb-4"
            >
              <ChevronLeft className="w-5 h-5 mr-1" />
              Back to Performance Analysis
            </button>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">Strategic Decision Log</h1>
            <p className="text-gray-600">Risk-taking performance analysis and strategic learning insights</p>
          </div>

          {/* Decision Accuracy Metrics */}
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-xl font-semibold mb-6 flex items-center">
              <BarChart3 className="w-6 h-6 mr-2 text-indigo-600" />
              Risk Decision Performance Overview
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
              <div className="text-center p-4 bg-blue-50 rounded-lg">
                <div className="text-3xl font-bold text-blue-600">{decisionData.decisionAccuracy.totalRiskyDecisions}</div>
                <div className="text-sm text-blue-700">Total Risky Decisions</div>
              </div>
              <div className="text-center p-4 bg-green-50 rounded-lg">
                <div className="text-3xl font-bold text-green-600">{decisionData.decisionAccuracy.goodRiskDecisions}</div>
                <div className="text-sm text-green-700">Good Risk Decisions</div>
              </div>
              <div className="text-center p-4 bg-red-50 rounded-lg">
                <div className="text-3xl font-bold text-red-600">{decisionData.decisionAccuracy.badRiskDecisions}</div>
                <div className="text-sm text-red-700">Bad Risk Decisions</div>
              </div>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="text-center p-4 bg-purple-50 rounded-lg">
                <div className="text-2xl font-bold text-purple-600">{decisionData.decisionAccuracy.riskAccuracyPercent}%</div>
                <div className="text-sm text-purple-700">Risk Accuracy</div>
              </div>
              <div className="text-center p-4 bg-indigo-50 rounded-lg">
                <div className="text-2xl font-bold text-indigo-600">{decisionData.decisionAccuracy.riskImpactOnScore}</div>
                <div className="text-sm text-indigo-700">Score Impact</div>
              </div>
              <div className="text-center p-4 bg-orange-50 rounded-lg">
                <div className="text-2xl font-bold text-orange-600">{decisionData.decisionAccuracy.avgTimePerRiskyQuestion}s</div>
                <div className="text-sm text-orange-700">Avg Time/Risk Question</div>
              </div>
            </div>
          </div>

          {/* Risk Analysis Table */}
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-xl font-semibold mb-6 flex items-center">
              <AlertCircle className="w-6 h-6 mr-2 text-indigo-600" />
              Detailed Risk Analysis
            </h2>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b-2 border-gray-200">
                    <th className="text-left py-3 px-4 font-semibold">Q#</th>
                    <th className="text-left py-3 px-4 font-semibold">Section</th>
                    <th className="text-center py-3 px-4 font-semibold">Risk Type</th>
                    <th className="text-center py-3 px-4 font-semibold">Decision</th>
                    <th className="text-center py-3 px-4 font-semibold">Outcome</th>
                    <th className="text-center py-3 px-4 font-semibold">Justified</th>
                    <th className="text-left py-3 px-4 font-semibold">Lesson Learned</th>
                  </tr>
                </thead>
                <tbody>
                  {decisionData.riskAnalysis.map((decision, index) => (
                    <tr key={index} className="border-b border-gray-100 hover:bg-gray-50">
                      <td className="py-3 px-4 font-medium">Q{decision.questionNumber}</td>
                      <td className="py-3 px-4 text-sm">{decision.section}</td>
                      <td className="text-center py-3 px-4">
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getRiskTypeColor(decision.riskType)}`}>
                          {decision.riskType.replace('-', ' ')}
                        </span>
                      </td>
                      <td className="text-center py-3 px-4 text-sm font-medium">{decision.decisionTaken}</td>
                      <td className="text-center py-3 px-4">
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getOutcomeColor(decision.outcome)}`}>
                          {decision.outcome}
                        </span>
                      </td>
                      <td className="text-center py-3 px-4">
                        {decision.riskJustified ? (
                          <CheckCircle className="w-5 h-5 text-green-500 mx-auto" />
                        ) : (
                          <XCircle className="w-5 h-5 text-red-500 mx-auto" />
                        )}
                      </td>
                      <td className="py-3 px-4 text-sm text-gray-600 max-w-xs">{decision.lessonLearned}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          {/* Learning Insights */}
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-xl font-semibold mb-6 flex items-center">
              <Lightbulb className="w-6 h-6 mr-2 text-indigo-600" />
              Strategic Learning Insights
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {decisionData.learningInsights.map((insight, index) => (
                <div key={index} className={`border-2 rounded-lg p-4 ${getImpactColor(insight.impact)}`}>
                  <div className="flex items-start justify-between mb-2">
                    <h3 className="font-semibold text-gray-900 capitalize">{insight.category.replace('-', ' ')}</h3>
                    <span className="text-xs px-2 py-1 bg-white rounded-full font-medium">
                      {insight.confidenceLevel} confidence
                    </span>
                  </div>
                  <p className="text-sm text-gray-700 mb-2">{insight.observation}</p>
                  <p className="text-sm font-medium text-gray-900">Recommendation: {insight.recommendedChange}</p>
                </div>
              ))}
            </div>
          </div>

          {/* Future Strategy Recommendations */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-6 flex items-center">
              <Target className="w-6 h-6 mr-2 text-indigo-600" />
              Future Strategy Recommendations
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {/* Next Mock Strategy */}
              <div>
                <h3 className="font-semibold text-gray-900 mb-4 flex items-center">
                  <RefreshCw className="w-5 h-5 mr-2 text-blue-500" />
                  Next Mock Test Strategy
                </h3>
                <div className="space-y-3">
                  <div className="bg-blue-50 p-3 rounded-lg">
                    <h4 className="font-medium text-blue-900 mb-2">Time Allocation</h4>
                    <div className="grid grid-cols-2 gap-2 text-sm">
                      {Object.entries(decisionData.futureStrategy.nextMockStrategy.timeAllocation).map(([section, time]) => (
                        <div key={section} className="flex justify-between">
                          <span className="text-blue-700">{section}:</span>
                          <span className="font-medium text-blue-800">{time} min</span>
                        </div>
                      ))}
                    </div>
                  </div>
                  <div className="bg-green-50 p-3 rounded-lg">
                    <h4 className="font-medium text-green-900 mb-1">Risk Threshold</h4>
                    <span className="text-sm text-green-700 capitalize">{decisionData.futureStrategy.nextMockStrategy.riskThreshold}</span>
                  </div>
                  <div className="bg-purple-50 p-3 rounded-lg">
                    <h4 className="font-medium text-purple-900 mb-1">OMR Method</h4>
                    <span className="text-sm text-purple-700">{decisionData.futureStrategy.nextMockStrategy.omrMethod}</span>
                  </div>
                </div>
              </div>

              {/* Areas for Improvement */}
              <div>
                <div className="mb-6">
                  <h3 className="font-semibold text-gray-900 mb-3 flex items-center">
                    <BookOpen className="w-5 h-5 mr-2 text-orange-500" />
                    Practice Areas
                  </h3>
                  <ul className="space-y-2">
                    {decisionData.futureStrategy.practiceAreas.map((area, index) => (
                      <li key={index} className="text-sm bg-orange-50 p-2 rounded text-orange-700">
                        {area}
                      </li>
                    ))}
                  </ul>
                </div>
                <div className="mb-6">
                  <h3 className="font-semibold text-gray-900 mb-3 flex items-center">
                    <Trophy className="w-5 h-5 mr-2 text-green-500" />
                    Strengths to Maintain
                  </h3>
                  <ul className="space-y-2">
                    {decisionData.futureStrategy.strengthsToMaintain.map((strength, index) => (
                      <li key={index} className="text-sm bg-green-50 p-2 rounded text-green-700">
                        {strength}
                      </li>
                    ))}
                  </ul>
                </div>
                <div>
                  <h3 className="font-semibold text-gray-900 mb-3 flex items-center">
                    <Flag className="w-5 h-5 mr-2 text-red-500" />
                    Critical Improvements
                  </h3>
                  <ul className="space-y-2">
                    {decisionData.futureStrategy.criticalImprovements.map((improvement, index) => (
                      <li key={index} className="text-sm bg-red-50 p-2 rounded text-red-700">
                        {improvement}
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Performance Benchmarking View (Page 26)
  const PerformanceBenchmarkingView = () => {
    const benchmarkData = performanceBenchmarking;
    
    return (
      <div className="min-h-screen bg-gradient-to-br from-cyan-50 to-blue-100 p-6">
        <div className="max-w-7xl mx-auto">
          {/* Header */}
          <div className="mb-8">
            <button
              onClick={() => setCurrentView('performance-analysis')}
              className="flex items-center text-gray-600 hover:text-gray-900 mb-4"
            >
              <ChevronLeft className="w-5 h-5 mr-1" />
              Back to Performance Analysis
            </button>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">Performance Benchmarking</h1>
            <p className="text-gray-600">Comprehensive score comparison and progress velocity analysis</p>
          </div>

          {/* Score Comparison */}
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-xl font-semibold mb-6 flex items-center">
              <Target className="w-6 h-6 mr-2 text-cyan-600" />
              Score Comparison Analysis
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="text-center p-4 bg-blue-50 rounded-lg">
                <div className="text-3xl font-bold text-blue-600">{benchmarkData.scoreComparison.actualScore}</div>
                <div className="text-sm text-blue-700 mt-1">Your Score</div>
                <div className="text-xs text-blue-600 mt-2">Target: {benchmarkData.scoreComparison.targetScore}</div>
              </div>
              <div className="text-center p-4 bg-purple-50 rounded-lg">
                <div className="text-3xl font-bold text-purple-600">{benchmarkData.scoreComparison.yourPercentile}%</div>
                <div className="text-sm text-purple-700 mt-1">Your Percentile</div>
                <div className="text-xs text-purple-600 mt-2">Target: {benchmarkData.scoreComparison.targetPercentile}%</div>
              </div>
              <div className="text-center p-4 bg-red-50 rounded-lg">
                <div className="text-3xl font-bold text-red-600">{benchmarkData.scoreComparison.difference}</div>
                <div className="text-sm text-red-700 mt-1">Points to Target</div>
                <div className="text-xs text-red-600 mt-2">Gap: {benchmarkData.scoreComparison.gap} percentile points</div>
              </div>
            </div>
          </div>

          {/* Top Performance Benchmarks */}
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-xl font-semibold mb-6 flex items-center">
              <Trophy className="w-6 h-6 mr-2 text-cyan-600" />
              Top Performance Benchmarks
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
              <div className="border border-gray-200 rounded-lg p-4">
                <h3 className="font-semibold text-gray-900 mb-3">Top 1% Score</h3>
                <div className="text-2xl font-bold text-green-600">{benchmarkData.topPerformanceBenchmarks.top1Score}/120</div>
                <div className="text-sm text-gray-600 mt-1">Elite performance level</div>
                <div className="mt-3 text-sm text-red-600">Your Gap: -{benchmarkData.topPerformanceBenchmarks.yourGapToTop1} points</div>
              </div>
              <div className="border border-gray-200 rounded-lg p-4">
                <h3 className="font-semibold text-gray-900 mb-3">Top 10% Score</h3>
                <div className="text-2xl font-bold text-blue-600">{benchmarkData.topPerformanceBenchmarks.top10Score}/120</div>
                <div className="text-sm text-gray-600 mt-1">Target range for good law schools</div>
                <div className="mt-3 text-sm text-orange-600">Your Gap: -{benchmarkData.topPerformanceBenchmarks.yourGapToTop10} points</div>
              </div>
            </div>
            <div className="bg-yellow-50 p-4 rounded-lg">
              <p className="text-sm text-yellow-800">
                <strong>Benchmark Analysis:</strong> {benchmarkData.topPerformanceBenchmarks.benchmarkAnalysis}
              </p>
            </div>
          </div>

          {/* Sectional Comparison */}
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-xl font-semibold mb-6 flex items-center">
              <BarChart3 className="w-6 h-6 mr-2 text-cyan-600" />
              Sectional Comparison
            </h2>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b-2 border-gray-200">
                    <th className="text-left py-3 px-4 font-semibold">Section</th>
                    <th className="text-center py-3 px-4 font-semibold">Your Score</th>
                    <th className="text-center py-3 px-4 font-semibold">Batch Avg</th>
                    <th className="text-center py-3 px-4 font-semibold">Top 1%</th>
                    <th className="text-center py-3 px-4 font-semibold">Your Rank</th>
                    <th className="text-center py-3 px-4 font-semibold">Improvement Needed</th>
                  </tr>
                </thead>
                <tbody>
                  {benchmarkData.sectionalComparison.map((section, index) => (
                    <tr key={index} className="border-b border-gray-100 hover:bg-gray-50">
                      <td className="py-3 px-4 font-medium">{section.section}</td>
                      <td className="text-center py-3 px-4">{section.yourScore}</td>
                      <td className="text-center py-3 px-4">{section.batchAvg}</td>
                      <td className="text-center py-3 px-4 font-medium text-green-600">{section.top1Percent}</td>
                      <td className="text-center py-3 px-4">
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                          section.yourRank === 'Below Avg' ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'
                        }`}>
                          {section.yourRank}
                        </span>
                      </td>
                      <td className="text-center py-3 px-4 text-sm text-orange-600">{section.improvementNeeded}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            <div className="mt-4 bg-blue-50 p-4 rounded-lg">
              <p className="text-sm text-blue-800">
                <strong>Sectional Analysis:</strong> Below average in all sections but close to batch average. Logical and GK need maximum attention.
              </p>
            </div>
          </div>

          {/* Progress Velocity */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-6 flex items-center">
              <TrendingUp className="w-6 h-6 mr-2 text-cyan-600" />
              Progress Velocity
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h3 className="font-semibold text-gray-900 mb-4">Improvement Metrics</h3>
                <div className="space-y-3">
                  <div className="flex justify-between items-center p-3 bg-green-50 rounded-lg">
                    <span className="text-sm text-green-700">From Last Mock</span>
                    <span className="font-semibold text-green-800">+{benchmarkData.progressVelocity.improvementFromLastMock} points</span>
                  </div>
                  <div className="flex justify-between items-center p-3 bg-blue-50 rounded-lg">
                    <span className="text-sm text-blue-700">Weekly Rate</span>
                    <span className="font-semibold text-blue-800">{benchmarkData.progressVelocity.weeklyImprovement} points/week</span>
                  </div>
                  <div className="flex justify-between items-center p-3 bg-purple-50 rounded-lg">
                    <span className="text-sm text-purple-700">Monthly Rate</span>
                    <span className="font-semibold text-purple-800">{benchmarkData.progressVelocity.monthlyImprovement} points/month</span>
                  </div>
                  <div className="flex justify-between items-center p-3 bg-indigo-50 rounded-lg">
                    <span className="text-sm text-indigo-700">Projected Score (4 weeks)</span>
                    <span className="font-semibold text-indigo-800">{benchmarkData.progressVelocity.projectedScore} points</span>
                  </div>
                </div>
              </div>
              <div>
                <h3 className="font-semibold text-gray-900 mb-4">Competitive Position</h3>
                <div className="space-y-3">
                  <div className="flex justify-between items-center p-3 bg-orange-50 rounded-lg">
                    <span className="text-sm text-orange-700">Rank Movement</span>
                    <span className="font-semibold text-orange-800">↑ {benchmarkData.progressVelocity.rankMovement} positions</span>
                  </div>
                  <div className="flex justify-between items-center p-3 bg-teal-50 rounded-lg">
                    <span className="text-sm text-teal-700">Percentile Movement</span>
                    <span className="font-semibold text-teal-800">+{benchmarkData.progressVelocity.percentileMovement} percentile</span>
                  </div>
                  <div className="flex justify-between items-center p-3 bg-yellow-50 rounded-lg">
                    <span className="text-sm text-yellow-700">Closest Competitors</span>
                    <span className="font-semibold text-yellow-800">Within {benchmarkData.progressVelocity.closestCompetitors} points</span>
                  </div>
                  <div className="flex justify-between items-center p-3 bg-red-50 rounded-lg">
                    <span className="text-sm text-red-700">Distance from Target Rank</span>
                    <span className="font-semibold text-red-800">{benchmarkData.progressVelocity.distanceFromTargetRank} positions</span>
                  </div>
                </div>
              </div>
            </div>
            <div className="mt-6 bg-cyan-50 p-4 rounded-lg">
              <p className="text-sm text-cyan-800">
                <strong>Progress Analysis:</strong> Good improvement trend but need to accelerate pace. Current rate will reach target in 6-8 weeks.
              </p>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Comprehensive Review View (Pages 27-28)
  const ComprehensiveReviewView = () => {
    const reviewData = comprehensiveReview;
    
    const getKPIStatusColor = (status: string) => {
      switch (status) {
        case 'achieved': return 'bg-green-100 text-green-800';
        case 'partial': return 'bg-yellow-100 text-yellow-800';
        case 'missed': return 'bg-red-100 text-red-800';
        default: return 'bg-gray-100 text-gray-800';
      }
    };

    const renderStars = (rating: number) => {
      return Array.from({ length: 5 }, (_, i) => (
        <Star key={i} className={`w-4 h-4 ${i < rating ? 'text-yellow-500 fill-current' : 'text-gray-300'}`} />
      ));
    };

    return (
      <div className="min-h-screen bg-gradient-to-br from-teal-50 to-emerald-100 p-6">
        <div className="max-w-7xl mx-auto">
          {/* Header */}
          <div className="mb-8">
            <button
              onClick={() => setCurrentView('performance-analysis')}
              className="flex items-center text-gray-600 hover:text-gray-900 mb-4"
            >
              <ChevronLeft className="w-5 h-5 mr-1" />
              Back to Performance Analysis
            </button>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">Comprehensive Review</h1>
            <p className="text-gray-600">Overall performance summary, KPIs, and critical success factors</p>
          </div>

          {/* Performance Summary */}
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-xl font-semibold mb-6 flex items-center">
              <Award className="w-6 h-6 mr-2 text-teal-600" />
              Overall Mock Test Performance Summary
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div className="text-center p-4 bg-blue-50 rounded-lg">
                <div className="text-3xl font-bold text-blue-600">{reviewData.performanceSummary.finalScore}/120</div>
                <div className="text-sm text-blue-700 mt-1">Final Score</div>
                <div className="text-xs text-blue-600 mt-2">8-point improvement</div>
              </div>
              <div className="text-center p-4 bg-purple-50 rounded-lg">
                <div className="text-3xl font-bold text-purple-600">{reviewData.performanceSummary.percentile}%</div>
                <div className="text-sm text-purple-700 mt-1">Percentile</div>
                <div className="text-xs text-purple-600 mt-2">6-point improvement</div>
              </div>
              <div className="text-center p-4 bg-green-50 rounded-lg">
                <div className="text-3xl font-bold text-green-600">#{reviewData.performanceSummary.rank}</div>
                <div className="text-sm text-green-700 mt-1">Rank</div>
                <div className="text-xs text-green-600 mt-2">1,500 rank improvement</div>
              </div>
              <div className="text-center p-4 bg-orange-50 rounded-lg">
                <div className="text-3xl font-bold text-orange-600">{reviewData.performanceSummary.overallGrade}</div>
                <div className="text-sm text-orange-700 mt-1">Overall Grade</div>
                <div className="text-xs text-orange-600 mt-2">{reviewData.performanceSummary.trend}</div>
              </div>
            </div>
          </div>

          {/* Key Performance Indicators */}
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-xl font-semibold mb-6 flex items-center">
              <BarChart3 className="w-6 h-6 mr-2 text-teal-600" />
              Key Performance Indicators
            </h2>
            <div className="space-y-4">
              {reviewData.keyPerformanceIndicators.map((kpi, index) => (
                <div key={index} className="flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:bg-gray-50">
                  <div className="flex-1">
                    <h3 className="font-semibold text-gray-900">{kpi.metric}</h3>
                    <div className="flex items-center gap-4 mt-2 text-sm">
                      <span className="text-gray-600">Target: <strong>{kpi.target}</strong></span>
                      <span className="text-gray-600">Achieved: <strong>{kpi.achieved}</strong></span>
                    </div>
                  </div>
                  <span className={`px-3 py-1 rounded-full text-sm font-medium ${getKPIStatusColor(kpi.status)}`}>
                    {kpi.status === 'achieved' && <CheckCircle className="inline w-4 h-4 mr-1" />}
                    {kpi.status === 'partial' && <AlertCircle className="inline w-4 h-4 mr-1" />}
                    {kpi.status === 'missed' && <XCircle className="inline w-4 h-4 mr-1" />}
                    {kpi.status}
                  </span>
                </div>
              ))}
            </div>
            <div className="mt-4 bg-teal-50 p-4 rounded-lg">
              <p className="text-sm text-teal-800">
                <strong>KPI Analysis:</strong> All metrics below target but showing improvement trajectory. Need accelerated progress in next few weeks.
              </p>
            </div>
          </div>

          {/* Sectional Performance Rating */}
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-xl font-semibold mb-6 flex items-center">
              <PieChart className="w-6 h-6 mr-2 text-teal-600" />
              Sectional Performance Rating
            </h2>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b-2 border-gray-200">
                    <th className="text-left py-3 px-4 font-semibold">Section</th>
                    <th className="text-center py-3 px-4 font-semibold">Score</th>
                    <th className="text-center py-3 px-4 font-semibold">Target</th>
                    <th className="text-center py-3 px-4 font-semibold">Performance Rating</th>
                    <th className="text-center py-3 px-4 font-semibold">Improvement Priority</th>
                  </tr>
                </thead>
                <tbody>
                  {reviewData.sectionalRating.map((section, index) => (
                    <tr key={index} className="border-b border-gray-100 hover:bg-gray-50">
                      <td className="py-3 px-4 font-medium">{section.section}</td>
                      <td className="text-center py-3 px-4">{section.score}</td>
                      <td className="text-center py-3 px-4">{section.target}</td>
                      <td className="text-center py-3 px-4">
                        <div className="flex justify-center">
                          {renderStars(section.performanceRating)}
                        </div>
                      </td>
                      <td className="text-center py-3 px-4">
                        <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                          section.improvementPriority === 'high' ? 'bg-red-100 text-red-800' :
                          section.improvementPriority === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                          'bg-green-100 text-green-800'
                        }`}>
                          {section.improvementPriority}
                        </span>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            <div className="mt-4 bg-orange-50 p-4 rounded-lg">
              <p className="text-sm text-orange-800">
                <strong>Priority Matrix:</strong> Legal is strength to maintain. Logical, Quant, and GK need intensive work. English needs moderate improvement.
              </p>
            </div>
          </div>

          {/* Critical Success Factors */}
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-xl font-semibold mb-6 flex items-center">
              <Target className="w-6 h-6 mr-2 text-teal-600" />
              Critical Success Factors Analysis
            </h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
              <div>
                <h3 className="font-semibold text-gray-900 mb-3 flex items-center">
                  <CheckCircle className="w-5 h-5 mr-2 text-green-500" />
                  What Contributed Most to Success
                </h3>
                <ul className="space-y-2">
                  {reviewData.criticalSuccessFactors.successFactors.map((factor, index) => (
                    <li key={index} className="text-sm bg-green-50 p-3 rounded-lg text-green-800">
                      {index + 1}. {factor}
                    </li>
                  ))}
                </ul>
              </div>
              <div>
                <h3 className="font-semibold text-gray-900 mb-3 flex items-center">
                  <XCircle className="w-5 h-5 mr-2 text-red-500" />
                  What Held Back Performance
                </h3>
                <ul className="space-y-2">
                  {reviewData.criticalSuccessFactors.failureFactors.map((factor, index) => (
                    <li key={index} className="text-sm bg-red-50 p-3 rounded-lg text-red-800">
                      {index + 1}. {factor}
                    </li>
                  ))}
                </ul>
              </div>
            </div>

            {/* Strategic Effectiveness Review */}
            <div className="border-t pt-6">
              <h3 className="font-semibold text-gray-900 mb-4">Strategic Effectiveness Review</h3>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                {Object.entries(reviewData.criticalSuccessFactors.strategicEffectiveness).map(([metric, score]) => (
                  <div key={metric} className="bg-gray-50 p-3 rounded-lg">
                    <div className="text-sm text-gray-600">{metric}</div>
                    <div className="flex items-center mt-2">
                      <div className="flex-1 bg-gray-200 rounded-full h-2 mr-2">
                        <div
                          className={`h-2 rounded-full ${
                            score >= 7 ? 'bg-green-500' :
                            score >= 5 ? 'bg-yellow-500' : 'bg-red-500'
                          }`}
                          style={{ width: `${score * 10}%` }}
                        />
                      </div>
                      <span className="text-sm font-semibold">{score}/10</span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Learning Consolidation */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-6 flex items-center">
              <Lightbulb className="w-6 h-6 mr-2 text-teal-600" />
              Learning Consolidation
            </h2>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div>
                <h3 className="font-semibold text-gray-900 mb-3 flex items-center">
                  <BookOpen className="w-5 h-5 mr-2 text-blue-500" />
                  Top 3 Most Important Lessons
                </h3>
                <ol className="space-y-2">
                  {reviewData.criticalSuccessFactors.topLessons.map((lesson, index) => (
                    <li key={index} className="text-sm bg-blue-50 p-3 rounded-lg text-blue-800">
                      {index + 1}. {lesson}
                    </li>
                  ))}
                </ol>
              </div>
              
              <div>
                <h3 className="font-semibold text-gray-900 mb-3 flex items-center">
                  <Zap className="w-5 h-5 mr-2 text-purple-500" />
                  Top 3 Skills Developed
                </h3>
                <ol className="space-y-2">
                  {reviewData.criticalSuccessFactors.topSkills.map((skill, index) => (
                    <li key={index} className="text-sm bg-purple-50 p-3 rounded-lg text-purple-800">
                      {index + 1}. {skill}
                    </li>
                  ))}
                </ol>
              </div>
              
              <div>
                <h3 className="font-semibold text-gray-900 mb-3 flex items-center">
                  <RefreshCw className="w-5 h-5 mr-2 text-green-500" />
                  Top 3 Habits to Continue
                </h3>
                <ol className="space-y-2">
                  {reviewData.criticalSuccessFactors.topHabits.map((habit, index) => (
                    <li key={index} className="text-sm bg-green-50 p-3 rounded-lg text-green-800">
                      {index + 1}. {habit}
                    </li>
                  ))}
                </ol>
              </div>
            </div>

            {/* Comparative Position */}
            <div className="mt-6 p-4 bg-teal-50 rounded-lg">
              <h3 className="font-semibold text-teal-900 mb-3">Comparative Position</h3>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                <div>
                  <span className="text-teal-700">From First Mock:</span>
                  <span className="font-semibold text-teal-900 ml-2">+{reviewData.criticalSuccessFactors.comparativePosition.improvementFromFirstMock} points</span>
                </div>
                <div>
                  <span className="text-teal-700">From Last Mock:</span>
                  <span className="font-semibold text-teal-900 ml-2">+{reviewData.criticalSuccessFactors.comparativePosition.improvementFromLastMock} points</span>
                </div>
                <div>
                  <span className="text-teal-700">Personal Best:</span>
                  <span className="font-semibold text-teal-900 ml-2">{reviewData.criticalSuccessFactors.comparativePosition.distanceFromPersonalBest}</span>
                </div>
                <div>
                  <span className="text-teal-700">Target Gap:</span>
                  <span className="font-semibold text-teal-900 ml-2">{reviewData.criticalSuccessFactors.comparativePosition.distanceFromTargetScore} points</span>
                </div>
              </div>
              <div className="mt-3 flex items-center">
                <span className="text-sm text-teal-700">Current Trajectory:</span>
                <span className={`ml-2 px-2 py-1 rounded-full text-xs font-medium ${
                  reviewData.criticalSuccessFactors.comparativePosition.currentTrajectory === 'upward' 
                    ? 'bg-green-100 text-green-800' 
                    : 'bg-yellow-100 text-yellow-800'
                }`}>
                  {reviewData.criticalSuccessFactors.comparativePosition.currentTrajectory === 'upward' && '↑'}
                  {reviewData.criticalSuccessFactors.comparativePosition.currentTrajectory}
                </span>
              </div>
              <p className="mt-3 text-sm text-teal-800">
                <strong>Trajectory Analysis:</strong> Consistent upward trend over 3 mocks. Rate of improvement is good but need to accelerate to meet target timeline.
              </p>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Mistake Bank View (Pages 29-30)
  const MistakeBankView = () => {
    const mistakeData = mistakeBank;
    
    const getCategoryColor = (category: string) => {
      switch (category) {
        case 'conceptualErrors': return 'bg-red-100 text-red-800 border-red-200';
        case 'carelessMistakes': return 'bg-orange-100 text-orange-800 border-orange-200';
        case 'timeManagementErrors': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
        case 'strategyFailures': return 'bg-purple-100 text-purple-800 border-purple-200';
        case 'omrErrors': return 'bg-gray-100 text-gray-800 border-gray-200';
        default: return 'bg-gray-100 text-gray-800 border-gray-200';
      }
    };

    return (
      <div className="min-h-screen bg-gradient-to-br from-rose-50 to-pink-100 p-6">
        <div className="max-w-7xl mx-auto">
          {/* Header */}
          <div className="mb-8">
            <button
              onClick={() => setCurrentView('performance-analysis')}
              className="flex items-center text-gray-600 hover:text-gray-900 mb-4"
            >
              <ChevronLeft className="w-5 h-5 mr-1" />
              Back to Performance Analysis
            </button>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">Mistake Bank & Pattern Recognition</h1>
            <p className="text-gray-600">Comprehensive mistake analysis and error elimination tracking</p>
          </div>

          {/* Top 10 Mistake Patterns */}
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-xl font-semibold mb-6 flex items-center">
              <AlertCircle className="w-6 h-6 mr-2 text-rose-600" />
              Top 10 Mistake Patterns
            </h2>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b-2 border-gray-200">
                    <th className="text-center py-3 px-4 font-semibold w-16">Rank</th>
                    <th className="text-left py-3 px-4 font-semibold">Mistake Type</th>
                    <th className="text-center py-3 px-4 font-semibold">Frequency</th>
                    <th className="text-center py-3 px-4 font-semibold">Section</th>
                    <th className="text-left py-3 px-4 font-semibold">Personal Lesson</th>
                    <th className="text-left py-3 px-4 font-semibold">Action Plan</th>
                  </tr>
                </thead>
                <tbody>
                  {mistakeData.topMistakePatterns.map((pattern) => (
                    <tr key={pattern.rank} className="border-b border-gray-100 hover:bg-gray-50">
                      <td className="text-center py-3 px-4">
                        <span className={`inline-flex items-center justify-center w-8 h-8 rounded-full font-semibold text-sm ${
                          pattern.rank <= 3 ? 'bg-red-100 text-red-800' :
                          pattern.rank <= 6 ? 'bg-orange-100 text-orange-800' :
                          'bg-yellow-100 text-yellow-800'
                        }`}>
                          {pattern.rank}
                        </span>
                      </td>
                      <td className="py-3 px-4 font-medium">{pattern.mistakeType}</td>
                      <td className="text-center py-3 px-4">
                        <span className="px-2 py-1 bg-gray-100 rounded-full text-sm font-medium">
                          {pattern.frequency} times
                        </span>
                      </td>
                      <td className="text-center py-3 px-4 text-sm">{pattern.section}</td>
                      <td className="py-3 px-4 text-sm text-gray-600">{pattern.personalLesson}</td>
                      <td className="py-3 px-4 text-sm">
                        <span className="inline-flex items-center text-blue-600">
                          <Lightbulb className="w-4 h-4 mr-1" />
                          {pattern.actionPlan}
                        </span>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            <div className="mt-4 bg-rose-50 p-4 rounded-lg">
              <p className="text-sm text-rose-800">
                <strong>Pattern Recognition:</strong> Time management and concept clarity are recurring themes across sections.
              </p>
            </div>
          </div>

          {/* Mistake Categories */}
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-xl font-semibold mb-6 flex items-center">
              <PieChart className="w-6 h-6 mr-2 text-rose-600" />
              Mistake Categories Distribution
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {Object.entries(mistakeData.mistakeCategories).map(([category, data]) => {
                const categoryName = category.replace(/([A-Z])/g, ' $1').trim();
                return (
                  <div key={category} className={`border-2 rounded-lg p-4 ${getCategoryColor(category)}`}>
                    <div className="flex items-center justify-between mb-3">
                      <h3 className="font-semibold capitalize">{categoryName}</h3>
                      <span className="text-2xl font-bold">{data.percentage}%</span>
                    </div>
                    <div className="text-sm space-y-2">
                      <div className="flex justify-between">
                        <span>Count:</span>
                        <span className="font-medium">{data.count} mistakes</span>
                      </div>
                      <div className="pt-2 border-t border-current opacity-20"></div>
                      <p className="text-xs italic">Examples: {data.examples}</p>
                    </div>
                  </div>
                );
              })}
            </div>
            
            {/* Visual Progress Bar */}
            <div className="mt-6">
              <h3 className="font-semibold text-gray-900 mb-3">Error Distribution</h3>
              <div className="space-y-3">
                {Object.entries(mistakeData.mistakeCategories).map(([category, data]) => {
                  const categoryName = category.replace(/([A-Z])/g, ' $1').trim();
                  return (
                    <div key={category} className="flex items-center">
                      <div className="w-32 text-sm text-gray-600 capitalize">{categoryName}:</div>
                      <div className="flex-1 bg-gray-200 rounded-full h-6 mr-3">
                        <div
                          className={`h-6 rounded-full flex items-center justify-end pr-2 text-xs font-medium text-white ${
                            category === 'conceptualErrors' ? 'bg-red-500' :
                            category === 'carelessMistakes' ? 'bg-orange-500' :
                            category === 'timeManagementErrors' ? 'bg-yellow-500' :
                            category === 'strategyFailures' ? 'bg-purple-500' :
                            'bg-gray-500'
                          }`}
                          style={{ width: `${data.percentage}%` }}
                        >
                          {data.count}
                        </div>
                      </div>
                      <span className="text-sm font-medium w-12 text-right">{data.percentage}%</span>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>

          {/* Error Elimination Progress */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-6 flex items-center">
              <TrendingUp className="w-6 h-6 mr-2 text-rose-600" />
              Error Elimination Progress
            </h2>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
              <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                <h3 className="font-semibold text-green-900 mb-3 flex items-center">
                  <CheckCircle className="w-5 h-5 mr-2" />
                  Mistakes Eliminated
                </h3>
                <ul className="space-y-2">
                  {mistakeData.errorEliminationProgress.mistakesEliminated.map((mistake, index) => (
                    <li key={index} className="text-sm text-green-700 flex items-start">
                      <CheckCircle className="w-4 h-4 mr-2 mt-0.5 flex-shrink-0" />
                      {mistake}
                    </li>
                  ))}
                </ul>
                <p className="mt-3 text-xs text-green-600 italic">Foundation building working!</p>
              </div>
              
              <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
                <h3 className="font-semibold text-orange-900 mb-3 flex items-center">
                  <RefreshCw className="w-5 h-5 mr-2" />
                  Recurring Mistakes
                </h3>
                <ul className="space-y-2">
                  {mistakeData.errorEliminationProgress.recurringMistakes.map((mistake, index) => (
                    <li key={index} className="text-sm text-orange-700 flex items-start">
                      <AlertCircle className="w-4 h-4 mr-2 mt-0.5 flex-shrink-0" />
                      {mistake}
                    </li>
                  ))}
                </ul>
                <p className="mt-3 text-xs text-orange-600 italic">Need targeted practice</p>
              </div>
              
              <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                <h3 className="font-semibold text-red-900 mb-3 flex items-center">
                  <XCircle className="w-5 h-5 mr-2" />
                  New Mistake Types
                </h3>
                <ul className="space-y-2">
                  {mistakeData.errorEliminationProgress.newMistakeTypes.map((mistake, index) => (
                    <li key={index} className="text-sm text-red-700 flex items-start">
                      <XCircle className="w-4 h-4 mr-2 mt-0.5 flex-shrink-0" />
                      {mistake}
                    </li>
                  ))}
                </ul>
                <p className="mt-3 text-xs text-red-600 italic">Emerging challenges</p>
              </div>
            </div>
            
            {/* Overall Improvement Rate */}
            <div className="bg-gradient-to-r from-green-50 to-blue-50 rounded-lg p-6">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="font-semibold text-gray-900 mb-1">Overall Error Elimination Rate</h3>
                  <p className="text-sm text-gray-600">Percentage of initial mistakes now eliminated</p>
                </div>
                <div className="text-center">
                  <div className="text-4xl font-bold text-green-600">{mistakeData.errorEliminationProgress.improvementRate}%</div>
                  <div className="text-sm text-gray-600 mt-1">Improvement</div>
                </div>
              </div>
              <div className="mt-4 bg-white rounded-full h-4">
                <div
                  className="h-4 rounded-full bg-gradient-to-r from-green-400 to-green-600"
                  style={{ width: `${mistakeData.errorEliminationProgress.improvementRate}%` }}
                />
              </div>
              <p className="mt-4 text-sm text-gray-700">
                <strong>Progress Analysis:</strong> Good foundation building with basic errors eliminated. Focus needed on complex patterns and new emerging challenges.
              </p>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Pattern Recognition Insights View (Page 31)
  const PatternRecognitionInsightsView = () => {
    const patternData = patternRecognitionInsights;
    
    const getPatternTypeColor = (type: string) => {
      switch (type) {
        case 'time': return 'bg-blue-100 text-blue-800 border-blue-200';
        case 'content': return 'bg-green-100 text-green-800 border-green-200';
        case 'decision': return 'bg-purple-100 text-purple-800 border-purple-200';
        default: return 'bg-gray-100 text-gray-800 border-gray-200';
      }
    };

    const getIssueTypeColor = (type: string) => {
      switch (type) {
        case 'stamina': return 'bg-red-100 text-red-800';
        case 'pacing': return 'bg-orange-100 text-orange-800';
        case 'transition': return 'bg-yellow-100 text-yellow-800';
        default: return 'bg-gray-100 text-gray-800';
      }
    };

    const getCorrelationColor = (strength: string) => {
      switch (strength) {
        case 'strong': return 'bg-green-100 text-green-800 border-green-300';
        case 'moderate': return 'bg-yellow-100 text-yellow-800 border-yellow-300';
        case 'weak': return 'bg-red-100 text-red-800 border-red-300';
        default: return 'bg-gray-100 text-gray-800 border-gray-300';
      }
    };

    return (
      <div className="min-h-screen bg-gradient-to-br from-violet-50 to-purple-100 p-6">
        <div className="max-w-7xl mx-auto">
          {/* Header */}
          <div className="mb-8">
            <button
              onClick={() => setCurrentView('performance-analysis')}
              className="flex items-center text-gray-600 hover:text-gray-900 mb-4"
            >
              <ChevronLeft className="w-5 h-5 mr-1" />
              Back to Performance Analysis
            </button>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">Pattern Recognition Insights</h1>
            <p className="text-gray-600">Advanced behavioral pattern analysis and meta-insights</p>
          </div>

          {/* Question-Type Specific Patterns */}
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-xl font-semibold mb-6 flex items-center">
              <BookOpen className="w-6 h-6 mr-2 text-violet-600" />
              Question-Type Specific Patterns
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {patternData.questionTypePatterns.map((pattern, index) => (
                <div key={index} className={`border-2 rounded-lg p-4 ${getPatternTypeColor(pattern.patternType)}`}>
                  <div className="flex items-center justify-between mb-3">
                    <h3 className="font-semibold">{pattern.questionType}</h3>
                    <span className="text-xs px-2 py-1 bg-white rounded-full font-medium capitalize">
                      {pattern.patternType} pattern
                    </span>
                  </div>
                  <div className="space-y-2 text-sm">
                    <div>
                      <span className="font-medium">Pattern:</span>
                      <p className="mt-1">{pattern.pattern}</p>
                    </div>
                    <div>
                      <span className="font-medium">Time Range:</span>
                      <span className="ml-2 font-mono text-xs bg-white px-2 py-1 rounded">{pattern.timeRange}</span>
                    </div>
                    <div className="pt-2 border-t border-current opacity-20"></div>
                    <div>
                      <span className="font-medium">Recommendation:</span>
                      <p className="mt-1 italic">{pattern.recommendation}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Time-Related Patterns */}
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-xl font-semibold mb-6 flex items-center">
              <Clock className="w-6 h-6 mr-2 text-violet-600" />
              Time-Related Patterns
            </h2>
            <div className="space-y-4">
              {patternData.timeRelatedPatterns.map((pattern, index) => (
                <div key={index} className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50">
                  <div className="flex items-start justify-between mb-3">
                    <h3 className="font-semibold text-gray-900 flex-1">{pattern.pattern}</h3>
                    <span className={`px-3 py-1 rounded-full text-xs font-medium ${getIssueTypeColor(pattern.issueType)}`}>
                      {pattern.issueType} issue
                    </span>
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                    <div>
                      <span className="font-medium text-gray-600">Description:</span>
                      <p className="mt-1 text-gray-700">{pattern.description}</p>
                    </div>
                    <div>
                      <span className="font-medium text-gray-600">Time Frame:</span>
                      <p className="mt-1 text-gray-700">{pattern.timeFrame}</p>
                    </div>
                    <div>
                      <span className="font-medium text-gray-600">Impact:</span>
                      <p className="mt-1 text-gray-700">{pattern.impact}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Psychological Patterns */}
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-xl font-semibold mb-6 flex items-center">
              <Brain className="w-6 h-6 mr-2 text-violet-600" />
              Psychological Patterns
            </h2>
            {patternData.psychologicalPatterns.map((pattern, index) => (
              <div key={index} className="space-y-6">
                <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg p-4">
                  <h3 className="font-semibold text-gray-900 mb-3">{pattern.pattern}</h3>
                  
                  {/* Confidence Metrics */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-4">
                    <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                      <h4 className="font-medium text-green-900 mb-2 flex items-center">
                        <TrendingUp className="w-4 h-4 mr-2" />
                        High Confidence Section
                      </h4>
                      <div className="text-sm space-y-1">
                        <div><strong>Section:</strong> {pattern.confidenceMetrics.highConfidenceSection}</div>
                        <div><strong>Accuracy:</strong> {pattern.confidenceMetrics.highConfidenceAccuracy}%</div>
                      </div>
                    </div>
                    <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
                      <h4 className="font-medium text-orange-900 mb-2 flex items-center">
                        <TrendingDown className="w-4 h-4 mr-2" />
                        Low Confidence Section
                      </h4>
                      <div className="text-sm space-y-1">
                        <div><strong>Section:</strong> {pattern.confidenceMetrics.lowConfidenceSection}</div>
                        <div><strong>Accuracy:</strong> {pattern.confidenceMetrics.lowConfidenceAccuracy}%</div>
                      </div>
                    </div>
                  </div>

                  {/* Stress Response & Mindset Impact */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <h4 className="font-medium text-gray-900 mb-2 flex items-center">
                        <AlertCircle className="w-4 h-4 mr-2 text-red-500" />
                        Stress Response
                      </h4>
                      <p className="text-sm text-gray-700 bg-red-50 p-3 rounded">{pattern.stressResponse}</p>
                    </div>
                    <div>
                      <h4 className="font-medium text-gray-900 mb-2 flex items-center">
                        <Zap className="w-4 h-4 mr-2 text-blue-500" />
                        Mindset Impact
                      </h4>
                      <p className="text-sm text-gray-700 bg-blue-50 p-3 rounded">{pattern.mindsetImpact}</p>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>

          {/* Meta-Pattern Analysis */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-6 flex items-center">
              <Activity className="w-6 h-6 mr-2 text-violet-600" />
              Meta-Pattern Analysis
            </h2>
            <div className={`border-2 rounded-lg p-6 ${getCorrelationColor(patternData.metaPattern.correlationStrength)}`}>
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold">Overall Pattern Insight</h3>
                <span className="px-3 py-1 bg-white rounded-full text-sm font-medium capitalize">
                  {patternData.metaPattern.correlationStrength} correlation
                </span>
              </div>
              
              <p className="text-base mb-6 leading-relaxed">{patternData.metaPattern.overallInsight}</p>
              
              <div>
                <h4 className="font-semibold mb-3 flex items-center">
                  <Target className="w-5 h-5 mr-2" />
                  Key Contributing Factors
                </h4>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                  {patternData.metaPattern.keyFactors.map((factor, index) => (
                    <div key={index} className="bg-white border border-current border-opacity-30 rounded-lg p-3 text-center">
                      <span className="text-sm font-medium">{factor}</span>
                    </div>
                  ))}
                </div>
              </div>

              <div className="mt-6 bg-white bg-opacity-50 rounded-lg p-4">
                <h4 className="font-semibold mb-2 flex items-center">
                  <Lightbulb className="w-5 h-5 mr-2 text-amber-600" />
                  Strategic Implication
                </h4>
                <p className="text-sm">
                  The strong correlation between these factors suggests that improving any one area (confidence, time management, or mental stamina) 
                  will have multiplicative effects across all sections. Focus should be on integrated approaches rather than isolated skill development.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Weakness Transformation Journal View (Pages 31-32)
  const WeaknessTransformationJournalView = () => {
    const journal = weaknessTransformationJournal;
    
    return (
      <div className="space-y-6">
        <h3 className="text-xl font-bold text-gray-800">Weakness Transformation Journal</h3>
        
        {/* Transformation Philosophy */}
        <div className="bg-blue-50 p-6 rounded-lg">
          <h4 className="text-lg font-semibold text-blue-800 mb-2">Transformation Philosophy</h4>
          <p className="text-blue-700">{journal.transformationPhilosophy}</p>
        </div>

        {/* Weakness Entries */}
        <div className="space-y-6">
          {journal.weaknesses.map((weakness, index) => (
            <div key={weakness.weaknessId} className="bg-white p-6 rounded-lg shadow-md border">
              <div className="flex items-center justify-between mb-4">
                <h4 className="text-lg font-semibold text-gray-800">{weakness.weaknessName}</h4>
                <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                  weakness.currentStatus.improvementLevel === 'Transforming' ? 'bg-yellow-100 text-yellow-800' :
                  weakness.currentStatus.improvementLevel === 'Significant Progress' ? 'bg-green-100 text-green-800' :
                  'bg-red-100 text-red-800'
                }`}>
                  {weakness.currentStatus.improvementLevel}
                </span>
              </div>

              {/* Starting Point */}
              <div className="mb-4 p-4 bg-red-50 rounded-lg">
                <h5 className="font-medium text-red-800 mb-2">Starting Point</h5>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-2 text-sm">
                  <div><span className="font-medium">Accuracy:</span> {weakness.startingPoint.accuracy}%</div>
                  <div><span className="font-medium">Speed:</span> {weakness.startingPoint.averageTime}s</div>
                  <div><span className="font-medium">Attempts:</span> {weakness.startingPoint.attemptsOutOfTotal}</div>
                  <div><span className="font-medium">Score:</span> {weakness.startingPoint.severityScore}/10</div>
                </div>
              </div>

              {/* Current Status */}
              <div className="mb-4 p-4 bg-green-50 rounded-lg">
                <h5 className="font-medium text-green-800 mb-2">Current Status</h5>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-2 text-sm">
                  <div><span className="font-medium">Accuracy:</span> {weakness.currentStatus.currentAccuracy}%</div>
                  <div><span className="font-medium">Speed:</span> {weakness.currentStatus.currentAverageTime}s</div>
                  <div><span className="font-medium">Attempts:</span> {weakness.currentStatus.currentAttemptsOutOfTotal}</div>
                  <div><span className="font-medium">Confidence:</span> {weakness.currentStatus.confidenceLevel}/10</div>
                </div>
              </div>

              {/* Transformation Strategy */}
              <div className="mb-4 p-4 bg-blue-50 rounded-lg">
                <h5 className="font-medium text-blue-800 mb-2">Transformation Strategy</h5>
                <p className="text-sm text-blue-700">{weakness.transformationStrategy}</p>
              </div>

              {/* Improvement Milestones */}
              <div className="mb-4">
                <h5 className="font-medium text-gray-800 mb-2">Improvement Milestones</h5>
                <div className="space-y-2">
                  {weakness.improvementMilestones.map((milestone, mIndex) => (
                    <div key={mIndex} className="flex items-center justify-between p-3 bg-gray-50 rounded">
                      <div className="flex-1">
                        <div className="flex items-center gap-2">
                          <span className={`w-3 h-3 rounded-full ${
                            milestone.achieved ? 'bg-green-500' : 'bg-gray-300'
                          }`}></span>
                          <span className="text-sm font-medium">{milestone.milestoneDescription}</span>
                        </div>
                        <div className="text-xs text-gray-600 mt-1">
                          Target: {milestone.target} | 
                          {milestone.achieved ? ` Achieved: ${milestone.dateAchieved}` : ' Not achieved yet'}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Weekly Progress */}
              <div className="mb-4">
                <h5 className="font-medium text-gray-800 mb-2">Weekly Progress</h5>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                  {weakness.weeklyProgress.slice(-4).map((week, wIndex) => (
                    <div key={wIndex} className="p-3 bg-gray-50 rounded text-sm">
                      <div className="font-medium">Week {week.weekNumber}</div>
                      <div>Practice: {week.practiceHours}h | Questions: {week.questionsAttempted}</div>
                      <div>Accuracy: {week.accuracyImprovement}% | Speed: {week.speedImprovement}s</div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Evidence of Progress */}
              <div className="p-4 bg-yellow-50 rounded-lg">
                <h5 className="font-medium text-yellow-800 mb-2">Evidence of Progress</h5>
                <p className="text-sm text-yellow-700">{weakness.evidenceOfProgress}</p>
              </div>
            </div>
          ))}
        </div>

        {/* Strength Maintenance */}
        <div className="bg-green-50 p-6 rounded-lg">
          <h4 className="text-lg font-semibold text-green-800 mb-4">Strength Maintenance Strategy</h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {journal.strengthMaintenance.strengths?.map((strength, index) => (
              <div key={index} className="p-4 bg-white rounded border">
                <h5 className="font-medium text-gray-800">{typeof strength === 'string' ? strength : strength.strengthArea || strength}</h5>
                <p className="text-sm text-gray-600 mt-1">Score: {typeof strength === 'string' ? 'N/A' : strength.currentLevel || 'N/A'}/10</p>
                <p className="text-sm text-green-700 mt-2">{typeof strength === 'string' ? 'Maintain current performance' : strength.maintenanceStrategy || 'Maintain current performance'}</p>
              </div>
            )) || <p>No strength data available</p>}
          </div>
          <div className="mt-4 p-4 bg-white rounded border">
            <h5 className="font-medium text-green-800">Overall Philosophy</h5>
            <p className="text-sm text-green-700 mt-1">{journal.strengthMaintenance.maintenancePhilosophy || 'Focus on maintaining current strengths while developing new ones'}</p>
          </div>
        </div>
      </div>
    );
  };

  // Action Plan & Strategy Adjustments View (Pages 33-35)
  const ActionPlanView = () => {
    const plan = actionPlan;
    
    return (
      <div className="space-y-8">
        <h3 className="text-2xl font-bold text-gray-800">Action Plan & Strategy Adjustments</h3>
        
        {/* 24-Hour Immediate Action Plan */}
        <div className="bg-red-50 p-6 rounded-xl shadow-lg border border-red-200">
          <h4 className="text-xl font-semibold text-red-900 mb-6 flex items-center">
            <Clock className="w-6 h-6 mr-2" />
            24-Hour Immediate Action Plan
          </h4>
          
          {/* Critical Actions */}
          <div className="mb-6">
            <h5 className="text-lg font-medium text-red-800 mb-4">Critical Actions</h5>
            <div className="space-y-3">
              {plan.immediate24HourPlan.criticalActions.map((action) => (
                <div key={action.actionId} className="bg-white p-4 rounded-lg border border-red-200">
                  <div className="flex items-center justify-between mb-2">
                    <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                      action.priority === 'high' ? 'bg-red-100 text-red-800' :
                      action.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-green-100 text-green-800'
                    }`}>
                      {action.priority.toUpperCase()} PRIORITY
                    </span>
                    <span className={`px-2 py-1 rounded text-xs ${
                      action.status === 'completed' ? 'bg-green-100 text-green-800' :
                      action.status === 'in_progress' ? 'bg-blue-100 text-blue-800' :
                      'bg-gray-100 text-gray-800'
                    }`}>
                      {action.status.replace('_', ' ').toUpperCase()}
                    </span>
                  </div>
                  <h6 className="font-medium text-gray-900 mb-2">{action.action}</h6>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div><span className="font-medium">Time Required:</span> {action.timeRequired}</div>
                    <div><span className="font-medium">Expected Outcome:</span> {action.expectedOutcome}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Focus Areas */}
          <div className="mb-6">
            <h5 className="text-lg font-medium text-red-800 mb-4">Focus Areas</h5>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {plan.immediate24HourPlan.focusAreas.map((area, index) => (
                <div key={index} className="bg-white p-4 rounded-lg border border-red-200">
                  <div className="flex items-center justify-between mb-3">
                    <h6 className="font-medium text-gray-900">{area.area}</h6>
                    <span className="text-sm text-gray-600">{area.timeToSpend}</span>
                  </div>
                  <div className="mb-3">
                    <div className="flex items-center justify-between text-sm mb-1">
                      <span>Progress</span>
                      <span>{area.currentLevel}/10 → {area.targetLevel}/10</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div 
                        className="bg-red-500 h-2 rounded-full" 
                        style={{ width: `${(area.currentLevel / 10) * 100}%` }}
                      ></div>
                    </div>
                  </div>
                  <div>
                    <h6 className="text-sm font-medium text-gray-700 mb-2 block">Specific Actions:</h6>
                    <ul className="text-sm text-gray-600 space-y-1">
                      {area.specificActions.map((action, aIndex) => (
                        <li key={aIndex} className="flex items-center">
                          <span className="w-1.5 h-1.5 bg-red-400 rounded-full mr-2"></span>
                          {action}
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Time Allocation */}
          <div className="mb-6">
            <h5 className="text-lg font-medium text-red-800 mb-4">Time Allocation Schedule</h5>
            <div className="bg-white rounded-lg border border-red-200">
              {plan.immediate24HourPlan.timeAllocation.map((slot, index) => (
                <div key={index} className={`p-4 ${index !== plan.immediate24HourPlan.timeAllocation.length - 1 ? 'border-b border-red-100' : ''}`}>
                  <div className="flex items-center justify-between">
                    <div className="flex-1">
                      <h6 className="font-medium text-gray-900">{slot.activity}</h6>
                      <p className="text-sm text-gray-600">{slot.purpose}</p>
                    </div>
                    <div className="text-right">
                      <div className="font-medium text-red-700">{slot.timeSlot}</div>
                      <div className="text-sm text-gray-600">{slot.duration}</div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Psychological Preparation */}
          <div>
            <h5 className="text-lg font-medium text-red-800 mb-4">Psychological Preparation</h5>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="bg-green-50 p-4 rounded-lg border border-green-200">
                <h6 className="font-medium text-green-900 mb-3">Confidence Builders</h6>
                <ul className="text-sm text-green-800 space-y-2">
                  {plan.immediate24HourPlan.psychologicalPreparation.confidenceBuilders.map((item, index) => (
                    <li key={index} className="flex items-start">
                      <span className="w-1.5 h-1.5 bg-green-500 rounded-full mr-2 mt-2"></span>
                      {item}
                    </li>
                  ))}
                </ul>
              </div>
              <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                <h6 className="font-medium text-blue-900 mb-3">Stress Management</h6>
                <ul className="text-sm text-blue-800 space-y-2">
                  {plan.immediate24HourPlan.psychologicalPreparation.stressManagement.map((item, index) => (
                    <li key={index} className="flex items-start">
                      <span className="w-1.5 h-1.5 bg-blue-500 rounded-full mr-2 mt-2"></span>
                      {item}
                    </li>
                  ))}
                </ul>
              </div>
              <div className="bg-yellow-50 p-4 rounded-lg border border-yellow-200">
                <h6 className="font-medium text-yellow-900 mb-3">Motivational Reminders</h6>
                <ul className="text-sm text-yellow-800 space-y-2">
                  {plan.immediate24HourPlan.psychologicalPreparation.motivationalReminders.map((item, index) => (
                    <li key={index} className="flex items-start">
                      <span className="w-1.5 h-1.5 bg-yellow-500 rounded-full mr-2 mt-2"></span>
                      {item}
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </div>
        </div>

        {/* Weekly Schedule */}
        <div className="bg-blue-50 p-6 rounded-xl shadow-lg border border-blue-200">
          <h4 className="text-xl font-semibold text-blue-900 mb-6 flex items-center">
            <Calendar className="w-6 h-6 mr-2" />
            Weekly Schedule & Planning
          </h4>

          {/* Weekly Goals */}
          <div className="mb-6">
            <h5 className="text-lg font-medium text-blue-800 mb-4">Weekly Goals</h5>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {plan.weeklySchedule.weeklyGoals.map((goal) => (
                <div key={goal.goalId} className="bg-white p-4 rounded-lg border border-blue-200">
                  <h6 className="font-medium text-gray-900 mb-2">{goal.goal}</h6>
                  <div className="space-y-1 text-sm text-gray-600">
                    <div><span className="font-medium">Target:</span> {goal.targetValue}</div>
                    <div><span className="font-medium">Method:</span> {goal.measurementMethod}</div>
                    <div><span className="font-medium">Deadline:</span> {goal.deadline}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Daily Schedule */}
          <div className="mb-6">
            <h5 className="text-lg font-medium text-blue-800 mb-4">Daily Schedule Sample</h5>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {plan.weeklySchedule.dailySchedule.map((day, index) => (
                <div key={index} className="bg-white p-4 rounded-lg border border-blue-200">
                  <div className="flex items-center justify-between mb-3">
                    <h6 className="font-medium text-gray-900">{day.day}</h6>
                    <span className="text-sm text-blue-600">{day.totalStudyHours}h total</span>
                  </div>
                  <div className="text-sm text-gray-600 mb-3">
                    <span className="font-medium">Focus:</span> {day.focusSection}
                  </div>
                  <div className="space-y-2">
                    {day.sessions.map((session, sIndex) => (
                      <div key={sIndex} className="bg-gray-50 p-3 rounded">
                        <div className="flex items-center justify-between mb-1">
                          <span className="font-medium text-gray-800">{session.activity}</span>
                          <span className="text-xs text-gray-600">{session.duration}</span>
                        </div>
                        <div className="text-xs text-gray-600">
                          {session.time} • {session.resources.join(', ')}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Practice Tests */}
          <div className="mb-6">
            <h5 className="text-lg font-medium text-blue-800 mb-4">Scheduled Practice Tests</h5>
            <div className="space-y-3">
              {plan.weeklySchedule.practiceTests.map((test, index) => (
                <div key={index} className="bg-white p-4 rounded-lg border border-blue-200">
                  <div className="flex items-center justify-between mb-2">
                    <h6 className="font-medium text-gray-900">{test.testType}</h6>
                    <span className="text-sm text-blue-600">{test.scheduledDate}</span>
                  </div>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-4 text-sm">
                    <div><span className="font-medium">Sections:</span> {test.sections.join(', ')}</div>
                    <div><span className="font-medium">Target Score:</span> {test.expectedScore}</div>
                    <div><span className="font-medium">Focus:</span> {test.focusAreas.join(', ')}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Strategy Adjustments */}
        <div className="bg-purple-50 p-6 rounded-xl shadow-lg border border-purple-200">
          <h4 className="text-xl font-semibold text-purple-900 mb-6 flex items-center">
            <Settings className="w-6 h-6 mr-2" />
            Strategy Adjustments
          </h4>

          {/* Section-wise Adjustments */}
          <div className="mb-6">
            <h5 className="text-lg font-medium text-purple-800 mb-4">Section-wise Strategy Changes</h5>
            <div className="space-y-4">
              {plan.strategyAdjustments.sectionWiseAdjustments.map((adjustment, index) => (
                <div key={index} className="bg-white p-4 rounded-lg border border-purple-200">
                  <h6 className="font-medium text-gray-900 mb-3">{adjustment.section}</h6>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                    <div className="space-y-2">
                      <div><span className="font-medium text-red-600">Current:</span> {adjustment.currentApproach}</div>
                      <div><span className="font-medium text-green-600">Proposed:</span> {adjustment.proposedAdjustment}</div>
                    </div>
                    <div className="space-y-2">
                      <div><span className="font-medium">Reason:</span> {adjustment.reasonForChange}</div>
                      <div><span className="font-medium">Expected:</span> {adjustment.expectedImprovement}</div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Time Management Adjustments */}
          <div className="mb-6">
            <h5 className="text-lg font-medium text-purple-800 mb-4">Time Allocation Changes</h5>
            <div className="bg-white rounded-lg border border-purple-200">
              {plan.strategyAdjustments.timeManagementAdjustments.map((adjustment, index) => (
                <div key={index} className={`p-4 ${index !== plan.strategyAdjustments.timeManagementAdjustments.length - 1 ? 'border-b border-purple-100' : ''}`}>
                  <div className="flex items-center justify-between mb-2">
                    <h6 className="font-medium text-gray-900">{adjustment.area}</h6>
                    <div className="text-sm">
                      <span className="text-red-600">{adjustment.currentTimeAllocation}</span>
                      <span className="mx-2">→</span>
                      <span className="text-green-600">{adjustment.proposedTimeAllocation}</span>
                    </div>
                  </div>
                  <p className="text-sm text-gray-600">{adjustment.justification}</p>
                </div>
              ))}
            </div>
          </div>

          {/* Psychological Adjustments */}
          <div className="mb-6">
            <h5 className="text-lg font-medium text-purple-800 mb-4">Psychological Strategy Changes</h5>
            <div className="space-y-4">
              {plan.strategyAdjustments.psychologicalAdjustments.map((adjustment, index) => (
                <div key={index} className="bg-white p-4 rounded-lg border border-purple-200">
                  <h6 className="font-medium text-gray-900 mb-2">{adjustment.aspect}</h6>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                    <div><span className="font-medium text-red-600">Current:</span> {adjustment.currentState}</div>
                    <div><span className="font-medium text-green-600">Target:</span> {adjustment.targetState}</div>
                    <div><span className="font-medium">Strategy:</span> {adjustment.interventionStrategy}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* OMR Strategy Adjustments */}
          <div>
            <h5 className="text-lg font-medium text-purple-800 mb-4">OMR Strategy Improvements</h5>
            <div className="space-y-4">
              {plan.strategyAdjustments.omrStrategyAdjustments.map((adjustment, index) => (
                <div key={index} className="bg-white p-4 rounded-lg border border-purple-200">
                  <div className="mb-3">
                    <div className="text-sm mb-2">
                      <span className="font-medium text-red-600">Current:</span> {adjustment.currentStrategy}
                    </div>
                    <div className="text-sm">
                      <span className="font-medium text-green-600">Proposed:</span> {adjustment.proposedStrategy}
                    </div>
                  </div>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div><span className="font-medium">Sections:</span> {adjustment.sections.join(', ')}</div>
                    <div><span className="font-medium">Benefit:</span> {adjustment.expectedBenefit}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Next Mock Test Planning View (Page 36)
  const NextMockTestPlanningView = () => {
    const plan = nextMockTestPlan;
    
    return (
      <div className="space-y-8">
        <h3 className="text-2xl font-bold text-gray-800">Next Mock Test Planning</h3>
        
        {/* Test Overview */}
        <div className="bg-indigo-50 p-6 rounded-xl shadow-lg border border-indigo-200">
          <h4 className="text-xl font-semibold text-indigo-900 mb-4 flex items-center">
            <Target className="w-6 h-6 mr-2" />
            Test Overview & Targets
          </h4>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
            <div className="bg-white p-4 rounded-lg border border-indigo-200">
              <div className="text-sm text-gray-600">Scheduled Date</div>
              <div className="text-lg font-semibold text-indigo-900">{plan.scheduledDate}</div>
            </div>
            <div className="bg-white p-4 rounded-lg border border-indigo-200">
              <div className="text-sm text-gray-600">Current Score</div>
              <div className="text-lg font-semibold text-red-600">{plan.currentScore}/120</div>
            </div>
            <div className="bg-white p-4 rounded-lg border border-indigo-200">
              <div className="text-sm text-gray-600">Target Score</div>
              <div className="text-lg font-semibold text-green-600">{plan.targetScore}/120</div>
            </div>
            <div className="bg-white p-4 rounded-lg border border-indigo-200">
              <div className="text-sm text-gray-600">Expected Improvement</div>
              <div className="text-lg font-semibold text-blue-600">+{plan.targetScore - plan.currentScore} points</div>
            </div>
          </div>
          <div className="bg-white p-4 rounded-lg border border-indigo-200">
            <h5 className="font-medium text-indigo-800 mb-2">Strategy Theme</h5>
            <p className="text-indigo-700">{plan.strategyTheme}</p>
          </div>
        </div>

        {/* Performance Targets */}
        <div className="bg-white p-6 rounded-xl shadow-lg">
          <h4 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
            <TrendingUp className="w-6 h-6 mr-2" />
            Performance Targets
          </h4>
          <div className="space-y-4">
            {plan.performanceTargets.map((target, index) => (
              <div key={index} className="bg-gray-50 p-4 rounded-lg">
                <div className="flex items-center justify-between mb-2">
                  <h5 className="font-medium text-gray-900">{target.metric}</h5>
                  <div className="text-sm text-blue-600">{target.improvement}</div>
                </div>
                <div className="flex items-center gap-4 text-sm">
                  <div><span className="font-medium text-red-600">Current:</span> {target.currentValue}</div>
                  <div>→</div>
                  <div><span className="font-medium text-green-600">Target:</span> {target.targetValue}</div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Special Focus Areas */}
        <div className="bg-yellow-50 p-6 rounded-xl shadow-lg border border-yellow-200">
          <h4 className="text-xl font-semibold text-yellow-900 mb-4 flex items-center">
            <Zap className="w-6 h-6 mr-2" />
            Special Focus Areas
          </h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {plan.specialFocus.map((focus, index) => (
              <div key={index} className="bg-white p-4 rounded-lg border border-yellow-200">
                <div className="flex items-center justify-between mb-3">
                  <h5 className="font-medium text-gray-900">{focus.area}</h5>
                  <span className="text-sm text-yellow-700">Level {focus.currentLevel}/10</span>
                </div>
                <div className="mb-3">
                  <div className="w-full bg-gray-200 rounded-full h-2 mb-2">
                    <div 
                      className="bg-yellow-500 h-2 rounded-full" 
                      style={{ width: `${(focus.currentLevel / 10) * 100}%` }}
                    ></div>
                  </div>
                  <p className="text-sm text-gray-600 mb-3">{focus.targetImprovement}</p>
                </div>
                <div>
                  <h6 className="text-sm font-medium text-gray-700 mb-2">Tactical Execution:</h6>
                  <ul className="text-sm text-gray-600 space-y-1">
                    {focus.tacticalExecution.map((execution, eIndex) => (
                      <li key={eIndex} className="flex items-center">
                        <span className="w-1.5 h-1.5 bg-yellow-400 rounded-full mr-2"></span>
                        {execution}
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Planned Sequence */}
        <div className="bg-green-50 p-6 rounded-xl shadow-lg border border-green-200">
          <h4 className="text-xl font-semibold text-green-900 mb-4 flex items-center">
            <ArrowUpRight className="w-6 h-6 mr-2" />
            Planned Sequence & Time Allocation
          </h4>
          <p className="text-green-700 mb-4">{plan.plannedSequence.reasoning}</p>
          <div className="space-y-3">
            {plan.plannedSequence.sections.map((section, index) => (
              <div key={index} className="bg-white p-4 rounded-lg border border-green-200">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-4">
                    <span className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-medium">
                      {section.order}
                    </span>
                    <div>
                      <h5 className="font-medium text-gray-900">{section.section}</h5>
                      <p className="text-sm text-gray-600">{section.strategy}</p>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="font-medium text-green-700">{section.allocatedTime} min</div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* OMR Strategy */}
        <div className="bg-blue-50 p-6 rounded-xl shadow-lg border border-blue-200">
          <h4 className="text-xl font-semibold text-blue-900 mb-4 flex items-center">
            <CheckCircle className="w-6 h-6 mr-2" />
            OMR Strategy
          </h4>
          <div className="mb-4">
            <h5 className="font-medium text-blue-800 mb-2">Selected Method</h5>
            <p className="text-blue-700 bg-white p-3 rounded-lg border border-blue-200">{plan.omrStrategy.selectedMethod}</p>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h5 className="font-medium text-blue-800 mb-3">Improvements</h5>
              <ul className="space-y-2">
                {plan.omrStrategy.improvements.map((improvement, index) => (
                  <li key={index} className="flex items-center text-sm text-blue-700">
                    <CheckCircle className="w-4 h-4 mr-2" />
                    {improvement}
                  </li>
                ))}
              </ul>
            </div>
            <div>
              <h5 className="font-medium text-blue-800 mb-3">Checkpoints</h5>
              <ul className="space-y-2">
                {plan.omrStrategy.checkpoints.map((checkpoint, index) => (
                  <li key={index} className="flex items-center text-sm text-blue-700">
                    <Flag className="w-4 h-4 mr-2" />
                    {checkpoint}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>

        {/* Pre-Test Preparation */}
        <div className="bg-purple-50 p-6 rounded-xl shadow-lg border border-purple-200">
          <h4 className="text-xl font-semibold text-purple-900 mb-4 flex items-center">
            <Brain className="w-6 h-6 mr-2" />
            Pre-Test Preparation Protocol
          </h4>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="bg-white p-4 rounded-lg border border-purple-200">
              <h5 className="font-medium text-purple-800 mb-3">Mental Preparation</h5>
              <ul className="space-y-2">
                {plan.preTestPreparation.mentalPreparation.map((prep, index) => (
                  <li key={index} className="flex items-start text-sm text-purple-700">
                    <span className="w-1.5 h-1.5 bg-purple-400 rounded-full mr-2 mt-2"></span>
                    {prep}
                  </li>
                ))}
              </ul>
            </div>
            <div className="bg-white p-4 rounded-lg border border-purple-200">
              <h5 className="font-medium text-purple-800 mb-3">Day Before Activities</h5>
              <ul className="space-y-2">
                {plan.preTestPreparation.dayBeforeActivities.map((activity, index) => (
                  <li key={index} className="flex items-start text-sm text-purple-700">
                    <span className="w-1.5 h-1.5 bg-purple-400 rounded-full mr-2 mt-2"></span>
                    {activity}
                  </li>
                ))}
              </ul>
            </div>
            <div className="bg-white p-4 rounded-lg border border-purple-200">
              <h5 className="font-medium text-purple-800 mb-3">Test Day Protocol</h5>
              <ul className="space-y-2">
                {plan.preTestPreparation.testDayProtocol.map((protocol, index) => (
                  <li key={index} className="flex items-start text-sm text-purple-700">
                    <span className="w-1.5 h-1.5 bg-purple-400 rounded-full mr-2 mt-2"></span>
                    {protocol}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Accountability & Support System View (Page 37)
  const AccountabilitySystemView = () => {
    const system = accountabilitySystem;
    
    return (
      <div className="space-y-8">
        <h3 className="text-2xl font-bold text-gray-800">Accountability & Support System</h3>
        
        {/* Study Partner */}
        <div className="bg-teal-50 p-6 rounded-xl shadow-lg border border-teal-200">
          <h4 className="text-xl font-semibold text-teal-900 mb-4 flex items-center">
            <Users className="w-6 h-6 mr-2" />
            Study Partner
          </h4>
          <div className="bg-white p-4 rounded-lg border border-teal-200">
            <div className="flex items-center justify-between mb-4">
              <h5 className="text-lg font-medium text-gray-900">{system.studyPartner.name}</h5>
              <span className="text-sm text-teal-600">{system.studyPartner.role}</span>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div>
                <h6 className="font-medium text-gray-700 mb-2">Contact Info</h6>
                <p className="text-sm text-gray-600">{system.studyPartner.contactInfo}</p>
              </div>
              <div>
                <h6 className="font-medium text-gray-700 mb-2">Meeting Schedule</h6>
                <p className="text-sm text-gray-600">{system.studyPartner.meetingSchedule}</p>
              </div>
            </div>
            <div>
              <h6 className="font-medium text-gray-700 mb-2">Responsibilities</h6>
              <ul className="space-y-1">
                {system.studyPartner.responsibilities.map((responsibility, index) => (
                  <li key={index} className="flex items-center text-sm text-gray-600">
                    <CheckCircle className="w-4 h-4 mr-2 text-teal-500" />
                    {responsibility}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>

        {/* Mentor/Coach */}
        <div className="bg-blue-50 p-6 rounded-xl shadow-lg border border-blue-200">
          <h4 className="text-xl font-semibold text-blue-900 mb-4 flex items-center">
            <Award className="w-6 h-6 mr-2" />
            Mentor/Coach
          </h4>
          <div className="bg-white p-4 rounded-lg border border-blue-200">
            <div className="flex items-center justify-between mb-4">
              <h5 className="text-lg font-medium text-gray-900">{system.mentorCoach.name}</h5>
              <span className="text-sm text-blue-600">{system.mentorCoach.expertise}</span>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div>
                <h6 className="font-medium text-gray-700 mb-2">Session Frequency</h6>
                <p className="text-sm text-gray-600">{system.mentorCoach.sessionFrequency}</p>
              </div>
              <div>
                <h6 className="font-medium text-gray-700 mb-2">Contact Method</h6>
                <p className="text-sm text-gray-600">{system.mentorCoach.contactMethod}</p>
              </div>
            </div>
            <div>
              <h6 className="font-medium text-gray-700 mb-2">Responsibilities</h6>
              <ul className="space-y-1">
                {system.mentorCoach.responsibilities.map((responsibility, index) => (
                  <li key={index} className="flex items-center text-sm text-gray-600">
                    <Star className="w-4 h-4 mr-2 text-blue-500" />
                    {responsibility}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>

        {/* Check-in Schedule */}
        <div className="bg-purple-50 p-6 rounded-xl shadow-lg border border-purple-200">
          <h4 className="text-xl font-semibold text-purple-900 mb-4 flex items-center">
            <Calendar className="w-6 h-6 mr-2" />
            Check-in Schedule
          </h4>
          <div className="bg-white p-4 rounded-lg border border-purple-200">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div>
                <h6 className="font-medium text-gray-700 mb-2">Frequency</h6>
                <p className="text-sm text-purple-600 font-medium">{system.checkInSchedule.frequency}</p>
              </div>
              <div>
                <h6 className="font-medium text-gray-700 mb-2">Scheduled Days</h6>
                <div className="flex gap-2">
                  {system.checkInSchedule.days.map((day, index) => (
                    <span key={index} className="px-2 py-1 bg-purple-100 text-purple-700 rounded text-xs">
                      {day}
                    </span>
                  ))}
                </div>
              </div>
            </div>
            <div className="mb-4">
              <h6 className="font-medium text-gray-700 mb-2">Activities</h6>
              <ul className="space-y-1">
                {system.checkInSchedule.activities.map((activity, index) => (
                  <li key={index} className="flex items-center text-sm text-gray-600">
                    <Timer className="w-4 h-4 mr-2 text-purple-500" />
                    {activity}
                  </li>
                ))}
              </ul>
            </div>
            <div className="p-3 bg-purple-50 rounded-lg">
              <h6 className="font-medium text-purple-800 mb-1">Purpose</h6>
              <p className="text-sm text-purple-700">{system.checkInSchedule.purpose}</p>
            </div>
          </div>
        </div>

        {/* Study Group */}
        <div className="bg-green-50 p-6 rounded-xl shadow-lg border border-green-200">
          <h4 className="text-xl font-semibold text-green-900 mb-4 flex items-center">
            <Users className="w-6 h-6 mr-2" />
            Study Group
          </h4>
          <div className="bg-white p-4 rounded-lg border border-green-200">
            <div className="flex items-center justify-between mb-4">
              <h5 className="text-lg font-medium text-gray-900">{system.studyGroup.groupName}</h5>
              <span className="text-sm text-green-600">{system.studyGroup.members} members</span>
            </div>
            <div className="mb-4">
              <h6 className="font-medium text-gray-700 mb-2">Platform</h6>
              <p className="text-sm text-gray-600">{system.studyGroup.platform}</p>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h6 className="font-medium text-gray-700 mb-2">Activities</h6>
                <ul className="space-y-1">
                  {system.studyGroup.activities.map((activity, index) => (
                    <li key={index} className="flex items-center text-sm text-gray-600">
                      <Activity className="w-4 h-4 mr-2 text-green-500" />
                      {activity}
                    </li>
                  ))}
                </ul>
              </div>
              <div>
                <h6 className="font-medium text-gray-700 mb-2">Benefits</h6>
                <ul className="space-y-1">
                  {system.studyGroup.benefits.map((benefit, index) => (
                    <li key={index} className="flex items-center text-sm text-gray-600">
                      <Trophy className="w-4 h-4 mr-2 text-green-500" />
                      {benefit}
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </div>
        </div>

        {/* Progress Sharing Platform */}
        <div className="bg-orange-50 p-6 rounded-xl shadow-lg border border-orange-200">
          <h4 className="text-xl font-semibold text-orange-900 mb-4 flex items-center">
            <Share2 className="w-6 h-6 mr-2" />
            Progress Sharing Platform
          </h4>
          <div className="bg-white p-4 rounded-lg border border-orange-200">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div>
                <h6 className="font-medium text-gray-700 mb-2">Platform</h6>
                <p className="text-sm text-gray-600">{system.progressSharing.platform}</p>
              </div>
              <div>
                <h6 className="font-medium text-gray-700 mb-2">Sharing Frequency</h6>
                <p className="text-sm text-orange-600 font-medium">{system.progressSharing.sharingFrequency}</p>
              </div>
            </div>
            <div className="mb-4">
              <h6 className="font-medium text-gray-700 mb-2">Participants</h6>
              <div className="flex flex-wrap gap-2">
                {system.progressSharing.participants.map((participant, index) => (
                  <span key={index} className="px-3 py-1 bg-orange-100 text-orange-700 rounded-full text-sm">
                    {participant}
                  </span>
                ))}
              </div>
            </div>
            <div>
              <h6 className="font-medium text-gray-700 mb-2">Metrics Shared</h6>
              <ul className="space-y-1">
                {system.progressSharing.metricsShared.map((metric, index) => (
                  <li key={index} className="flex items-center text-sm text-gray-600">
                    <BarChart3 className="w-4 h-4 mr-2 text-orange-500" />
                    {metric}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>

        {/* Support Network */}
        <div className="bg-indigo-50 p-6 rounded-xl shadow-lg border border-indigo-200">
          <h4 className="text-xl font-semibold text-indigo-900 mb-4 flex items-center">
            <Heart className="w-6 h-6 mr-2" />
            Multi-layered Support Network
          </h4>
          <div className="bg-white p-4 rounded-lg border border-indigo-200">
            <div className="mb-6">
              <h6 className="font-medium text-gray-700 mb-3">Support Layers</h6>
              <div className="space-y-3">
                {system.supportNetwork.layers.map((layer, index) => (
                  <div key={index} className="flex items-center p-3 bg-indigo-50 rounded-lg">
                    <span className="bg-indigo-100 text-indigo-800 px-3 py-1 rounded-full text-sm font-medium mr-3">
                      {index + 1}
                    </span>
                    <span className="text-sm text-indigo-700">{layer}</span>
                  </div>
                ))}
              </div>
            </div>
            <div className="mb-4 p-4 bg-indigo-50 rounded-lg">
              <h6 className="font-medium text-indigo-800 mb-2">Network Description</h6>
              <p className="text-sm text-indigo-700">{system.supportNetwork.description}</p>
            </div>
            <div>
              <h6 className="font-medium text-gray-700 mb-2">Activation Triggers</h6>
              <ul className="space-y-1">
                {system.supportNetwork.activationTriggers.map((trigger, index) => (
                  <li key={index} className="flex items-center text-sm text-gray-600">
                    <AlertCircle className="w-4 h-4 mr-2 text-indigo-500" />
                    {trigger}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Commitment Statement View (Page 38)
  const CommitmentStatementView = () => {
    const statement = commitmentStatement;
    
    return (
      <div className="space-y-8">
        <h3 className="text-2xl font-bold text-gray-800">Commitment Statement</h3>
        
        {/* Header */}
        <div className="bg-amber-50 p-6 rounded-xl shadow-lg border border-amber-200">
          <h4 className="text-xl font-semibold text-amber-900 mb-4 flex items-center">
            <FileText className="w-6 h-6 mr-2" />
            Personal Commitment Declaration
          </h4>
          <div className="bg-white p-4 rounded-lg border border-amber-200">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
              <div>
                <h6 className="font-medium text-gray-700 mb-1">Student</h6>
                <p className="text-lg font-semibold text-amber-900">{statement.studentName}</p>
              </div>
              <div>
                <h6 className="font-medium text-gray-700 mb-1">Date</h6>
                <p className="text-lg font-semibold text-amber-900">{statement.commitmentDate}</p>
              </div>
              <div>
                <h6 className="font-medium text-gray-700 mb-1">Witness</h6>
                <p className="text-lg font-semibold text-amber-900">{statement.witness}</p>
              </div>
            </div>
          </div>
        </div>

        {/* Commitments */}
        <div className="bg-white p-6 rounded-xl shadow-lg">
          <h4 className="text-xl font-semibold text-gray-900 mb-6 flex items-center">
            <Target className="w-6 h-6 mr-2" />
            Commitment Areas
          </h4>
          <div className="space-y-6">
            {statement.commitments.map((commitment, index) => (
              <div key={index} className="border border-gray-200 rounded-lg p-6">
                <div className="flex items-center mb-4">
                  <span className="bg-amber-100 text-amber-800 px-3 py-1 rounded-full text-sm font-medium mr-3">
                    {index + 1}
                  </span>
                  <h5 className="text-lg font-medium text-gray-900">{commitment.category}</h5>
                </div>
                <div className="space-y-4">
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <h6 className="font-medium text-gray-700 mb-2">Commitment</h6>
                    <p className="text-gray-800">{commitment.commitment}</p>
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-blue-50 p-4 rounded-lg">
                      <h6 className="font-medium text-blue-700 mb-2">Specific Target</h6>
                      <p className="text-sm text-blue-800">{commitment.specificTarget}</p>
                    </div>
                    <div className="bg-green-50 p-4 rounded-lg">
                      <h6 className="font-medium text-green-700 mb-2">Tactical Execution</h6>
                      <p className="text-sm text-green-800">{commitment.tacticalExecution}</p>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Monthly Review */}
        <div className="bg-purple-50 p-6 rounded-xl shadow-lg border border-purple-200">
          <h4 className="text-xl font-semibold text-purple-900 mb-4 flex items-center">
            <RefreshCw className="w-6 h-6 mr-2" />
            Monthly Review Commitment
          </h4>
          <div className="bg-white p-4 rounded-lg border border-purple-200">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <h6 className="font-medium text-gray-700 mb-2">Frequency</h6>
                <p className="text-purple-700 font-medium">{statement.monthlyReview.frequency}</p>
              </div>
              <div>
                <h6 className="font-medium text-gray-700 mb-2">Review With</h6>
                <p className="text-purple-700 font-medium">{statement.monthlyReview.reviewWith}</p>
              </div>
              <div>
                <h6 className="font-medium text-gray-700 mb-2">Update Process</h6>
                <p className="text-sm text-gray-600">{statement.monthlyReview.updateProcess}</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Emergency Backup Plan View (Pages 38-39)
  const EmergencyBackupPlanView = () => {
    const plan = emergencyBackupPlan;
    
    return (
      <div className="space-y-8">
        <h3 className="text-2xl font-bold text-gray-800">Emergency Backup Plan</h3>
        
        {/* Performance Decline Response */}
        <div className="bg-red-50 p-6 rounded-xl shadow-lg border border-red-200">
          <h4 className="text-xl font-semibold text-red-900 mb-4 flex items-center">
            <TrendingDown className="w-6 h-6 mr-2" />
            Performance Decline Response
          </h4>
          <div className="mb-4 p-4 bg-white rounded-lg border border-red-200">
            <h5 className="font-medium text-red-800 mb-2">Trigger Condition</h5>
            <p className="text-red-700">{plan.performanceDecline.trigger}</p>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="bg-white p-4 rounded-lg border border-red-200">
              <h5 className="font-medium text-red-800 mb-2">Immediate Response</h5>
              <div className="space-y-2 text-sm">
                <p><span className="font-medium">Action:</span> {plan.performanceDecline.immediateResponse.action}</p>
                <p><span className="font-medium">Timeframe:</span> {plan.performanceDecline.immediateResponse.timeframe}</p>
                <p><span className="font-medium">Purpose:</span> {plan.performanceDecline.immediateResponse.purpose}</p>
              </div>
            </div>
            <div className="bg-white p-4 rounded-lg border border-red-200">
              <h5 className="font-medium text-red-800 mb-2">Support Activation</h5>
              <div className="space-y-2 text-sm">
                <p><span className="font-medium">Action:</span> {plan.performanceDecline.supportActivation.action}</p>
                <p><span className="font-medium">Timeframe:</span> {plan.performanceDecline.supportActivation.timeframe}</p>
                <p><span className="font-medium">Purpose:</span> {plan.performanceDecline.supportActivation.purpose}</p>
              </div>
            </div>
            <div className="bg-white p-4 rounded-lg border border-red-200">
              <h5 className="font-medium text-red-800 mb-2">Recovery Strategy</h5>
              <div className="space-y-2 text-sm">
                <p><span className="font-medium">Action:</span> {plan.performanceDecline.recoveryStrategy.action}</p>
                <p><span className="font-medium">Timeframe:</span> {plan.performanceDecline.recoveryStrategy.timeframe}</p>
                <p><span className="font-medium">Purpose:</span> {plan.performanceDecline.recoveryStrategy.purpose}</p>
              </div>
            </div>
            <div className="bg-white p-4 rounded-lg border border-red-200">
              <h5 className="font-medium text-red-800 mb-2">Timeline</h5>
              <div className="space-y-2 text-sm">
                <p><span className="font-medium">Action:</span> {plan.performanceDecline.timeline.action}</p>
                <p><span className="font-medium">Timeframe:</span> {plan.performanceDecline.timeline.timeframe}</p>
                <p><span className="font-medium">Purpose:</span> {plan.performanceDecline.timeline.purpose}</p>
              </div>
            </div>
          </div>
        </div>

        {/* Stress/Burnout Warning */}
        <div className="bg-orange-50 p-6 rounded-xl shadow-lg border border-orange-200">
          <h4 className="text-xl font-semibold text-orange-900 mb-4 flex items-center">
            <AlertCircle className="w-6 h-6 mr-2" />
            Stress/Burnout Warning Response
          </h4>
          <div className="mb-6">
            <h5 className="font-medium text-orange-800 mb-3">Early Warning Signs</h5>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
              {plan.stressBurnoutWarning.earlyWarningSign.map((sign, index) => (
                <div key={index} className="flex items-center text-sm text-orange-700 bg-white p-2 rounded border border-orange-200">
                  <AlertCircle className="w-4 h-4 mr-2" />
                  {sign}
                </div>
              ))}
            </div>
          </div>
          <div className="mb-6">
            <h5 className="font-medium text-orange-800 mb-3">Recovery Protocol</h5>
            <div className="space-y-3">
              {plan.stressBurnoutWarning.recoveryProtocol.map((step, index) => (
                <div key={index} className="bg-white p-4 rounded-lg border border-orange-200">
                  <div className="flex items-center mb-2">
                    <span className="bg-orange-100 text-orange-800 px-2 py-1 rounded-full text-xs font-medium mr-3">
                      Step {index + 1}
                    </span>
                    <h6 className="font-medium text-gray-900">{step.step}</h6>
                  </div>
                  <div className="grid grid-cols-2 gap-4 text-sm text-gray-600">
                    <div><span className="font-medium">Duration:</span> {step.duration}</div>
                    <div><span className="font-medium">Purpose:</span> {step.purpose}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>
          <div className="bg-white p-4 rounded-lg border border-orange-200">
            <h5 className="font-medium text-orange-800 mb-2">Support System Activation</h5>
            <p className="text-sm text-orange-700">{plan.stressBurnoutWarning.supportSystemActivation}</p>
          </div>
        </div>

        {/* Major Life Disruption */}
        <div className="bg-yellow-50 p-6 rounded-xl shadow-lg border border-yellow-200">
          <h4 className="text-xl font-semibold text-yellow-900 mb-4 flex items-center">
            <Lock className="w-6 h-6 mr-2" />
            Major Life Disruption Response
          </h4>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="bg-white p-4 rounded-lg border border-yellow-200">
              <h5 className="font-medium text-yellow-800 mb-2">Contingency Study Plan</h5>
              <p className="text-sm text-yellow-700">{plan.majorLifeDisruption.contingencyStudyPlan}</p>
            </div>
            <div className="bg-white p-4 rounded-lg border border-yellow-200">
              <h5 className="font-medium text-yellow-800 mb-2">Support Network</h5>
              <p className="text-sm text-yellow-700">{plan.majorLifeDisruption.supportNetwork}</p>
            </div>
            <div className="bg-white p-4 rounded-lg border border-yellow-200">
              <h5 className="font-medium text-yellow-800 mb-2">Academic Safety Net</h5>
              <p className="text-sm text-yellow-700">{plan.majorLifeDisruption.academicSafetyNet}</p>
            </div>
          </div>
        </div>

        {/* Next Test Planning Backup */}
        <div className="bg-blue-50 p-6 rounded-xl shadow-lg border border-blue-200">
          <h4 className="text-xl font-semibold text-blue-900 mb-4 flex items-center">
            <Calendar className="w-6 h-6 mr-2" />
            Next Test Planning (Backup Strategy)
          </h4>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
            <div className="bg-white p-3 rounded-lg border border-blue-200 text-center">
              <div className="text-xs text-gray-600">Date</div>
              <div className="font-semibold text-blue-900">{plan.nextTestPlanning.scheduledDate}</div>
            </div>
            <div className="bg-white p-3 rounded-lg border border-blue-200 text-center">
              <div className="text-xs text-gray-600">Series</div>
              <div className="font-semibold text-blue-900">{plan.nextTestPlanning.testSeries}</div>
            </div>
            <div className="bg-white p-3 rounded-lg border border-blue-200 text-center">
              <div className="text-xs text-gray-600">Target Score</div>
              <div className="font-semibold text-blue-900">{plan.nextTestPlanning.targetScore}</div>
            </div>
            <div className="bg-white p-3 rounded-lg border border-blue-200 text-center">
              <div className="text-xs text-gray-600">Target %ile</div>
              <div className="font-semibold text-blue-900">{plan.nextTestPlanning.targetPercentile}</div>
            </div>
          </div>
          <div className="mb-6 bg-white p-4 rounded-lg border border-blue-200">
            <h5 className="font-medium text-blue-800 mb-2">Strategy Theme</h5>
            <p className="text-blue-700">{plan.nextTestPlanning.strategyTheme}</p>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h5 className="font-medium text-blue-800 mb-3">Strategic Focus Areas</h5>
              <div className="space-y-2">
                {plan.nextTestPlanning.strategicFocusAreas.map((area, index) => (
                  <div key={index} className="bg-white p-3 rounded-lg border border-blue-200">
                    <div className="flex items-center justify-between mb-1">
                      <span className="text-sm font-medium text-gray-900">{area.area}</span>
                      <span className={`text-xs px-2 py-1 rounded ${
                        area.priority === 'Primary' ? 'bg-red-100 text-red-700' :
                        area.priority === 'Secondary' ? 'bg-yellow-100 text-yellow-700' :
                        'bg-green-100 text-green-700'
                      }`}>
                        {area.priority}
                      </span>
                    </div>
                    <p className="text-xs text-gray-600">{area.approach}</p>
                  </div>
                ))}
              </div>
            </div>
            <div>
              <h5 className="font-medium text-blue-800 mb-3">Pre-Test Protocol</h5>
              <div className="space-y-2">
                {plan.nextTestPlanning.preTestProtocol.map((protocol, index) => (
                  <div key={index} className="bg-white p-3 rounded-lg border border-blue-200">
                    <div className="flex items-center justify-between mb-1">
                      <span className="text-sm font-medium text-blue-700">{protocol.timing}</span>
                    </div>
                    <p className="text-xs text-gray-900 mb-1">{protocol.activity}</p>
                    <p className="text-xs text-gray-600">{protocol.purpose}</p>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Motivation & Mindset Framework View (Page 40)
  const MotivationMindsetView = () => {
    const framework = motivationMindsetFramework;
    
    return (
      <div className="space-y-8">
        <h3 className="text-2xl font-bold text-gray-800">Motivation & Mindset Framework</h3>
        
        {/* Daily Affirmations */}
        <div className="bg-gradient-to-r from-yellow-50 to-orange-50 p-6 rounded-xl shadow-lg border border-yellow-200">
          <h4 className="text-xl font-semibold text-yellow-900 mb-4 flex items-center">
            <Sparkles className="w-6 h-6 mr-2" />
            Daily Affirmations
          </h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {framework.dailyAffirmations.map((affirmation, index) => (
              <div key={index} className="bg-white p-4 rounded-lg border border-yellow-200">
                <p className="text-gray-800 font-medium mb-2 italic">"{affirmation.affirmation}"</p>
                <span className="text-xs text-yellow-700 bg-yellow-100 px-2 py-1 rounded-full">
                  {affirmation.purpose}
                </span>
              </div>
            ))}
          </div>
        </div>

        {/* Weekly Motivation Rituals */}
        <div className="bg-gradient-to-r from-green-50 to-teal-50 p-6 rounded-xl shadow-lg border border-green-200">
          <h4 className="text-xl font-semibold text-green-900 mb-4 flex items-center">
            <Calendar className="w-6 h-6 mr-2" />
            Weekly Motivation Rituals
          </h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {framework.weeklyMotivationRituals.map((ritual, index) => (
              <div key={index} className="bg-white p-4 rounded-lg border border-green-200">
                <div className="flex items-center justify-between mb-2">
                  <h5 className="font-medium text-gray-900">{ritual.day}</h5>
                  <span className="text-xs text-green-700 bg-green-100 px-2 py-1 rounded-full">
                    {ritual.purpose}
                  </span>
                </div>
                <p className="text-sm text-gray-700">{ritual.activity}</p>
              </div>
            ))}
          </div>
        </div>

        {/* Monthly Inspiration Sources */}
        <div className="bg-gradient-to-r from-blue-50 to-indigo-50 p-6 rounded-xl shadow-lg border border-blue-200">
          <h4 className="text-xl font-semibold text-blue-900 mb-4 flex items-center">
            <Lightbulb className="w-6 h-6 mr-2" />
            Monthly Inspiration Sources
          </h4>
          <div className="space-y-4">
            {framework.monthlyInspirationSources.map((source, index) => (
              <div key={index} className="bg-white p-4 rounded-lg border border-blue-200">
                <div className="flex items-center justify-between">
                  <p className="text-gray-800 flex-1">{source.source}</p>
                  <span className="text-xs text-blue-700 bg-blue-100 px-2 py-1 rounded-full ml-3">
                    {source.purpose}
                  </span>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  };

  // Final Motivational Reflection View (Pages 41-42)
  const FinalMotivationalReflectionView = () => {
    const reflection = finalMotivationalReflection;
    
    return (
      <div className="space-y-8">
        <h3 className="text-2xl font-bold text-gray-800">Final Motivational Reflection</h3>
        
        {/* Progress Journey */}
        <div className="bg-gradient-to-r from-green-50 to-emerald-50 p-6 rounded-xl shadow-lg border border-green-200">
          <h4 className="text-xl font-semibold text-green-900 mb-4 flex items-center">
            <TrendingUp className="w-6 h-6 mr-2" />
            Progress Journey
          </h4>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <div className="bg-white p-4 rounded-lg border border-green-200 text-center">
              <div className="text-2xl font-bold text-red-600">{reflection.progressJourney.startingScore}</div>
              <div className="text-sm text-gray-600">Starting Score</div>
            </div>
            <div className="bg-white p-4 rounded-lg border border-green-200 text-center">
              <div className="text-2xl font-bold text-blue-600">{reflection.progressJourney.currentScore}</div>
              <div className="text-sm text-gray-600">Current Score</div>
            </div>
            <div className="bg-white p-4 rounded-lg border border-green-200 text-center">
              <div className="text-2xl font-bold text-green-600">+{reflection.progressJourney.improvement}</div>
              <div className="text-sm text-gray-600">Points Improved</div>
            </div>
          </div>
          <div className="bg-white p-4 rounded-lg border border-green-200">
            <h5 className="font-medium text-green-800 mb-2">Key Success Factors</h5>
            <ul className="space-y-1">
              {reflection.progressJourney.keyFactors.map((factor, index) => (
                <li key={index} className="flex items-center text-sm text-gray-700">
                  <CheckCircle className="w-4 h-4 mr-2 text-green-500" />
                  {factor}
                </li>
              ))}
            </ul>
          </div>
        </div>

        {/* Journey Ahead */}
        <div className="bg-gradient-to-r from-blue-50 to-purple-50 p-6 rounded-xl shadow-lg border border-blue-200">
          <h4 className="text-xl font-semibold text-blue-900 mb-4 flex items-center">
            <Target className="w-6 h-6 mr-2" />
            The Journey Ahead - {reflection.journeyAhead.totalDaysLeft} Days Left
          </h4>
          <div className="space-y-4">
            {reflection.journeyAhead.phases.map((phase, index) => (
              <div key={index} className="bg-white p-4 rounded-lg border border-blue-200">
                <div className="flex items-center justify-between mb-3">
                  <h5 className="text-lg font-medium text-gray-900">{phase.phase}</h5>
                  <span className="text-sm text-blue-600 bg-blue-100 px-3 py-1 rounded-full">
                    {phase.duration}
                  </span>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                  <div><span className="font-medium text-gray-700">Focus:</span> {phase.focus}</div>
                  <div><span className="font-medium text-gray-700">Expected Outcome:</span> {phase.expectedOutcome}</div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Legacy Vision */}
        <div className="bg-gradient-to-r from-purple-50 to-pink-50 p-6 rounded-xl shadow-lg border border-purple-200">
          <h4 className="text-xl font-semibold text-purple-900 mb-4 flex items-center">
            <Star className="w-6 h-6 mr-2" />
            Legacy Vision
          </h4>
          <div className="space-y-4">
            <div className="bg-white p-4 rounded-lg border border-purple-200">
              <h5 className="font-medium text-purple-800 mb-2">Career Vision</h5>
              <p className="text-sm text-gray-700">{reflection.legacyVision.careerVision}</p>
            </div>
            <div className="bg-white p-4 rounded-lg border border-purple-200">
              <h5 className="font-medium text-purple-800 mb-2">Personal Impact</h5>
              <p className="text-sm text-gray-700">{reflection.legacyVision.personalImpact}</p>
            </div>
            <div className="bg-white p-4 rounded-lg border border-purple-200">
              <h5 className="font-medium text-purple-800 mb-2">Family Pride</h5>
              <p className="text-sm text-gray-700">{reflection.legacyVision.familyPride}</p>
            </div>
            <div className="bg-white p-4 rounded-lg border border-purple-200">
              <h5 className="font-medium text-purple-800 mb-2">Professional Goals</h5>
              <p className="text-sm text-gray-700">{reflection.legacyVision.professionalGoals}</p>
            </div>
          </div>
        </div>

        {/* Final Commitment */}
        <div className="bg-gradient-to-r from-amber-50 to-orange-50 p-6 rounded-xl shadow-lg border border-amber-200">
          <h4 className="text-xl font-semibold text-amber-900 mb-4 flex items-center">
            <Flame className="w-6 h-6 mr-2" />
            Final Commitment
          </h4>
          <div className="bg-white p-4 rounded-lg border border-amber-200 mb-4">
            <p className="text-gray-800 italic leading-relaxed">"{reflection.finalCommitment.commitmentText}"</p>
          </div>
          <div className="bg-white p-4 rounded-lg border border-amber-200">
            <h5 className="font-medium text-amber-800 mb-3">Key Promises</h5>
            <ul className="space-y-2">
              {reflection.finalCommitment.keyPromises.map((promise, index) => (
                <li key={index} className="flex items-center text-sm text-gray-700">
                  <Flame className="w-4 h-4 mr-2 text-amber-500" />
                  {promise}
                </li>
              ))}
            </ul>
          </div>
        </div>

        {/* Continuous Tracking */}
        <div className="bg-gradient-to-r from-gray-50 to-slate-50 p-6 rounded-xl shadow-lg border border-gray-200">
          <h4 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
            <RefreshCw className="w-6 h-6 mr-2" />
            Continuous Tracking
          </h4>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <div className="bg-white p-4 rounded-lg border border-gray-200">
              <h6 className="font-medium text-gray-700 mb-1">Next Analysis</h6>
              <p className="text-sm text-gray-600">{reflection.continuousTracking.nextAnalysisDate}</p>
            </div>
            <div className="bg-white p-4 rounded-lg border border-gray-200">
              <h6 className="font-medium text-gray-700 mb-1">Progress Tracking</h6>
              <p className="text-sm text-gray-600">{reflection.continuousTracking.progressTracking}</p>
            </div>
            <div className="bg-white p-4 rounded-lg border border-gray-200">
              <h6 className="font-medium text-gray-700 mb-1">Vision Check</h6>
              <p className="text-sm text-gray-600">{reflection.continuousTracking.visionCheck}</p>
            </div>
          </div>
          <div className="bg-white p-4 rounded-lg border border-gray-200 text-center">
            <p className="text-gray-800 italic font-medium">"{reflection.continuousTracking.reminderQuote}"</p>
          </div>
        </div>
      </div>
    );
  };

  // Main render logic
  return (
    <>
      {currentView === 'pretest' && <PreTestSetupForm />}
      {currentView === 'dashboard' && <MockTestDashboard />}
      {currentView === 'analysis' && <DetailedAnalysisView />}
      {currentView === 'performance-analysis' && <PerformanceAnalysisView />}
      {currentView === 'question-analysis' && <QuestionAnalysisView />}
      {currentView === 'sequence-analysis' && <SequenceAnalysisView />}
      {currentView === 'psychological-analysis' && <PsychologicalAnalysisView />}
      {currentView === 'sectional-mastery' && <SectionalMasteryView />}
      {currentView === 'time-omr-analysis' && <TimeOMRAnalysisView />}
      {currentView === 'strategic-decision-log' && <StrategicDecisionLogView />}
      {currentView === 'performance-benchmarking' && <PerformanceBenchmarkingView />}
      {currentView === 'comprehensive-review' && <ComprehensiveReviewView />}
      {currentView === 'mistake-bank' && <MistakeBankView />}
      {currentView === 'pattern-recognition' && <PatternRecognitionInsightsView />}
      {currentView === 'weakness-transformation' && <WeaknessTransformationJournalView />}
      {currentView === 'action-plan' && <ActionPlanView />}
      {currentView === 'next-mock-planning' && <NextMockTestPlanningView />}
      {currentView === 'accountability-system' && <AccountabilitySystemView />}
      {currentView === 'commitment-statement' && <CommitmentStatementView />}
      {currentView === 'emergency-backup' && <EmergencyBackupPlanView />}
      {currentView === 'motivation-mindset' && <MotivationMindsetView />}
      {currentView === 'final-reflection' && <FinalMotivationalReflectionView />}
    </>
  );
};

export default CLATMockTestAnalysis;